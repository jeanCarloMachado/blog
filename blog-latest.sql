-- MySQL dump 10.14  Distrib 5.5.44-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.5.44-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `contact`
--

DROP TABLE IF EXISTS `contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `contact` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(100) NOT NULL,
  `conteudo` text NOT NULL,
  `data` datetime NOT NULL,
  `lido` tinyint(1) NOT NULL DEFAULT '0',
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `visivel` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contact`
--

LOCK TABLES `contact` WRITE;
/*!40000 ALTER TABLE `contact` DISABLE KEYS */;
INSERT INTO `contact` VALUES (19,'julianogatto@yahoo.com.br','Olá Jean.\nCara, comprei o domínio julianogatto.com.br para um projeto futuro e gostaria de saber se tu tem uma indicação de servidor de hospedagem para me indicar.\nValeu, abraço.','2015-01-20 16:16:20',0,1,1),(18,'caio.cesar.g.souza@gmail.com','Boa noite!\n\nOlá Jean, meu nome é Caio e descobri a pouco tempo seu blog, e realmente estou ligeiramente viciado no conteúdo que você disponibiliza.\nBom, mas o caso é que, lendo o seu post (O programador fantasma...\") acabei me identificando, de certa forma e partilhando da mesma ideia.\nMas, queria uma opinião sua, não sei se você trabalha em um ambiente parecido com o meu, mas vamos lá.\n\nEu trabalho em um empresa o qual que uma plataforma e-commerce, entrei na empresa a um certo tempo e, desde o inicio vejo alguns problemas,\no que fiz? Mesmo como programador, propus varias soluções (baseado em estudos e pesquisa sobre), com muito foco em organização,\nmétodos ágeis e processo de desenvolvimento mas, embora tenha feito isso, minhas palavras ecoaram ao relento e não vi nenhuma melhora.\n\nMe sinto um pouco frustrado com a atitude além de que atualmente ganho 50% do que seria o salário de um programador (convenhamos, é exploração para quem trabalho 8 horas diárias).\nCom a desordem no trabalho comecei a aprender mais sobre gerência de projetos e trabalho em equipe realmente e, acho que talvez eu devesse tentar algo novo (aí bate o medo da mudança).\nAcho que ficaria muito mais a vontade em uma equipe que seguisse realmente a ideia de que é o desenvolvimento de software, até talvez ter uma produtividade melhor e satisfação profissional.\n\nMe estendi bastante e acabei mudando um pouco do assunto do post, mas realmente queria sua opinião, será que vale apena essa mudança?\n\nEspero que possa me ajudar, aguardo seu retorno.\n\nAtenciosamente,\nCaio César\n','2014-09-20 21:39:10',0,1,1);
/*!40000 ALTER TABLE `contact` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `metatag`
--

DROP TABLE IF EXISTS `metatag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `metatag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(60) NOT NULL,
  `author` varchar(60) NOT NULL,
  `description` varchar(150) NOT NULL,
  `keywords` varchar(255) NOT NULL,
  `revisit` set('7','15','30','90') NOT NULL DEFAULT '7',
  `related_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=122 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `metatag`
--

LOCK TABLES `metatag` WRITE;
/*!40000 ALTER TABLE `metatag` DISABLE KEYS */;
INSERT INTO `metatag` VALUES (1,'Jean Carlo Machado - Blog','Jean Carlo Machado','A blog to register my personal opinions about any subject that matters for myself.','Programming, Computer Science, PHP, C/C++, Opinative','7',0),(2,'Do Software Livre e da Liberadade dos Usuários','Jean Carlo Machado','Conceitos chave sobre o software livre e os problemas decorrentes de uma sociedade de código fechado.','GNU, Software livre, sociedade, Stallman','',4),(3,'Vim tips Second Edition','Jean Carlo Machado','Some vim tips mainly from the book Pratical Vim','Vim tips','',3),(4,'Controle de hardware via porta paralela','Jean Carlo Machado','Guia rápido para programação de porta paralela utilizando C','C, Porta paralela','7',5),(5,'NGINX com FastCGI lado a lado com o APACHE','Jean Carlo Machado','Aborda a instalação do NGINX com suporte à múltiplas versões do PHP funcional quando em paralelo com o Apache.','NGINX, CENTOS, Servidor web, PHP, Fast-CGI','',6),(6,'','','','','',7),(7,'','','','','',10),(8,'About Jean','Jean Carlo Machado','A brief description of Jean and his works','Backend developer, PHP, Zend Framework 2, Linux, Jean Carlo Machado, Programmer','7',2),(9,'Curiosidades e dicas sobre PHP','Jean Carlo Machado','Este post é dedicado a apresentar algumas dicas e curiosidades sobre PHP que estão, normalmente, distanciadas do senso comum.','PHP, boas práticas, curiosidades','7',13),(10,'Git tips','Jean Carlo Machado',' This post aims to be a set of commands and definition of what i consider essential to the development of well versioned projects using Git.','Git, facilities, pratical','7',11),(11,'The God Delusion Ending','Richard Dawkings','Richard Dawkings inspirational talk - freely translated','','',14),(12,'Music','','','','7',15),(13,'Facilitando a vida - backup de banco de dados','Jean Carlo Machado','Scripts para automatizar backup’s no MySQL','Mysql, bash script, backup, bash','7',16),(14,'Militant Atheism ','Jean Carlo Machado','An awsome Richard Dawkin\'s talk about atheism and the religious tabu.','Atheism, TED, Richard Dawkings','7',17),(15,'List of fallacies and biases','Jean Carlo Machado','A list of fallacies and biases we tend to fall in or practice','Fallacies, Biases','7',18),(16,'RESTFul - é mesmo?','Jean Carlo Machado','Serviços baseados em HTTP, em principal: websites e webservices, muito podem se beneficiar de uma arquitetura RESTFul, quanto mais baseada em recursos','','7',20),(17,'Search and Replace on console','Jean Carlo Machado','A review of ways to search and replace on UNIX-like systems','Search, Replace, Linux','7',19),(18,'','','','','',21),(19,'Valores, moral e ética','Jean Carlo Machado','Resumo sobre valores, moral e ética','Resumo, moral, ética, valores','',22),(20,'Upando seu projeto git em um servidor sem git','Jean Carlo Machado','Um manual de como sincronizar seu projeto git em um servidor via ftp.','Git, FTP','',23),(21,'O programador fantasma','Jean Carlo Machado','Como o anonimato está matando sua carreira em programação','Programação, Carreira, Desenvolvimento','7',24),(22,'Vim e Sublime: o melhor de ambos','Jean Carlo Machado','Entenda o porquê de utilizar os recursos do Vim em sua IDE','Vim, Sublime, Workflow, IDE','7',25),(23,'Programador: tipo Mago D&D','Jean Carlo Machado','Traçando um paralelo entre a profissão de programador e o Mago D&D','Programação, D&D.','',26),(24,'A Paisagem Moral, Harris - Breves impressões','Jean Carlo Machado','Sucintas opiniões sobre o livro A Paisagem Moral de Sam Harris','A paisagem moral, Sam Harris','',27),(25,'','','','','',28),(26,'Sistema de plugins no Zend Framework2 ','Jean Carlo Machado','Como construir um sistema genérico de plugins igual ao dos Controllers do Zend Framework 2','Zend Framework 2, Plugins, Controller, Orientação a Objetos, Serviços','7',29),(27,'ZF2 Traits','Jean Carlo Machado','null','Virtualbox','',35),(28,'','','','','',36),(29,'O preço da gambiarra','Jean Carlo Machado','Como a improvisação em programação cria um ciclo de problemas e a única forma de evitá-la','Programação, Gambiarra, Boas práticas','',37),(30,'Chega de entretenimento leviano','Jean Carlo Machado','','','7',38),(31,'Quotes','Jean Carlo Machado','','','7',39),(32,'Testes de API com o Pyresttest','Jean Carlo Machado','','Testes de integração, Pyresttest','7',41),(33,'A ciência e suas contradições','Jean Carlo Machado','','','',42),(34,'GNU Screen','Jean Carlo Machado','','','',43),(35,'Como adormecer rapidamente','Jean Carlo Machado','Como adormecer rapidamente','','',49),(36,'Vim tabs','Jean Carlo Machado','A simple review and utilization examples of Vim tabs','Vim, tabs, examples, syntax','',52),(37,'','','','','',50),(38,'Metas 2015','Jean Carlo Machado','Meu conjunto de metas para o ano de 2015','Metas do ano de 2015','7',48),(39,'Dicas do livro Clean Code: A Handbook of Agile Software C','Jean Carlo Machado','Transcrevi as partes que julguei de maior relevância neste ótimo livro sobre código limpo','Código limpo, review, notas','7',53),(40,'Dicas de Bash','Jean Carlo Machado','Dicas de Bash','','',30),(41,'Weekly Report','Jean Carlo Machado','Log Semanal','Log Semanal','7',55),(42,'Compiling PHP','Jean Carlo Machado','Minha solução para backups','Backup','7',56),(43,'Programming Log','Jean Carlo Machado','null','null','',57),(44,'Advanced Pyresttest by example','Jean Carlo Machado','null','null','',58),(45,'Notas do livro: Crepúsculo dos ídolos','Jean Carlo Machado','Um conjunto de notas que extraí do livro: Crepúsculo dos ídolos de Nietzsche','Nietzsche, Review, Crepúsculo dos ídolos','7',61),(46,'My game development wandering','Jean Carlo Machado','Some experiments of mine','Game development, Experiments','',67),(47,'Combos com o Vim','Jean Carlo Machado','O vim é uma ferramenta muito poderosa. Este post é dedicado a exemplificar algumas das possibilidades desta ferramenta com casos pràticos.','Vim, Examples\'','7',69),(48,'','','','','',71),(49,'Tornando o uso do teclado mais produtivo no Linux','Jean Carlo Machado','Dicas para melhorar o uso do teclado alterando funções de teclas pouco utilizadas','Teclado, Produtividade, Linux','7',72),(50,'Dicas Ack','Jean Carlo Machado','Algumas dicas práticas de utilização do ack','Ack, dicas','',73),(51,'Sintomas de design podre','Jean Carlo Machado','Como identificar se o design de seu projeto está apodrecendo','Design de software','7',74),(52,'','','','','',9),(53,'XDebug','','','','',32),(54,'Vim tips First Edition','Jean Carlo Machado','A set of tips about Vim','Vim tips','',1),(55,'','','','','',77),(56,'Archlinux wanderings: changing GUI\'s ','Jean Carlo Machado','Just another post about why I love Archlinux','Archlinux','',59),(57,'Quando refatorar','Jean Carlo Machado','Reflexões sobre quando é necessário refatorar e a postura adequada quanto à refatoração dos interessados no projeto','Refatoração,','',81),(58,'Expressões Regulares','Jean Carlo Machado','','','',33),(59,'','','','','',63),(60,'','','','','',82),(61,'Alta performance com Bash','Jean Carlo Machado','Algumas dicas para torná-lo mais rápido utilizando terminais Bash','Bash dicas, Emacs','7',79),(62,'To remember','Jean Carlo Machado','Things to do not forget','','',54),(63,'Review: The miracle of mindfulness','Jean Carlo Machado','A review about the miracle of mindfulness','Mindfulness','',86),(64,'Review of the Book: How to win friends and influence people','Jean Carlo Machado','A simple review containing the key aspects of this amazing book','Friends, Socialize','7',88),(65,'Como aprender PHP','Jean Carlo Machado','Algumas dicas para começar com PHP','PHP','',89),(66,'Porque escolhi o vim?','Jean Carlo Machado','Porquê você programador deve considerar o Vim como seu editor de textos','Vim','',90),(67,'Game development wandering','Jean Carlo Machado','Some experiments of mine','Game development, Experiments','',92),(68,'Notas Humano demasiado Humano','Jean Carlo Machado','Notas que extraí do livro Notas Humano demasiado Humano','Notas, Humano demasiado humano, Nietzsche','7',94),(69,'Archliux wanderings: Power settings','Jean Carlo Machado','Some tips on power management for Archlinux users','Archlinux, Poser saving, Power settings','',83),(70,'CURL, Bash and Firefox Mutualism','Jean Carlo Machado','A simple yet powerful way of using CURL Bash and Firefox to debug HTTP services','Firefox, CURL, Bash','7',99),(71,'Trabalhos Científicos: Semana 2','Jean Carlo Machado','Review sobre os trabalhos acdêmicos os quais sou induzido a ler.','Ciência, Games, Review','7',100),(72,'Por um teclado mais produtivo','Jean Carlo Machado','Dicas para melhorar o uso do teclado alterando funções de teclas pouco utilizadas','Teclado, Produtividade, Linux','',101),(73,'My opinions about TDD','Jean Carlo Machado','My opinions about TDD','TDD','7',87),(74,'Trabalhos científicos Edição 3','Jean Carlo Machado','A terceira edição da minha revisão de trabalhos científicos','Ciência, Revisão','7',102),(75,'Tutorial de Docker','Jean Carlo Machado','Uma revisão sobre as funcinalidades do Docker','null','7',76),(76,'What reuse REALLY means.','Jean Carlo Machado','A post talking about reuse','Reuse, PHP','7',91),(77,'People I admire and Why','Jean Carlo Machado','This post aims to be a list of people I admire and the traits in their personality that makes them cool for myself','People','7',80),(78,'Trabalhos científicos edição 4','Jean Carlo Machado','A quarta edição de revisão de trabalhos científicos','Ciência','7',95),(79,'Traits of my posture on software','Jean Carlo Machado','About what I value on software','software values','7',34),(80,'Dicas de escrita científica','Jean Carlo Machado','null','null','7',47),(81,'Especificação do HTML5 ','Jean Carlo Machado','null','null','7',46),(82,'Php e Hooks do git','Jean Carlo Machado','null','null','7',51),(83,'Review how to win friends and influence people','Jean Carlo Machado','null','null','7',64),(84,'My Goals','Jean Carlo Machado','null','null','7',70),(85,'Lecture on clean code','Jean Carlo Machado','A lecture I gave on coderocker about Clean Code','','7',93),(86,'','Jean Carlo Machado','','','7',103),(87,'','Jean Carlo Machado','','','7',104),(88,'','Jean Carlo Machado','','','7',105),(89,'','Jean Carlo Machado','','','7',106),(90,'The only responsable moment is the last possible moment','Jean Carlo Machado','About the wisdom of delay decisons','Decisions, Software management','7',107),(91,'For a setup of tests entities','Jean Carlo Machado','Looking for a way to improve the creation of entities for tests','Tests, Setup, PHP, TDD','7',108),(92,'Decoupling strategies for Zend Framework 2 applications','Jean Carlo Machado','Some strategies about decoupling zend framework 2 applications','Zend Framework 2, Decoupling','7',109),(93,'Review your assumptions as soon as possible','Jean Carlo Machado','Or how you can lose a vast amount of time debuggin if not so','Debug, Good practises','7',110),(94,'Rest vs RPC','Jean Carlo Machado','Which is the real distinction between rest and rpc','Rest, RPC','7',111),(95,'The best alias you will ever have','Jean Carlo Machado','Se here a alias to create aliases','Aliases, Unix, Linux','7',112),(96,'Things to remember from the book: Ready Player One','Jean Carlo Machado','Some important geeky references to record','Geek, Review, Book','7',113),(97,'Não esqueça de ser ótimo','Jean Carlo Machado','Um post sobre como lidar com situações que possam gerar conflitos','Postura, DFTBA','7',114),(98,'Refactoring must be a constant','Jean Carlo Machado','Why refactoring is so important in all parts of the development process','Refactoring','7',115),(99,'Remove Firefox useless CURL headers with this','Jean Carlo Machado','A simple program to remove Firefox useless curl headers','Curl, Perl, Firefox, Headers','7',116),(100,'The destructive power of Proactive Incompetents','Jean Carlo Machado','What they are capable of and how to deal with them','Incompetence, Proactivity','7',117),(101,'The ignorance related fallacies','Jean Carlo Machado','The wrost of all fallacies are those based on ignorance','Ignorance, fallacies','7',118),(102,'Code Complete Notes','Jean Carlo Machado','A few notes from the book Code Complete','Code Complete Book Review','7',119),(103,'Reflections on Service layer','Jean Carlo Machado','A problem Im used to face when developing o a service layer structured system','service layer, tdd, development','7',121),(104,'Remove early','Jean Carlo Machado','A developer should prefer removing files than adding them','Development, Versioning','7',122),(105,'The last responsible moment','Jean Carlo Machado','How the last responbile moment is the only responsible moment','Development, Life rule','7',123),(106,'From browser to test','Jean Carlo Machado','How I usually create a test based on a browser request','PHP, Tests, Curl','7',124),(107,'Locale, locale..','Jean Carlo Machado','A tip about locale','Locale Php','7',125),(108,'Links','Jean Carlo Machado','Nice links','Links','7',126),(109,'Notas: Pai Rico Pai Pobre','Jean Carlo Machado','Notas do livro Pai Rico Pai Pobre','Revisão Livro','7',127),(110,'Hard lessons from code reviews','Jean Carlo Machado','Some lessons from code reviews','Code review','7',128),(111,'Dicas Pacman','Jean Carlo Machado','Alguns comandos úteis para a manutenção de uma máquina utilizando o Pacman para gerenciar pacotes','Pacman, Archlinux, Tips','7',129),(112,'A cool hack for rand','Jean Carlo Machado','A nice tip for PHP rands function','PHP rand','7',130),(113,'Bookmarks 2015-10','Jean Carlo Machado','My bookmarks for 2015-10','Bookmarks','7',131),(114,'My notes for the QA Hangout','Jean Carlo Machado','A collections of notes I build for the QA Hangout','QA, PHP, Hangout','7',132),(115,'Container Statsd with Mongo Backend','Jean Carlo Machado','A brief review of the docker container I created with Statds Mongo','Mongo, Statsd, Docker, Review','7',133),(116,'Slow ride with kernel upgrades','Jean Carlo Machado','Dont be too hasty to upgrade your kernels','Kernel, Upgrades, Linux, Archlinux','7',134),(117,'UML','Jean Carlo Machado','Some tips about UML','UML','7',135),(118,'A year of my Arch installation','Jean Carlo Machado','A review of my expirience with Arch in this year long installation','Archlinux, installation, rewiew','7',136),(119,'Front in floripa','Jean Carlo Machado','Some reflections about the front in floripa event','Front in floripa event','7',137),(120,'CleanCode references','Jean Carlo Machado','A set of links about Clean Code literature','Clean Code links','7',138),(121,'Code review references','Jean Carlo Machado','A set of references about code review','Code review','7',139);
/*!40000 ALTER TABLE `metatag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `titulo` varchar(199) NOT NULL,
  `conteudo` text NOT NULL,
  `publicado` tinyint(1) NOT NULL DEFAULT '0',
  `data` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=140 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (1,'Vim Generic Tips','Some important Vim tips I collected over time. For me they serve as a reference and as a reminder.\n\n###Naming conventions over configuration files\n\nThis are how some important chars are described on configuration files like vimrc.\n\n- ``<Bar>`` : also known as pipe\n- ``<Esc>`` : escape char\n- ``<CR>`` carrier return or enter\n- ``<Leader>``: the meta character leader\n\n##Normal commands\n\n- ``ZZ`` quit, saving if the buffer was altered saves it too\n- ``]p`` indented paste\n- ``P`` paste above.\n- ``p`` paste below.\n- ``S`` substitute the line\n- ``gUU`` all the line uppercase\n- ``guu`` all the line lowercase\n- ``G=gg`` indent all the buffer\n- ``\\`\\``` puts the cursor on the line of the last modificaton\n- ``=%``  reindent inside a paired block\n- ``p`` puts text from a register after the cursor\n- ``P`` puts text from a register before the cursor\n- ``gv`` go visual back again\n- ``s`` delete a single character and remains in insert mode\n- ``X`` delete a character before cursor\n\n####Movements\n\n- ``#`` search for the current word backward (the opposite of ``*``)\n- ``%`` go to the closing match of the under cursor character. Some applied chars are``([{}])``\n- ``e`` the end of the word\n-  ``ge`` the end of the previous word\n- ``(`` the beginning of a sentence\n- ``)`` the end of a sentence\n- ``{`` the beginning of a block\n- ``}``  the end of a block\n- ``H`` the highest point of the screen\n- ``M`` the middle of the screen\n- ``L`` the lowest point of the screen\n- ``zt`` puts the curso on the top of the screen\n- ``zz`` puts the curso on the middle of the screen\n- ``zt`` puts the curso on the bottom of the screen\n\n##Registers\n\n\n> If we wanted to yank the current word into register a , we could run \"ayiw . Or if we wanted to cut the current line into register b , we could run \"bdd . Then we could paste the word from register a by typing \"ap , or we could paste the line from register b by typinng \"ap , or we could paste the line from register b by typing \"bp. (Pratical Vim)\n\nSome important registers to keep in mind.\n\n- ``\" `` the clipboard \n- ``\"\\*`` the primary\n- ``\":`` Last ex command\n- ``\"/`` Last search pattern\n- ``\".`` Last inserted text\n- ``\"0`` yank \n\n###Copy to a register:\n\n``\"ay$`` Yank to register a till the end of the word\n\n``\"ap`` Paste register a\n\n``\\\"uyiw`` Yank the current word to register u\n\n``/<C-r>u`` Paste the register u on search.  \nimplements ServiceLocatorAwareLoca\n\n###Cleaning registers\n\n```qaq``` to register ``a``.\n\n###Check content of register\n\n``:reg a`` to check the content of register ``a``.\n\n###Appending to register\n\n``A`` appends to register ``a``.\n\n---\n\n##Search and substitute\n\n``\\c`` to search all previously with case insensitive.\n``\\C`` to search all previously with case sensitive.\n\n###Very magic search\n\nVery magic search is a search that consider all (applicable) chars its finds as regex special ones, so no escaping to get regex here.\n\n```\n/\\vVeryMagicRegexSearch\n```\n\nVery no magic search is a search that consider all (applicable) chars its finds as literals special, so you need to escape get regex here.\n\n```\n/\\VVeryNoMagicSearch\n```\n\n###End of the match\n\n`` /foo/e `` put the cursor on the end of the match\n\n\nSubstitute the first parenthesis matched on the last search\n\n**Obs**: The parenthesis matches on searches goes inside numeric registers so it could be handled ways beyond what is exemplified above.\n\n####Repeat the last substitution\n\n``:%s//~/ ``  \n\n##Searching on history\n\n``q:`` ex commands history\n``q/`` search commands history\n\n\n---\n\n##Global command\n\n``:g/\\v^\\#{1,}/normal gUU`` To capitalize all markdown titles\n\n``:g/TODO/t$`` The t command here append to the end of the file\n\n###Invert selection of global command\n\n``:v/TODO/yank A``\n\n###Run commands inside blocks on a global context\n\n```\n:g/{/ . 1,/}/-1 >\n```\n\n##Other side of visual selection\n\nWhen on visual mode you could adjust the other side of the visual selection by pressing ``o``.\n\n---\n\n##Tags\n\n``g<C-]>`` List all matching tags\n``<C-t>`` Back on the tag list\n\n```\n:tag ServiceLocatorAware<tab> \n```\nTo go to a tag from ex mode\n\n---\n\n##Autocomplete\n\n``part<C-x><C-l><ESC>`` To auto complete a line.  \n\n``part<C-x><C-f>`` To auto complete a file name.\n\n---\n\n##Spell\n\n- ``[s`` back\n- ``]s`` forward\n- ``zg`` add current word to spell file\n- ``zw`` remove current word from spell file\n- ``zug`` undo dictionary crud\n- ``1z=`` to get the first suggestion as correction\n- ``<C-x>s``to fix a spelling problem on the current line when on insert mode.\n\n---\n\n##Macros\n\n``:\'<,\'>normal @a`` to run a macro over the selection\n``5@a`` to run in series\n\n---\n\n##Surround\n\nCheckout this awesome plugin: [surround.vim](https://github.com/tpope/vim-surround).\n\n- ``S\"`` to surround the selection\n- ``S)`` to surround inside parenthesis\n- ``cs])`` change surrounding ] for )\n\n---\n\n\n##Repeat some character to undescore a phrase\n\n```\nVr-\n```\n\n##Navigating history\n\ng; navigate back on changes history\ng, navigate forward in changes history\n\n\n##Going to variable definition\n\n``gd`` above a variable moves to it\'s definition on the file\n\n\n##Seing a function definition\n\n``[I`` with the cursor over the function call\n\n\n##Cool tips links\n\n1. http://stevelosh.com/blog/2010/09/coming-home-to-vim/\n2. https://wiki.archlinux.org/index.php/Vim\n3. http://vim.wikia.com/wiki/Best_Vim_Tips\n4. http://vim.wikia.com/wiki/Search_and_replace\n5. http://benmccormick.org/2014/11/10/vim-workflows-file-switching-strategies/\n6. http://vim.wikia.com/wiki/Replace_a_word_with_yanked_text\n7. http://statico.github.io/vim.html\n8. http://www.viemu.com/a-why-vi-vim.html\n9. http://www.atmos.albany.edu/deas/atmclasses/atm350/vi_cheat_sheet.pdf\n10. http://zzapper.co.uk/vimtips.html\n\n\nOther tips? Please share!',1,'2015-05-29 21:30:00'),(2,'About Jean','Hi, my name is Jean Carlo Machado. I\'m a 22 years old, professional\nsoftware engineer at Compufour. I studied Análise e Desenvolvimento de\nSistemas at IFRS-BG.\n\nI\'m in love with science and technology in general. I really appreciate\nOpen Source and the Unix Way. I know several programming languages but\nI do reserve special interest for PHP, C   and Bash script. My hobbies\ninclude: blogging, to play violin, reading and programming; sporadically\nsome electronics stuff or painting. But maybe the thing I do the most is\nto look for ways to improve my development process.\n\n---\n\n####Currently:\nThe center of my attentions at the moment is an\nawesome ERP so called: [Compufácil](http://compufacil.com.br),\ndeveloped from scratch. It\'s technological aspects are quite impressive,\nto say some: TDD, Zend Framework 2, Doctrine 2, API First, between\nothers.\n\n---\n\n####Past jobs\nBelow are some works I collaborate. In all of them, unless specified\notherwise, I was the responsible for all the Backend development.\n\n#####Emprego Ligado Mobile\nThe mobile version of the [Emprego Ligado\'s](http://empregoligado.com.br/) \nwebsite. This was a program of\nthe [Internet.org](http://internet.org/) from Facebook. On the backend I\nmade use of Silex, Twig, Guzzle, etc.\n\n#####Elefran\nPowerful search engine in MongoDb; Zend Framework 2, between others. \n\n#####Giulian\nContains a smart budget calculator, it counts distances, items metrics,\nand some other parameters to give the client a precise price about the\nmoving his hiring or just budgeting. There\'s a control panel for changes\nattendants for them to better suite their clients needs, etc.\n\n##### Ikro\nSecure and flexible large database sync in a daily basis. A\nflexible and fast search engine.\n\n#####ImgStock\nThe first image e-commerce from Brazil. A powerful e-commerce manager, \nauthor monetization, search engine by similarities\n,and many powerful ways to edit and make images available. Beyond that,\nI spend lots of time on security aspects and image processing.\n\n#####Mercur\nA powerful cache system, many subsystems, ZF2, Doctrine 2.\nThis is a good example of how PHP is flexible and stretchable.\n\n#####Portal de Relacionamentos  da Sta. Clara\nCard debits query, extract prints, DB2 integration, a totem specialized\nversion.\n\n#####Propagnda futebol clube  (PFC)\nVideo hangout with the \"chief\" using web-sockets, ZF2.\nThere some others jobs I worked on, they, for some reason or another,\nI\'m not able to show here.\n\n---\n\n####Hangouts\n\n1. A hangout about [PHP QA\n  tools](https://www.YouTube.com/watch?v=lSP70aT5f2Y);\n2. Here is a hangout I participated about [PHP\nnews](https://plus.google.com/events/cn5r4j3ku2vdtknb14t2ulichv4);\n\n\n---\n\nDid you enjoy my profile? Go further and explore better my skills on the\nlinks below or enter in contact.',0,'2015-05-12 00:00:00'),(24,'O programador fantasma: Como o anonimato está matando sua carreira em programação',' Ele permanece quieto no escuro emergindo apenas brevemente durante suas\nhoras de trabalho. Ele não tem face, não tem nome, sem histórico. Sua\núnica arma é usa palavra. Ele é : **Programador \"O fantasma que faz\ncódigo\"**\n\nEste não é um trabalho de ficção, este fantasma anda entre nós,\ncamuflando-se perfeitamente no ambiente até o dia que ele emerge,\nprocurando um emprego em algum outro local. E quando ele faz,\nempregadores em potencial procuram por ele e ... Ele não pode ser\nencontrado. Em nenhum local.\n\nSim, o \"Fantasma que programa\" é real e você pode ser um dele(s) sem\nperceber o que você está fazendo com sua carreira. Mas ainda não é\ntarde - você pode ainda emergir da escuridão das sombras mas isso\nprecisa ser feito logo, é algo para não atrasar.\n \n\n**Na internet, ninguém sabe se você é um cachorro (ou um programador)**\n\nO [cartoon\nclássico](http://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you\'re_a_dog) deu\nluz ao fato que a internet nos possibilita a criação de nossa própria\nidentidade; nosso poder de ser como ou o que desejamos. Um currículo não\né tão diferente e esse é o ponto crucial onde quero chegar; contratar\nalguém baseando-se no currículo muitas vezes se trata de um tiro no\nescuro, não existe solidez nos dizeres do candidato este é,\nmetaforicamente, um fantasma, sem histórico na web. Isso até pode ser\nalgo esperado quando contratando alguém, digamos, um historiador da\nBatalha de Gettysburg mas de longe não é algo esperado quando\ncontratando alguém na tecnológica e plugada indústria de software.\n\nO que quero dizer é: um currículo vem naturalmente, é uma carta positiva\nde todas as coisas legais que um indivíduo fez através dos anos,\nincluindo sua vasta experiência em uma gama de tecnologias e versões.\nMas a versão deles da carta tende, naturalmente, a ser embelezada para\naumentar a mercabilidade ou porque eles são [incompetentes\ninconscientes](http://en.wikipedia.org/wiki/Four_stages_of_competence).\nEntão, como um empregador em potencial consciente você procura por mais\ninformações para substanciar a vasta gama de conhecimento que seu\ncandidato promete trazer-lhe.\n\nVocê procura por seus perfis no Linkedin. Não existe ou é uma cópia do\ncurrículo e não reflete nenhuma participação em grupos, discussões,\nconexões ou qualquer espécie de engajamento com a comunidade de\nsoftware.\n\nEntão você procura por perfis no Stack Overflow. Sem sorte lá, não\nexiste nenhuma questão feita ou resposta dada. Eles não contribuíram\npara o conhecimento nem aparentam terem estado lá de qualquer maneira\nativa.\n\nTalvez eles têm estado no canal da Microsoft e são donos de um saudável\nperfil MSDN pela mesma razão? Dificilmente.\n\nQue tal contas no Github ou alguma espécie de participação open-source?\nNão, nada lá também.\n\nTalvez uma conta no Twitter ou uma página pública no Facebook para\ndemonstrar o tipo de informação que eles acham relevante repassar ou que\nao menos contenha algumas dicas humoradas à respeito do debate ponto e\nvírgula versus sem ponto e vírgula.\n\nPoderia também haver uma conta no Disqus apontando suas opiniões à\nrespeito de algum dos centenas de milhares pedaços úteis de material de\ndesenvolvimento de software que a citada ferramenta provê. Sem chance.\n\nUm blog? Esqueça isso.\n\nEu vou sair em uma perna aqui e dizer isso: se esse é você, isso pode\nestar matando as prospecções de sua carreira porque isso pinta uma\nimagem muito desconfortável. Deixe-me explicar o por quê.\n\n**Verdadeiros e efetivos desenvolvedores deixam uma trilha de migalhas**\n\n*Scott Hanselman* chama eles de [Desenvolvedores Matéria\nNegra](http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx);\neles fazem uma proporção significante do universo e você nunca os viu!\nNa sua usual afável maneira, Scoot aponta que esses caras estão\nprovavelmente felizes fazendo o trabalho com seus ASP.NET 1.1 e correndo\nquando o relógio bate na hora de ir para casa, certamente para fazer\nalguma espécie de atividade não relacionada à programação.\n\nTudo bem sobre isso, mas essas não são pessoas com paixão pelo que\nfazem. Eles também estão longe de serem os mais produtivos (você pode\nimaginar, sem abstrações, sem CMS, sem MVC, sem ORM, etc.) e eles não\nintroduzirão nenhum tipo de inovação ou contribuição, sendo para\nmelhorar seu ambiente ou ser uma boa companhia.\n\nMas um dos maiores problemas com essa audiência é que eles estão\ntrabalhando no vácuo. O que acontece quando eles são travados por algo?\nTodo mundo é barrado por algo e isso é uma ocorrência normal, a questão\né, o que acontece quando você é travado? Aqueles que conseguem\nreconhecer estarem emperrados antes e procuram a comunidade por suporte\ntem uma significante melhor chance em, não apenas ter o problema\nresolvido antes, mas provavelmente resolver de uma melhor forma. Claro\nque essa busca muitas vezes deixa uma migalha no histórico do\ndesenvolvedor em algum lugar como o Stack Overflow.\n\nReciprocamente, um desenvolvedor deve contribuir? Eu diria que é\nrazoável assumir que 99% dos desenvolvedores já chegaram ao ponto de\nterem que buscar informações em comunidades online quando em face\nde algum problema, mas quantos pagam este favor? Essas comunidades\nfuncionam porque uma razoável parcela de pessoas devotam sua experiência\ngratuitamente, o que dizer de alguém que não contribui enquanto se\nbeneficia do trabalho dos outros? E não estou dizendo para você se\ntornar um [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet),\nmas convenhamos, quem sabe responder aquela pergunta estranha, fazer uma\nalteração ou deixar um comentário para melhorar o valor do conteúdo para\nos futuros desenvolvedores.\n\n Então, o que dizer destes desenvolvedores que não deixam rastros? Bem,\nprimeiramente, eles certamente devem estar gastando seu tempo batendo\nsuas cabeças contra as paredes tentando resolver os problemas que eles\ndeveriam estar resolvendo. Quase sem questionamento, não estão\nutilizando as ferramentas à sua disposição efetivamente - trabalhando\ncom menos eficiência do que deveriam. Podemos estender essa forma de\npensar além do escopo das perguntas e respostas; essas pessoas estão,\nde alguma forma, buscando melhorar suas práticas de desenvolvimento?\nEstão seguindo as melhorias da indústria e trazendo-as para o escritório\ncom elas?\n\n**\"Os melhores programadores são mais de 28 vezes melhores que os piores\nprogramadores\"**\n\nEsta frase é do livro [Facts and Fallacies of Software\nEngineering](http://www.amazon.com/Facts-Fallacies-Software-Engineering-Robert/dp/0321117425) e\né extremamente importante para empregadores por que faz uma diferença\nmassiva no valor do investimento. E não se engane à respeito disso,\nempregados *são* investimentos. Você lerá coisas similares no [The\nMythical\nMan-Month](http://www.amazon.com/gp/product/0201835959?ie=UTF8',1,'2014-09-13 00:00:00'),(3,'Notes from the book: The pragmatic programmer','Here are some of the key aspects of this amazing book: The pragmatic programmer.\nIf you like these sparse ideas and want to go a step further I recommend that you buy the book.\n\n##Characteristics of pragmatic programmers\n\n- Early adopter/fast adapter;\n- Inquisitive;\n- Critical Thinker;\n- Realistic;\n- Jack of all trades;\n\n---\n\nWithin the overall structure of a project there is always room for individuality and craftsmanship. This is particular by true given the current state of software engineering. One hundred years from now, our engineering may seem as archaic as the techniques used by medieval cathedral builders seem to today\'s civil engineers, while our craftsmanship will still be honored.\n\n---\n\nBefore you approach anyone to tell them why something cant be done, is late, or is broken, stop and listen to yourself. Talk to the rubber duck on your monitor, or the cat. Do your excuse sound reasonable, or stupid? How\'s it going to sound to your boss?\n\nRun through the conversation in your mind. What is the other person likely to say? Will they ask, \"Have your tried this..\"  or \"Didn\'t you consider that?\" How will you respond? Before you go and tell them the bad news, is there anything else you can try? Sometimes, you just know what they are going to say, so save them the trouble.\n\n---\n\nOne broken window - a badly designed piece of code, a poor management decision that the team must live with for the duration of the project - is all it takes to start the decline. If you find yourself working on a project with quite a few broken windows, it\'s all too easy to slip into the mindset of \"All the rest of this code is crap, I\'ll just follow suit.\"\n\n---\n\n##Portfolio\n\n- Serious investors invest regularly - as a habit\n- Diversification is the key to long-term success\n- Smart investors balance their portfolio between conservative and high-risk, high-reward investments\n- Inventors try to buy low and sell high for maximum return\n- Portfolios should be reviewed and rebalanced periodically\n\n\n---\n\n##Opportunities for Learning\n\nSo you are reading voraciously, you are on the top of all latest breaking developments in your field (not an easy thing to do), and somebody asks you a question. You don\'t have the faintest idea what the answer is, and freely admit as much.\n\nDon\'t let it stop there. Take it as a personal challenge to find the answer.\n\nIf you cant find the answer yourself, find out who can. Don\'t let it rest. Talking to other people will help build your personal network, and you may surprise yourself by finding solutions to other, unrelated problems along the way. And the old portfolio just keeps getting bigger.\n\n\nIf you ask someone a question, you feel they\'re impolite if they don\'t respond. But how often do you fail to get back to people when they send you and e-mail or a memo asking for information or requesting some action? In the rush of everyday life, it\'s easy to forget. Always respond to e-mails, even if the response is simple \"I\'ll get back to you later.\" Keeping people informed makes them far more forgiving of the occasional slip, and makes them feel that you haven\'t forgotten them.\n\n\n---\n\n##Orthogonality of systems\n\nTwo or more things are orthogonal if changes in one do not affect any of the others. In a well designed system, the database code will be orthogonal to the user interface: you can change the interface without affecting the database, and swap the database without affecting the interfaces.\n\n###Benefits:\n\n- Eliminate effects between unrelated things.\n- Changes are localized.\n- Promotes reuse.\n- Disease sections of code are isolated.\n- The result system is less fragile.\n- Better tested.\n- Not tightly to a particular vendor.\n\nHave you noticed how some project teams are efficient, with everyone knowing what to do and contributing fully, while the members of other teams are constantly bickering and don\'t seem able out of each others way?\n\nOften this is an orthogonality issue. When teams are organized with lots of overlap, members are confused about responsibilities. Every change needs a meeting of the entire team because any of the team might be affected.\n\n---\n\n###Law of Demeter\n\nIf you need to change an object\'s state, get the object to do it for you. This way code remains isolated from the other\'s code\'s implementation and increases the chances that you will remain orthogonal.\n\nAvoid similar functions - **duplicated code is a symptom of structural problems**.\n\n*Building unit tests is itself an interesting test of orthogonality. What does it take to build and link a unit test? Do you have to drag in a large percentage of the rest of the system just to get the test compile or link? If so, you have found a module that is not well decoupled from the rest of the system.*\n\nBug fixing is also a good time to assess the orthogonality of the system as a whole. When you come across a problem, asses how localized the fix is. Do you change just one module, or the changes scattered thought the entire system? When you make a change, does it fix everything or the problems mysteriously arise? This is a good opportunity to bring automation to bear. If you use a source code control system tag bug fixes when you check the code back in after testing. You can run monthly reports analyzing trends in the number of source code files affected by each bug fix.\n\n\n---\n##Estimation\n\nBy learning to estimate, and by developing this skill to the point where you have an intuitive feel for the magnitudes of things, you will be able to show an apparent magical ability to determine their feasibility. When someone says \"well\" send the backup over an ISDN line to the central site, \"you\'ll be able to know intuitively this is practical. When you\'re coding, you\'ll be able to know intuitively whether this is practical. When you\'re coding, you\'ll be able to know which subsystems need optimizing and which ones can be left alone.\n\nThe first part of any estimation exercise is building an understanding of what\'s being asked. As well as the accuracy issues discussed above, you need to have a grasp of the scope of the domain. Often this is implicit in the question, but you need to make it in a habit to think about the scope before starting to guess.\n\n###Build a model\n\nModel building can be both creative and useful in the long term. Often the process of building the model leads to discoveries of underlying patterns and processes that weren\'t apparent on the surface.\n\n\n###Keep track of your estimating prowess\n\nWe think it\'s a great idea to record your estimates so you can see how close you we\'re. If an overall estimate involved calculating sub estimates, keep track of these as well.\n\nWhen an estimate turns out wrong, don\'t just shrug and walk away.\n\n###What to say when asked for an estimate\n\nYou say \"I\'ll get back to you\"\n\nYou almost always get better results if you slow the process down and spend some time going through the steps we describe in this section.Estimates given at the coffee machine will (like the coffee) come back to haunt you.\n\n---\n\n##Keep Knowledge in Plain Text\n\nBenefits:\n- Insurance against obsolescence\n- Leverage (every tool in the computer universe can operate on plain text)\n- Easier testing\n\n###The problem of GUI\'s\n\nA benefit of GUIs is WYSIWYG - what you see is what you get. The disadvantage is WYSIAYG - what you see is *all* you get.\n\nActions one cannot do with a GUI.\n\n- Find all .c files modified more recently than your makefile\n- Construct a zip/tar archive of my source\n- Which Java files have not been changed last week?\n- Of those files, which the awt libraries?\n- A list of all unique package names explicitly imported by your Java code.\n\n---\n\n##One Editor\n\nChoose an editor, know it thoroughly, and use it for all editing tasks. If you use a single editor (or set of key bindings) across all text editing activities, you don\'t have to stop and think to accomplish text manipulation: the necessary key strokes will be a reflex. The editor will be an extension of your hand; the keys will sing as they slice their way through text and thought. That\'s our goal.\n\nA language to learn this year? Learn the language your editor uses.\n\n---\n\n##Source code control\n\nMake sure that everything is under source code control -  documentation, phone number lists, memos to vendors, makefiles, build and releases procedures, that little shell script that burns the CD master - everything.\n\n---\n\n\n##Debugging\n\nIn the technical arena, you want to concentrate on fixing the problem, not the blame.\n\nBefore you start debugging, it\'s important to adopt the right mindset. You need to turn off many of the defenses you use each day to protect your ego, tune out any project pressures you may be under, and get yourself comfortable. Above all, remember the first rule of debugging:\n\n- Don\'t Panic\n\nIf your first reaction on witnessing a bug or seeing a bug report is \"that\'s impossible\", you are plainly wrong. Don\'t waste a single neuron on the train of thought that begins \"but that can\'t happen\" because quite clearly it *can*, and has.\n\n - Artificial tests don\'t exercise enough of an application. You must brutally test both boundary conditions and realistic end-user usage patterns. You need this systematically.\n\n###Bug Reproduction\n\nWe want more than a bug that can be reproduced by following some long series of steps; we want a bug that can be reproduced with a single command. It\'s a lot harder to fix a bug if you have to go through 15 steps to get to the point where the bug shows up. Sometimes by forcing yourself to isolate the circumstances that display the bug, you\'ll even gain an insight on how to fix it.\n\nIf you have no obvious place to start looking, you can always rely on a good old-fashioned binary search.\n\nThe amount of surprise you feel when something goes wrong is directly proportional to the amount of trust and faith you have in the code being run. That\'s why, when faced with a \"surprising\" failure, you must realize that one or more of your assumptions is wrong. Don\'t gloss over a routine or piece of code involved in the bug because you \"know\" it works. Prove it. Prove it in the context, with this data, with these boundary conditions.\n\nIf the bug is the result of bad data that was propagated through a couple of levels before causing the explosion, see if better parameter checking in those routines would have isolated it earlier.\n\nIf it took a long time to fix this bug, ask yourself why. Is there anything you can do to make fixing this bug easier the next time around? Perhaps you could build in better testing hooks, or write a log file analyzer.\n\nFinally, if the bug is the result of someone\'s wrong assumption, discuss the problem with the whole team: if one person misunderstands, then it\'s possible many people do.\n\n---\n\n##Code generators\n\n###Passive Generators\n\nPassive code generators are run once to produce a result. From that point forward, the result becomes freestanding - it is divorced from do code generator.\n\nUses:\n\n- Creating new source files;\n- Performing one-off conversions among programming languages;\n- Producing lookup tables and other resources that are expensive;\n\n###Active Generators\n\nActive code generators are used each time their results are required. The result is a throw away - it can always be reproduced by the code generator. Often, active code generators read some form of script or control file to produce their results.\n\nWhile passive code generators are simply a convenience their active cousins are a necessity if you want to follow the DRY principle. With an active code generator, you can take a single representation of some piece of knowledge and convert it into all forms your application needs. This is not duplication, because the derived forms are disposable and are generated as needed by the code generators (hence the word active).\n\nWhenever you find yourself trying to get two disparate environments to work together, you should consider active code generators.\n\n---\n\n##Pragmatic paranoia\n\nPragmatic programmers don\'t trust themselves, either.\n\n---\n\n##Design by Contract\n\nBe strict in what you sill accept before you begin, and promise as little as possible in return. Remember, if your contract indicates that you\'ll accept anything and promise the world in return, then you\'ve got a lot of code to write.\n\nThe greatest benefit of using DBC may be that it forces the issue of requirements and guarantees to the forefront. Simply enumerating at design time what the input domain range is, what the boundary conditions are, and what the routine promises to deliver - or, more importantly, what it doesn\'t promise to deliver - is a huge leap forward in writing better software. By not stating this things, you are back to programming by coincidence, which is where many projects start, finish and fail.\n\nIt\'s much easier to find and diagnose the problem by crashing early, at the site of the problem.\n\n---\n\n##Law of Demeter for functions\n\nAny method of an object should call only methods belonging to: itself, any parameters received, any objects it creates and any directly held component objects.\n\n---\n\n##Meta programming\n\nWe want to go beyond using meta data for simple preferences. We want to configure and drive the application via meta data as much as possible. Our goal is to think declaratively (specifying what is to be done, not how) and create highly dynamic and adaptable programs. We do this by adopting a general rule: program for the general case, and put the specifics somewhere else - outside the compiled code base. Put abstractions in code detail in Meta data.\n\nBenefits:\n\nIt forces you to decouple your design, which results in a more flexible and adaptable program.\n\nIt forces you to create a more robust abstract design by deferring details - deferring them all the way out of the program.\n\n- You can customize the application without recompiling it.\n- You can also use this level of customization to provide easy work around for critical bugs in live production systems.\n- Meta data can be expressed in a manner that\'s much closer to the problem domain that in general-purpose programming language might be.\n- You may even be able to implement several different projects using the same application engine, but with different meta data.\n\n---\n\n##Programming by Coincidence\n\nDevelopers who don\'t actively think about their code are programming by coincidence - the code might work, but theres no particular reason why.\n\n\nWhy should you take the risk of messing with something that\'s working?\n\n- It may not really be working - it might just look like this\n- The boundary condition you rely on may be just an accident. In different circumstances it might behave differently.\n- Undocumented behaviour may change with the next release of the library\n- Additional and unnecessary calls make your code slower\n- Additional calls also increase the risk of introducing new bugs on their own.\n\n\nFor code you write that other will call, the basic principles of good modularization and of hiding implementation behind small, well-documented interfaces can all help. A well-specified contract can help eliminate misunderstandings.\n\n\n---\n\n##How to program deliberately\n\nWe want to spend less time churning out code, catch and fix errors as early in de development cycle as possible, and create fewer errors to begin with. It helps if we can program deliberately:\n\n- Always be aware of what you are doing. Fred let things get slowly out of hand, until he ended up boiled.\n- Don\'t code blindfolded. Attempting to build an application you don\'t fully understand, or to use a technology you aren\'t familiar with, is an invitation to be misled by coincidences.\n- Proceed from a plan, whether that plan is in your head, on the back of a coktail napkin, or on a will-sized printout from a CASE tool.\n- Rely on reliable things. Don\'t depend on accidents or assumptions. If you can\'t tell the difference in particular circumstances, assume the worst.\n- Document your assumptions. Design by contract, can help to clarify your assumptions in own mind, as well as help communicate them to others.\n- Don\'t just test your code, but test your assumptions as well. Don\'t guess; actually try it. Write an assertion to test your assumptions. If your assertion is right, you have improved the documentation in your code. If you discover your assumption is wrong, then count yourself lucky.\n\n- Prioritize your effort. Spend time on the important aspects; more than likely, these are the hard parts. If you don\'t have fundamentals or infrastructure correct, brilliant bells and whistles will be irrelevant.\n\n- Don\'t be a slave to history. Don\'t let existing code dictate future code. All code can be replaced if it\'s no longer appropriate. Event within one program, don\'t let what you\'ve already done constrain what you do next - be ready to refactor. This decision may impact the project schedule. The assumption is that the impact will be less than the cost of not making the change.\n\nPragmatic programmers think critically about all code, including our own. We constantly see room for improvement in our programs and our designs.\n\n---\n\n##Refactoring\n\n\nTime pressure is often used as an excuse for not refactoring. But this excuse just doesn\'t hold up; fail to refactor now, and there\'ll be a far greater time investment to fix the problem down the road - when there are more dependencies to reckon with. Will there be more time available then? Not in our experience.\n\nKeep track of the things that need to be refactored. If you can\'t refactor something immediately, make sure that it gets placed in the schedule. Make sure that the users of the affected code know that it\'s scheduled to be refactored and how this might affect them.\n\n---\n\n\n##Testing against Contract\n\nWe like to think of unit testing as testing against contract. We want to write test classes that ensure that a given unit honors it\'s contract. This will tell us two things: whether the code meet the contract, and whether the contract means what we think it means. We want to test that the module delivers the functionality it promises over a wide range of test cases and boundary conditions.\n\nOnce the subcomponents have been verified, then the module itself can be tested. This technique is a great way to reduce debugging effort: we can quickly concentrate on the likely source of the problem and not waste time reexamining it\'s subcomponents.\n\nWhy do we go to all this trouble? Above all, we want to avoid creating a \"time bomb\"- something that sits around unnoticed and blows up at an awkward moment later in the project. By emphasizing testing against contract, we can try to avoid as many of those downstream disasters as possible.\n\n---\n\n\n##Adhock testing\nDuring debugging, we may end up creating some particular tests on-the-fly. These may be as simple as print statement, or a piece of code entered interactively in a debugging or IDE environment.\n\nAt the end of the debugging session you need to formalize the adhock test. If the code broke once, it\'s likely to break again. Don\'t just throw away the test you created; add it to the existing unit test.\n\n---\n\n##Pragmatic teams\n\n###No broken windows\n\nQuality is a team issue. Teams as a hole should not tolerate broken windows - those small imperfections that no one fixes. The team must take responsibility for the quality of the product, supporting developers who understand the *no broken windows* philosophy, and encouraging those who haven\'t yet discovered it.\n\nKeep metrics on new requirements (p. 209). The team needn\'t reject changes out of hand - you simply need to be aware that they are happening. Otherwise, it will be you in the hot water.\n\nThe closer to the user you\'re allowed, the more senior you are.\n\nCivilization advances by extending the number of important operations we can perform without thinking. - Alfred North Whitehead\n\n---\n\n##Metrics to examine code\n\n- Ciclomatic complexity\n- Inheritance fan-in (number of base classes) and fan-out (number of derived modules using this one as parent)\n- Response set (Decoupling and law of Demeter);\n- Class coupling ratios\n\nIf you find a module whose metrics are marked different from all the rest, you need to ask yourself if it\'s appropriate. For some modules, it may be ok to \"blow the curve\". But those who don\'t have a good excuse, it can indicate problems.\n\nIf a bug slips through the net of existing tests, you need to add a new test to trap it next time.\n\n---\n\n##It\'s all writing\n\nTypically, developers don\'t give much thought documentation. At best it is an unfortunate necessity; at worst it is threatened as a low-priority task in the hope that management will forget about it at the end of the project.\n\nPragmatic programmers embrace documentation as an integral part of the overall development process. Writing documentation can be made easier by not duplicating effort or wasting time, and by keeping documentation close at hand - in the code itself if possible.\n\nTreat English as just another programming language.\n\n###Comments\n\nIn general, comments should discuss why something is done, it\'s purpose and it\'s goal. The code already shows how it\'s done, so commenting on this is redundant - and a violation of the DRY principle.\n\n\nCommenting source code gives you the perfect opportunity to document those elusive bits of a project that can\'t be commented anywhere else: engineering trade offs, why decisions where made, what other alternatives where discarded and so on.\n\nOne of the most important pieces of information that should appear in the source file is the author\'s name - not necessarily who edited it last, but the honor. Attaching responsibility and accountability to the source code does wonders in keeping people honest.\n\n###Executable documents\n\nSuppose we have a specification that lists the columns in a database table. Well then have a separate set of SQL commands to create the actual table in the database, and probably some kind of programming language record structure to hold the contents of a row in the table. The same information is repeated tree times. Change any one of these tree sources, and the other two are immediately out of date. This is a clear violation of the DRY principle.\n\nTo correct this problem, we need to choose the authoritative source of information. This may be the specification, it may be a database schema tool, or it may be some third source altogether. Let\'s choose the specification document as the source. It\'s now our model for this process. We then need to export the information it contains as different views - a database schema and a high-level language record, for example.\n\nDocumentation and code are different views of the same underlying model, but the view is all that should be different. Don\'t let documentation be a second class citizen, banished from the main project workflow. Treat documentation with the same care you treat code, and the users (and maintainers who follow) will sing your praises.\n\n---\n\n##Relatively easy things to delight the common user\n\n- Balloon or tool tip help;\n- Keyboard shortcuts\n- A quick reference guide as a supplement to the users manual;\n- Colorization\n- Log files analyzers\n- Automated installation\n- Tools for checking the integrity of the systems\n- The ability to run multiple versions of the systems for training\n- A splash screen customized for their organization\n\nAll of these things are relatively superficial, and don\'t really overburden the system with feature bloat. However, each tells the users that the development team cared about producing a great system, one that was intended for real use. Just remember not to break the system adding these new features.\n\nWe want to see pride and ownership. \"I wrote this, and I stand behind by work.\" Your signature should come to be recognized as an indicator of quality. People should see your name on a piece of code and expect it to be solid, well written, tested, and documented. A really professional job. Written by a professional. A pragmatic programmer.\n\n---\n\n\n##Professional Societies\n\nThere are two world-class professional societies for programmers: the Association for Computing Machinery (ACM) and the IEEE Computer Society. We recommend that all programmers belong to one (or both) of these societies. In addition, developers outside the United States may want to join their national societies, such as BCS in the United Kingdom.\n\nMembership in a professional society has many benefits. The conferences and local meetings give you great opportunities to meet people with similar interests, and the special interest groups and technical committees give you the opportunity to participate in setting standards and guidelines used around the world. You will also get a lot out of their publications, from high-level discussions of industry practise to low-level computing theory.\n\n---\n\n##Building a Library\n\nWe\'re big on reading. A good programmer is always learning. Keeping current with book and periodicals can help.\n\n###Periodicals\n\n- IEEE Computer\n- IEEE Software\n- Communications of the ACM\n- SIGPLAN\n- Dr Dobbs Journal\n- The Perl Journal\n- Software Development Magazine\n\n###Books\n\n- Object Oriented Software Construction\n- Design Patterns\n- Analysis Patterns\n- The Mytical Man Month\n- Dynamics of Software Development\n- Surviving Object-Oriented Projects: A Managers Guide\n- Unix\n- C  \n- Slashdot\n- Cetus Links\n\n\nThat\'s it thanks for the attention.',1,'2015-08-09 16:00:00'),(12,'Como o Zend Framework é testado','<p>Neste post pretendo esbo&ccedil;ar o processo de testes que ocorre para o desenvolvimento do Zend Framework, aplic&aacute;vel tamb&eacute;m, ao contruir-se aplica&ccedil;&otilde;es no mesmo.</p>\n<p>&nbsp;</p>',0,'0000-00-00 00:00:00'),(4,'Do Software Livre e da Liberdade dos Usuários','<p>Existem muitos enganos quando falamos sobre software livre, ent&atilde;o, antes de mais nada, vou apresentar uma defini&ccedil;&atilde;o que melhor se encaixa com as opini&otilde;es da comunidade relacionada. Software livre muitas vezes &eacute; confundido com software de gra&ccedil;a, ledo engano; d&aacute;-se devido ao duplo significado da palavra livre em nosso idioma. N&atilde;o obstante, software livre n&atilde;o fala nada &agrave; respeito de pre&ccedil;o, outrossim, sobre a liberdade do usu&aacute;rio, mais precisamente as quatro que seguem (STALLMAN 2010).</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Liberdade 0:</strong> A liberdade de rodar o programa.</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Liberdade 1: </strong>A liberdade de estudar como o programa funciona e adapt&aacute;-lo &agrave;s suas necessidades.</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Liberdade 2:</strong> A liberdade de redistribuir c&oacute;pias a fim de ajudar outras pessoas.</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Liberadde 3: </strong>A liberdade de melhorar o programa e disponibiliz&aacute;-lo para a comunidade para que mais pessoas possam se beneficiar das modifica&ccedil;&otilde;es.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Por que software n&atilde;o deve ter donos?</strong>&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; O custo da constru&ccedil;&atilde;o de software reside somente <span lang=\"pt-PT\">na</span> cria&ccedil;&atilde;o do primeiro programa, ap&oacute;s isso, a fim de copiar o software, apenas uma quantia desprez&iacute;vel de energia el&eacute;trica &eacute; utilizada. Logo, quando n&atilde;o h&aacute; custo para a replica&ccedil;&atilde;o de algo justifica-se que os usu&aacute;rios possam se beneficiar desta facilidade, tanto copiando para si, quanto para a comunidade em que se est&aacute; inserido. Contudo, grande parcela dos criadores de software, em m&atilde;os poder conferido-lhes atrav&eacute;s dos \"direitos autorais\", tomam-lhes estas liberdades; restringindo-os a somente realizar c&oacute;pias autorizadas por si, imbu&iacute;das de altos lucros. Este procedimento fere a liberdade da sociedade revelando-nos uma realidade n&atilde;o muito satisfat&oacute;ria: a vontade dos criadores &eacute; mais importante que a do p&uacute;blico em geral.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; A constitui&ccedil;&atilde;o dos EUA, em sua concep&ccedil;&atilde;o inicial, trata de direitos autorais ou copyright como uma forma de estimular os criadores a produzirem mais, a fim de aumentar a disponibilidade de trabalhos intelectuais para a comunidade (STALLMAN 2010, p&aacute;g 79). Fica claramente exposto que o objetivo das leis de direitos autorais tem como prop&oacute;sito final a beneficia&ccedil;&atilde;o dos usu&aacute;rios, n&atilde;o das casas de software ou criadores em geral. N&atilde;o &eacute; um direito natural dos produtores e sim uma concess&atilde;o em detrimento das pessoas. Nesse sentido, revela-se a contradi&ccedil;&atilde;o dos objetivos mais b&aacute;sicos das leis de direitos autorais para com o panorama geral observado no mercado de software moderno.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Do direito de melhorar o software</strong></p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Grandes corpora&ccedil;&otilde;es como a Microsoft dominam a oferta de software, principalmente os mais gen&eacute;ricos como: editores de texto e sistemas operacionais. Isso implica em malef&iacute;cios econ&ocirc;micos e &eacute;ticos como a inabilidade de competir ou at&eacute; a possibilidade da realiza&ccedil;&atilde;o de atividades indesejadas no computador do usu&aacute;rio, sejam: obten&ccedil;&atilde;o de dados inautorizados sobre suas atividades ou at&eacute; mesmo a restri&ccedil;&atilde;o de algumas de suas atividades, como o direito de emprestar software ou utilizar uma vers&atilde;o concorrente. Esse tipo de atitude d&aacute;-se porque, diferentemente de software livre, os softwares destas corpora&ccedil;&otilde;es s&atilde;o uma caixa preta onde ningu&eacute;m, a n&atilde;o ser seus criadores, sabem o que est&aacute; acontecendo j&aacute; que o c&oacute;digo fonte n&atilde;o &eacute; disponibilizado.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Para que se compreenda melhor as diferen&ccedil;as entre o c&oacute;digo fonte e o software disponibilizado pelas empresas de software n&atilde;o livre segue uma breve explica&ccedil;&atilde;o.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Um software, de modo geral, &eacute; primeiramente escrito em uma linguagem de programa&ccedil;&atilde;o de alto n&iacute;vel, ou seja, uma linguagem de relativa f&aacute;cil interpreta&ccedil;&atilde;o por seres humanos; esta parte do software &eacute; chamada de c&oacute;digo fonte. Contudo, para rodar estes softwares nos computadores, faz-se necess&aacute;rio transform&aacute;-los em algo que o computador entenda - esta &eacute; a chamada linguagem de m&aacute;quina composta, basicamente, por zeros e uns. O software, nesta forma, dificilmente ser&aacute; modificado por outra pessoa pois o c&oacute;digo de m&aacute;quina &eacute; de dific&iacute;lima dificuldade de comprenss&atilde;o aos seres humanos. &Eacute; na forma de c&oacute;digo de m&aacute;quina que as empresas de software n&atilde;o livre disponibilizam seus produtos, objetivando assim que ningu&eacute;m a n&atilde;o ser elas mesmas possam compreender e melhorar seu funcionamento. J&aacute; o software livre, quando tratando do direito de compartilhar, (direito 1 e 3) se refere ao c&oacute;digo fonte, abre-se assim, a possibilidade da cria&ccedil;&atilde;o de comunidades de desenvolvimento e aprendizagem ao redor de softwares livres respeitando sempre &agrave;s individualidades de seus usu&aacute;rios e de modo algum tirando-lhes suas liberdades.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Do direito de compartilhar</strong></p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Software pode ser razoavelmente comparado com uma receita, ambos s&atilde;o um conjunto de instru&ccedil;&otilde;es que, quando seguidas por um computador ou uma pessoa respectivamente, geram um resultado espec&iacute;fico. Imagine que voc&ecirc; preparou uma receita e convida seus amigos para um jantar, ao final do jantar um de seus amigos lhe pede a receitar. Recusar compartilhar software &eacute;, nesse sentido, o mesmo que recusar compartilhar a receita. Amigos desejam compartilhar, ambos est&atilde;o cientes que n&atilde;o lhes causar&aacute; mal algum faz&ecirc;-lo e com pouco esfor&ccedil;o &eacute; poss&iacute;vel copi&aacute;-la, at&eacute; mesmo a pessoa que recebe a receita pode vir &agrave; modific&aacute;-la e preparar uma ainda mais gostosa, disponibilizando sua vers&atilde;o de volta para seu amigo, refor&ccedil;ando ainda mais o senso de comunidade e compartilhamento. Agora imagine um mundo em que fosse-lhe negado o direito de emprestar receitas para seus amigos, que compartilhar receitas fosse considerado um crime comparado com o ato de assaltar e saquear navios. Isso em detrimento de gigantes corpora&ccedil;&otilde;es fabricadoras de receitas, que n&atilde;o poderiam ser copiadas, outrossim, somente adquiridas por pre&ccedil;os injustos em locais autorizados. &Eacute; claro que este n&atilde;o &eacute; o mundo em que queremos viver.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>A origem do software livre</strong></p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; O termo software livre foi cunhado por Richard Stallman, na &eacute;poca trabalhava no MIT <em>Instituto Tecnol&oacute;gico de Massachusetts</em>, na &aacute;rea de intelig&ecirc;ncia artificial. Este, por ingressar na computa&ccedil;&atilde;o em seus prim&oacute;rdios, vivenciou uma &eacute;poca que o software era algo comunit&aacute;rio; n&atilde;o haviam alega&ccedil;&otilde;es de direitos autorais, as pessoas compartilhavam os fontes, o mundo da ci&ecirc;ncia da computa&ccedil;&atilde;o era gentil e nobre. Com a crescente pr&aacute;tica de cria&ccedil;&atilde;o de software privado cujas corpora&ccedil;&otilde;es pioneiras destacam-se: IBM e Microsoft e Apple, Stallman via-se cada vez mais frustrado, obrigado &agrave; utilizar software os quais via falhas que tinha capacidade mas n&atilde;o a autoriza&ccedil;&atilde;o para consertar. A soma destas frusta&ccedil;&otilde;es culminou na cria&ccedil;&atilde;o da do projeto GNU.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; GNU &eacute; primeiramente uma ideia, desvinculado de qualquer institui&ccedil;&atilde;o privada tem por objetivo principal a cria&ccedil;&atilde;o de software livre de prop&oacute;sito gen&eacute;rico. Inicialmente objetivava-se cria&ccedil;&atilde;o de um sistema operacional, pe&ccedil;a de software chave para a utiliza&ccedil;&atilde;o de qualquer computador. Stallman, juntamente uma comunidade crescente de hackers foram aos poucos juntando os componentes e por fim criaram o que hoje &eacute; chamado sistema operacional GNU\\Linux, vulgarmente conhecido como Linux. Atualmente, conta com um variado ecossistema de programas e uma vibrante comunidade, capazes de suprir todas as necessidades de softwares pagos com uma alternativa livre em disponibiliza&ccedil;&atilde;o e suporte. Criou-se tamb&eacute;m a licen&ccedil;a GNU GPL (GNU Public License) que possibilita a utiliza&ccedil;&atilde;o dos poderes dos \"direitos autorais\" de uma forma invertida, esta cont&eacute;m um mecanismo que faz com que, quando um software a utilize, todos os trabalhos derivados dele devam, necessariamente, vir com os mesmos direitos inclusos (direitos 0 &agrave; 3). Isso faz com que todo o software livre seja imune aos maquiavelismos das corpora&ccedil;&otilde;es pois co&iacute;be que as mesmas copiem um software livre e comecem a disponbiliz&aacute;-lo de uma forma n&atilde;o livre.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Software livre &eacute; como comunismo</strong></p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Algumas pessoas com conceitos muito superficiais sobre software livre &agrave;s vezes cometem a fal&aacute;cia de alegar que este se parece com o comunismo na Uni&atilde;o Sovi&eacute;tica. Ideologias &agrave; parte, contudo, se olharmos analiticamente ao cerne do argumento, notamos que &eacute; o inverso que efetivamente se aplica. Na Uni&atilde;o Sovi&eacute;tica cada m&aacute;quina de c&oacute;pia tinha um guarda para prevenir c&oacute;pias ilegais sendo necess&aacute;rio que os indiv&iacute;duos praticassem c&oacute;pias ilegais, m&atilde;o &agrave; m&atilde;o, pr&aacute;tica conhecida como Samizdat. Sendo assim, software privado se enquadra muito mais com as ideiologias da Uni&atilde;o sovi&eacute;tica do que o software livre.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Como &eacute; poss&iacute;vel criar programas competitivos atrav&eacute;s de software livre</strong></p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Primeiramente deve-se entender que o objetivo do software livre n&atilde;o &eacute; a degrada&ccedil;&atilde;o da profiss&atilde;o de programador. Isso provavelmente n&atilde;o ir&aacute; acontecer com software livre pois o movimento livre n&atilde;o objetiva que todo o software seja livre, outrossim, busca-se somente que softwares de car&aacute;ter gen&eacute;rico o sejam. S&atilde;o estes que criam interesse de uma parcela significativa da sociedade e melhor podem se beneficiar com a cria&ccedil;&atilde;o de uma comunidade. Corroborando com este argumento, RAYMOND 2011 aponta que 95% de todo o esfor&ccedil;o dedicado na constru&ccedil;&atilde;o de software &eacute; para a elabora&ccedil;&atilde;o de software customizado para empresas. Fica claro que grandes modifica&ccedil;&otilde;es na infraestutura de desenvolvimento de software n&atilde;o s&atilde;o necess&aacute;rios para efetuar-se uma profunda transforma&ccedil;&atilde;o &eacute;tica na &aacute;rea.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Mesmo que nem todos os softwares precisem ser livres para termos uma sociedade livre, n&atilde;o pode-se tomar por premissa que a constru&ccedil;&atilde;o de software livre seja algo n&atilde;o vi&aacute;vel economicamente. Benef&iacute;cios pr&aacute;ticos podem ser extra&iacute;dos &agrave; partir de uma economia orientada ao software livre. RAYMOND 2011 aponta que optar por tornar um software livre pode ser uma jogada empresarial de sucesso em meio a um mercado concorrido. Novos nichos tamb&eacute;m emergem &agrave; partir de uma economia de software livre, a CYAGNUS foi a primeira empresa a investir em venda de suporte para software livre e obteve grande sucesso em seu nicho. Atualmente grandes corpora&ccedil;&otilde;es existem baseadas neste tipo de trabalho como: RedHat, OpenSuse, Canonical entre outras, que contratam programadores por sal&aacute;rios invej&aacute;veis se comparado com os sal&aacute;rios de profissionais de software em geral e contam com o benef&iacute;cio de proporcionar sentimento de recompensa por estar fazendo o bem, trabalhando em favor da humanidade em geral, atrav&eacute;s da cria&ccedil;&atilde;o de software livre.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Outros benef&iacute;cios pr&aacute;ticos, n&atilde;o muito &oacute;bvios, s&atilde;o que em m&eacute;dia o software livre &eacute; mais confi&aacute;vel, escrito com melhor qualidade, melhor documentado e com melhor suporte do que software n&atilde;o livre. STALLMAN 2010 aponta que em pesquisas realizadas sua suite de edi&ccedil;&atilde;o de textos, o EMacs, em todos os aspectos no par&aacute;grafo mencionados se comporta melhor que seu principal rival de c&oacute;digo fechado o Microsoft Word.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;&nbsp;&nbsp; Desde muito tempo a comunidade de software livre est&aacute; ativa, contudo, no Brasil, como em muitos outros pa&iacute;ses, a desinforma&ccedil;&atilde;o a respeito deste gr&atilde; importante assunto &eacute; o que impera. Na grande maioria dos casos um indiv&iacute;duo manda formatar seu computador com algum conhecido, mesmo em muitas lojas especializadas, e n&atilde;o sabe que o que traz para casa &eacute; software n&atilde;o livre, sem licen&ccedil;a ou vulgarmente conhecidos como software pirata, que objetiva tomar-lhe as liberdades em detrimento de conceder um pouco mais de poder para as multinacionais que os constru&iacute;ram. Sim, desinforma&ccedil;&atilde;o &eacute; um problema, contudo n&atilde;o o &uacute;nico. A grande maioria do p&uacute;blico n&atilde;o leigo, com ci&ecirc;ncia do software livre, n&atilde;o utiliza as ferramentas as quais necessita de car&aacute;ter livre, seja por estar acostumado &agrave; utilizar o concorrente pago, seja pela falta componente n&atilde;o essencial o qual deseja, resumindo: fatores pr&aacute;ticos. Contudo, assim como este trabalho n&atilde;o tem o objetivo de demonstrar os benef&iacute;cios pr&aacute;ticos da utiliza&ccedil;&atilde;o de software livre, superficialmente abordados, n&atilde;o podemos colocar nossos valores pr&aacute;ticos sobre a &eacute;tica. Dessa forma, haveremos de buscar meios de conscientizar os usu&aacute;rios de computador &agrave; respeito de suas escolhas e implica&ccedil;&otilde;es relativas &agrave; utiliza&ccedil;&atilde;o de determinado software. Espero que este material, de alguma forma, contribua nesta busca.</p>\n<p style=\"margin-bottom: 0cm;\">&nbsp;</p>\n<p style=\"margin-bottom: 0cm;\"><strong>Refer&ecirc;ncias</strong></p>\n<p style=\"margin-bottom: 0cm;\">STALLMAN, Richard M.. Free Software Free Society. Boston MA. ISBN 978-1441436856. SoHo Books 2010.</p>\n<p style=\"margin-bottom: 0cm;\">RAYMOND, Eric S.. The Cathedral &amp; The Bazar - Musings on Linux and Open Source by an accidental revolutionary. San Bernardino CA. ISBN 978-0-596-00108-7. O\' Reilly 2011.</p>\n<p>&nbsp;</p>',1,'2014-03-11 00:00:00'),(34,'Traits of my posture on software','This is an attempt to improve my actions over the opinions (that I\'m about to elaborate here) in the unceasing pursue of becoming a more coherent person.\n\n##The web movement\nI fully embrace the open web movement. [Here](http://www.creativebloq.com/web-design/why-designers-should-say-no-native-apps-51514978) are some reasons you should too, independently if you are a computer scientist or not. By doing so I completely refuse the native approach. So Android and IOS apps are totally incoherent with my visions - either for software creation or consuming.\n\n##Creation vs Consuming\n\nI realize, from my software experience, a pattern emergence about creation and consuming of software. Practically all software I use to create content are hosted in my computer; in the other hand, basically all software I use to consume content is hosted in the web. This was exactly the vision of the ARPA\'s pioneers: the Internet as a medium for researchers to share their knowledge and consume the others.\n\nHaving established this axiom, all consuming software hosted locally simply does not make sense; away with feed and mail readers, etc. The same applies to creation software online, like: Google docs, markdown editors, OpenShift etc.\n\nObviously there are exceptions, anyway this is a good trait to visualize if a software usage is going to endure or not.\n\n##Fundamental software vs Software Helpers\n\nAnother distinguishable trait is that all fundamental software must be at least Open-Source. By fundamental software I mean all those that without I would not be able to create or consume content that is important for me, or it would possible but in a poorly way in a point of not worthing the cost. Some examples are: operational systems, text editors and web browsers.\n\nThis kind of software certainly will never be crafted with mastery by a single person or organization; they must be managed as a community endeavor. This kind of software are like cathedrals - not in the exact same sense as Raymond\'s - they are so because they are built in large periods of time, by different people, that probably will never meet each other, each one responsible by little improvements in the hole wonder. Vim, Firefox, the Linux Kernel fits perfectly on this case.\n\nOn the other hand are there the software helpers, they include the vast majority of software; can be online tools or local ones. This kind can be crafted as a one man concern or driven by a software vendors, or even a community one. This kind vary vastly over time and is improbable that one will ever became an specialist on them.\n\n<!-- While we are locked in the flatland world nothing will be able to fully replace Vim. -->\n\n##Mechanics over Politics\n\nThe last trait worth mentioning is mechanics over politics - also known (or at least a subset of) [The Unix Way](http://c2.com/cgi/wiki?UnixWay). This axiom basically states that politics of software tend to change over time, but mechanics usually remain the same. That said, is preferable to choose tools that maximize mechanics. And actually the better ones that achieve that are the ones that compromise by doing only one thing, and doing it well. Examples are: ack and grep for searching, sed for replacing, vim for text editing, etc.\n\nSo if you have a tool single tool for programming you are DEAD wrong (according to the Unix Way). Beyond the problem of this kind of solution has the tendency of changing over time, because they are not specialized, they will never be able to do certain things that the specialized ones does. For example, once you master ack you will never more have to bother about searching on text (programming or not), you will be a master of it; on the other hand, once you learn how to search on PHPStorm you will only be able to do simple searches on software projects files.\n\nThe Unix approach is a wisdom that we should embrace in each aspect of our computer lives. It really puts one beyond the crowd, as said somewhere by someone that I don\'t quite remember: \"button pushers are easy to find, craft your own tools!\". And the way of doing that is by knowing mechanics.\n\nThis is it. It seems that my software choices are quite aligned with my opinions. Currently I\'m using Linux, Firefox, Vim, Ack and lots of shell scripting to do my job (this is obviously a simplification), its being a quite awesome experience. I really recommend you to take the time to align your software usage with these patterns if you thought they are somehow valuable.',1,'2015-06-10 21:00:00'),(5,'Controle de hardware via porta paralela','Recuperei este post de um antigo blog meu e, a fim de não perdê-lo,\npubliquei-o aqui.\n\n \nO script desenvolvido utiliza das funções de bit a bit do C para\ndeslocar o 1 de um byte composto inicialmente por 10000000 para o lado.\n\nNo segundo momento seria: 01000000, depois: 00100000 e assim\nsucessivamente.\n\nNa saída pode-se colocar um conjunto de LED\'s, de modo que estes, de uma\nforma linear, pisquem.\n\n \n\n\n#O código:\n\n```\n #include  \n #include sys/io.h;\n\n unsigned int Saida;\n\n nt openPort(void);\n void controlerPort(void);\n void closePort(void);\n\n\n void main (void)\n {\n     openPort();\n     controlerPort();      \n     closePort();\n }\n\n int openPort(void)\n {\n\n     // 0x378 é o endereço padrão da primeira porta paralela para pc\'s\n\n     // io perm pede permissão para o sistema operacional para obter o\n\n     // controle sobre a porta\n     if(!ioperm(0X378,3,1)) return 0;\n }\n\n\n void closePort(void)\n {\n\n    //zera a saída antes de fechar\n     outb(0, 0x378);\n     ioperm(0x378,3,0); //passa-se 0 no ultimo parametro para se fechar\na porta\n }\n\n void controlerPort(void)\n {\n     int i,a;\n     for(a = 0; a <= 10 ; a  )\n     {\n         Saida = 1;\n\n         for(i = 0; i <= 7; i  )\n         {\n             outb(Saida, 0x378); // imprime saída na porta\n             printf(\"%d\\n\", Saida);\n             Saida = Saida >> 1; // desloca o bit para a direita\n             sleep(1); //para por 1 segundo\n         }\n     }\n }\n\n```\n\nPara funcionar talvez seja necessário habilitar o funcionamento da porta\natravés da BIOS do seu\n computador.',1,'2014-03-23 00:00:00'),(132,'My notes for the QA Hangout','I participated on a hangout about QA with PHP, you can check it\nout [here](https://www.YouTube.com/watch?v=lSP70aT5f2Y). I think\nIt was a good one, we had even the right of a\n[review](http://www.jack.eti.br/hangout-qa-em-php-ferramentas-tecnicas-e-processos/). \n\nThe following content is a collections of notes I build to orient\nmy talk on the event.\n\n##Braimstorm\n\n- Test ONLY business logic;\n\n- Write a new test VS add an assertion in the existing one\n    Always reduce to a valuable busiess requirement\n\n- Test the smaller scope possible on your small tests\n    If you prove the part you are proving the hole as\n    well;\n\n- Start small\n    On new features I usually put the test class and the class on\n    the same file till I\'m encouraged enough by it\'s features to\n    split;\n\n- Avoid databases if you can\n    It\'s slow and Doctrine somethimes trows exceptions so we have to rebuild the\n    entire setup;\n\n- Coverage\n    Use data structures that make special cases go away - Which is the ideal size to get started with the logic?\n\n- Write only tests that fail\n\n- Tests size\n    Google don\'t divide the tests in unity, integration,etc. They\n    use the small, medium and big.\n    I use an annotation size to define it\n\n-  At google testing is called engineering of productivity\n\n- Medium tests can be used to test a hole feature\n    Convert you browser request into a test when something fails. In\n    php there is the var_export funciton that generates an array.\n\n- Make easy the reuse of features on tests\n    On Compufácil we use a collection of traits on tests so we can\n    avoid the trouble of instanciating may things. The traits\n    accept mixed arguments and try to do the best to create the\n    entity with only what the developer is wanting to pass to the\n    test.\n\n- The refactor is a troublesome step\n    If you see you can abstract, maybe your test will be totally\n    desintegrated.\n    So is nice to dismember the feature you want to test from the\n    begining so you avoid some trouble with abstractions.\n\n- Abuse of the concept of factories. If you use a library to\n  manage dependencies better, so on the factory you can load\n  environments variables and configurations to make your object\n  proper to run tests and go in production.\n\n- Don\'t test what the language can do for you:\nphp 7 brings scalar types and return types that can assert speed up testing  \n\n###PHP7\n\nScalar types and return types for testing\nExpectations - to assert setup code\nAnonymous classes;\n\n##Steps TDD\n    - Write a test\n    - Make it pass with the fewer trouble possible\n    - Refactor\n    - Start again\n\n###Benefits\n    Confident refactoring\n\n###Tools\n    php-beautifier and phpcs to check for style problems \n    pdepend - to generate statistics\n    pyresttest - to test API\'s\n    vfsStream - to test files\n    mockery - to create mocks\n    phpcop - to change dates\n\n##Books\n\nTest-Driven Development By Example - Kent Beck\nHow google tests software  - James Whittaker',1,'2015-10-16 19:24:32'),(6,'NGINX com FastCGI lado a lado com o APACHE','Recentemente urgiu a necessidade de ter a última versão do PHP no\nservidor da empresa onde trabalho. Contudo, o sistema utiliza o Plesk,\ncom as diversas customizações que este serviço faz ao apache e suas\nrespectivas instalações do PHP fica difícil fazer qualquer customização,\noutrossim, a probabilidade que quebrar o servidor é alta. Sendo assim,\npesquisei a possibilidade de instalar outro servidor web, preservando as\nseguintes condições/requisitos: não alterar as configurações do apache e\nsuportar várias versões do PHP em paralelo. Resumindo, conheci o NGINX, \ne com as customizações que aqui apresentarei, foi possível alcançar os\nrequisitos além disso, experienciar um servidor web muito mais agradável\nde se administrar.\n\nO NGINX pareceu-me muito mais organizado em relação ao Apache,\nprincipalmente quando relativo aos arquivos de configuração: mais limpos\ne melhor organizados, utilizando um padrão quase json. A inexistência de\n**.htaccess** também me deixou contente pois estes sempre são de difícil\ncompreensão bem como necessitam estar juntamente à aplicação; a\nestratégia do NGINX é manter todas estas configurações na própria\nvirtualhost. O NGINX é também conhecido por sua escalabilidade e maior\nperformance em aplicações tipo *plain text*.\n\n![](/galeria/ddbf7b22b98e27c9b529fac735a77f2e.jpg)\n\n \n\n**Observações**:\n\nTestei este processo em duas máquinas, uma com CentoOS 5.8 e outra com\nCentos 6.5, as diferenças para ambos estão descritas ao longo do texto.\nPara utilizar em outras distribuições, pode-se variar o processo de\ninstalação do NGINX e o local de residência dos arquivos de\nconfiguração.\n\nUtilizei a seguintes convenção de nomenclatura: todo o código fonte e\nestrangeirismos estão em *itálico*.\n\n \n\n **PASSO 1 - COMPILANDO O PHP\n**\n\nPrimeiramente devemos fazer o download de  uma versão do PHP no site\n[php.net](/posts/editar/php.net/downloads.php).\n\nBaixei a mais nova versão estável no tempo de publicação deste post  à\ndizer: 5.5.12.\n\n``mkdir -p ~/builds/php ',1,'2014-05-01 00:00:00'),(126,'Links','',0,'0000-00-00 00:00:00'),(127,'Notas: Pai Rico Pai Pobre','Algumas notas do livro Pai rico Pai Pobre.\n\nOs ricos compram artigos de luxo por último, enquanto pobres e\nclasse média tendem a fazê-lo antes.\n\nSe você trabalha pelo dinheiro, está cedendo o poder ao seu\nempregador. Se seu dinheiro trabalha para você, você mantém e\ncontrola o poder.\n\nVocê precisa conhecer as leis, a forma como funciona o sistema.\nSe for ignorante, é fácil ser intimidado. Se você sabe do que está\nfalando, tem uma chance de vencer.\n\nSeja esperto e você não será oprimido.\n\nSe você possui qualquer tipo de ativo legítimo, eu sugeriria que\nvocê pensasse, o mais rápido possível, sem saber mais a respeito\ndos benefícios e da proteção oferecidos por uma sociedade anônima.\n\nNo mundo real, não são os talentosos que vão em frente, mas os\nousados.\n\nA inteligência financeira é simplesmente ter mais opções.\n\nDesenvolvo meu QI financeiro porque quero participar do maior jogo\ndo mundo. E de minha maneira pequena, gostaria de ser parte dessa\nevolução sem precedentes na humanidade, a era em que os seres\nhumanos não trabalham com seus corpos, mas apenas com suas mentes.\n\nAlgumas vezes você ganha e outras aprende. Mas divirta-se. A\nmaioria das pessoas nunca ganha porque tem medo de perder. Os\nvencedores não têm medo de perder. Os fracassos são parte do\nprocesso do sucesso. As pessoas que evitam os fracassos também\nevitam os sucessos.\n\nConta mais o que você sabe do que o que você compra. Investir não\né comprar. É conhecer.\n\n\"Os empregados trabalham apenas o suficiente para não serem\ndemitidos e os empregadores pagam apenas o suficiente para que os\ntrabalhadores não vão embora.\"\n\nSe você tem algum desejo de ser rico, você deve se focar. Pôr uma\nporção de ovos em umas poucas cestas. Não fazer o que fazem os\npobres e a classe média: põem poucos ovos em muitas cestas.\n\nQual é a cura para a preguiça? A resposta está em um pouco de\nambição.\n\nO que há aí para mim? A pessoa precisa sentar e pensar. \"O que há\naí para mim se sou saudável, sexy e tenho boa aparência?\". \"Como\nseria minha vida se eu nunca tivesse que voltar a trabalhar?\" \"O\nque seria de mim se eu tivesse todo o dinheiro de que preciso?\"\n\"Sem esse pouco de ambição não há o desejo de ter algo melhor.\nEntão sempre que você se flagrar evitado algo que sabe que deveria\nfazer, a única coisa a fazer é perguntar-se. \"O que há aí para\nmim? Seja um pouco ambicioso. É a melhor cura para a preguiça.\n\nMinha coluna de ativos é muito mais importante para mim do que o\ngoverno. Pago primeiramente a mim mesmo.\n\nDepois de pagar a mim mesmo, a pressão para pagar meus impostos e\nos demais credores é tão grande que me obriga a buscar outras\nformas de renda. A pressão para pagar se torna uma motivação. Já\ntive empregos extras, comecei outros empreendimentos, negociei na\nbolsa, qualquer coisa para ter certeza que esses caras não\nficassem gritando comigo. Essa pressão me fez trabalhar mais, me\nobrigou a pensar, e tudo isso me tornou mais esperto e mais ativo\nno que se refere ao dinheiro. Se eu deixasse para me pagar no\nfinal, não teriam sentido as pressões e eu estaria quebrado.\n\nNossa cultura nos educa para acreditar que o amor ao dinheiro é a\nraiz de todos os males. Ela nos incentiva a aprender uma profissão\npara que possamos trabalhar pelo dinheiro, mas não nos ensina a\nfazer o dinheiro trabalhar para nós. Ela nos ensina a não nos\npreocupar com nosso futuro financeiro, o governo ou a empresa\ncuidarão de nós quando chegar o dia da aposentadoria. Contudo, são\nnossos filhos, formados no mesmo sistema de ensino, que acabarão\npagando por ela.\n\nQuero ser livre para viajar por todo o mundo e viver o estilo de\nvida que gosto. Quero fazer isso ainda jovem. Quero ser\nsimplesmente livre. Quero controlar meu tempo e minha vida. Quero\nque o dinheiro trabalhe para mim.\n\nAs pessoas pobres têm simplesmente maus hábitos de despesa.\n\nNão ouça as pessoas pobres ou apavoradas. Tenho amigos assim, e\ngosto muito deles, mas são \"galinhas pessimistas\" na vida. Quando\nse trata de dinheiro, especialmente investimentos, \"O céu está\nsempre caindo. Eles sempre sabem por que as coisas não funcionam.\nO problema é que as pessoas que as ouvem mas aquelas que aceitam\ncegamente essas informações pessimistas  são também \"galinhas\npessimistas\". E, como diz o velho ditado, \"Galinhas da mesma\nplumagem concordam entre si\".\n\nDiria que o mais difícil quanto à formação de uma fortuna é ser\nfiel a si mesmo e estar disposto a não acompanhar a multidão.\n\nInvestidores espertos não se afobam. Se perdem uma onda, esperam\npara a próxima e se preparam.\n\nInvestidores sábios aplicam quando o negócio ainda não é popular.\n\nNo mundo em rápida mudança de nossos dia, a questão não é tanto o\nque você sabe, porque com frequência o que você sabe já está\nultrapassado. É a rapidez com que você aprende.\n\nPague a si mesmo primeiro. O poder da autodisciplina. É a falta de \nautodisciplina que leva pessoas que acabaram de obter\num aumento a comprar um carro novo ou fazer um cruzeiro.\n\nÉ a falta de autodisciplina que se constitui o fator número um a\nseparar ricos, pobres e classe média.\n\nDito de forma simples, pessoas que têm baixa auto-estima e\nreduzida tolerância à pressão financeira não poderão nunca, e\nquero dizer isso mesmo, nunca, ser ricas.\n\nAs três habilidades de gestão mais importantes para se iniciar um\nnegócio próprio são:\n\n1. Gestão do fluxo de caixa\n2. Gestão de pessoal\n3. Gestão pessoal do tempo\n\nEm certos meses, quando por qualquer rasão o fluxo de caixa é bem\nmenor do que minhas contas, eu pago a mim mesmo em primeiro lugar.\n\nMeu contador grita em panico: \"Eles vão pegar o senhor. A receita\nvai colocar o senhor na cadeia. O senhor vai acabar com sua\ncapacidade de tomar crédito. Vão cortar a eletricidade.\" Ainda\nassim, pago a mim mesmo em primeiro lugar.\n\nPorque esse é o sentido da história de *The richest man in Babylon*.\nO poder da autodisciplina e o poder da força interior. Ter a garra\npara ir contra a maré e enriquecer. Você pode não ser fraco, mas\nquando se trata de dinheiro muitos balançam.\n\nQuando eventualmente estou num aperto, ainda assim pago primeiro a\nmim mesmo. Deixo que os credores e até o governo gritem. Gosto\nquando eles ficam zangados. Porquê? Porque eles me fazem um favor.\nEles me inspiram a sair e criar mais dinheiro.\n\nHeróis fazem mais do que simplesmente inspirá-lo. Heróis fazem com\nque as situações pareçam fáceis. Ao fazer parecerem fáceis nos\nconvencem a querer ser como eles. \'Se eles conseguiram, eu também\nposso.\'\n\nQuando se trata de investimentos, há gente demais para complicar.\nProcure heróis que façam as situações parecerem fáceis.\n\nSe eu tivesse de passar apenas uma única ideia para o leitor,\nseria esta. Sempre que você sentir falta ou escassez de alguma\ncoisa, doe, antes, o que você quer e isso retornará para você aos\nmontes. Isso é verdadeiro para dinheiro, sorrisos, amor, amizade.\nSe desejo contatos, ajudo alguém a obter contatos e, como num\npasse de mágica, os contatos vêm para mim.\n\nO jogo de compra e venda é divertido. Não se esqueça disso. É\ndivertido e é só um jogo. Faça ofertas. Alguém pode dizer sim.\n\nEu sempre faço ofertas com ressalvas. Em imóveis, faço ofertas com\na ressalva de que está \"sujeita a aprovação de meu sócio\". Nunca\nespecifico quem é o sócio no negócio. A maioria das pessoas não\nsabe que o sócio é meu gato.\n\nPara que um negócio seja lucrativo são necessários dois elementos:\npechincha e mudança.\n\nUm vizinho comprou um apartamento por cem mil, comprei o apartamento\ncontíguo ao seu por cinquenta mil. Ele me disse que estava esperando que os\npreços subissem. Eu lhe mostrei que o lucro ocorre quando se\ncompra não quando se vende. Ele comprou um imóvel de uma corretora\nque não possuía imóveis próprios. Eu comprei o meu no departamento\nde execuções judiciais de um banco. Paguei quinhentos dólares por um curso que\nme ensinou a fazer isso.\n\nVocê e só você tem o pode de determinar o destino de cada nota de\ndólar que chega em suas mãos. Gaste-a tolamente, você escolheu ser\npobre. Gaste-a com passivos, você fará parte da classe média.\nInvista-a em sua mente e aprenda adquirir ativos e você estará\nescolhendo a riqueza como seu objetivo e seu futuro. A escolha é\nsua e apenas sua. A cada dia, a cada dólar, você decide ser rico,\npobre ou classe média.',1,'2015-09-27 14:54:27'),(128,'Hard lessons from code reviews','These are some hard lessons from my year long experience with code reviews.\n\n#Break your pull requests\n\nThe smaller the pull request the better. Reviewers obligated to\nbrowser dozens of files, will end up reviewing superficially.\n\nRule: If you realise a pull request will end up too big for a unique review,\nit\'s better to break it in two or more.\n\nI\'m totally in opportunistic refactoring, so abstaining from sending\nimprovements in code while I\'m working on a feature isn\'t an option,\nbut - for the sake of the review - we must break the pull requests.\n\n#The hangman\n\nMany times I was labeled the \"hangman\" of the reviews. Truth\nis that every single time I tolerate some \"minor problem\" I\nregret.\n\nIn the end I\'ll end up having to work on the files that contains\nthese issues and I\'ll have to fix it by my own. Otherwise the\namount of problems will be keep pilling up and I will be forced to\nrewrite every single piece of the software.\n\nReinforcing, all the times your feeling in a good mood with your\npartner developer and you don\'t want to mess with his pride fulling\nhis pull request with \"minor issues\", think again, don\'t hesitate. If you\ndon\'t talk about it when the shit appears you probably will end up\ncleaning it yourself.\n\nDon\'t bother as well about the length of the conversation on the\npull request, it demonstrates your commitment about project. If you\nhave to do thirty comments, do it. Maybe in the next time you get\nmore quality (or less code).\n\nA pull request without comments by one and full of comments by\nother, may demonstrate that someone is not interested enough in the\ncode to complain about recurrent things.\n\nRule: If it\'s an recurrent problem, the you find in a PR, and it\'s fix or\nnotification can be automated, or at least documented, you must do it.\n\nIn the end of the day, being a hangman, in the sense of caring\nabout the code, is the only responsible thing to do.',1,'2015-09-29 23:21:24'),(129,'Dicas Pacman','Estes são alguns comandos que eu não gostaria de esquecer quando\nestou dando manutenção para minha máquina com Archlinux. Vou\nlistá-los aqui para facilitar a busca posterior.\n\n##Pesquisar os pacotes locais\n\nObtém uma lista com todos os pacotes instalados no sistema.\n\n```\npacman -Qs\n```\n\n###Só o nome do pacote\n\nRetorna somente o nome dos pacotes instalados que comecem com php.\n\n```\npacman -Qs -q php-\n```\n\n\n##Pesquisar pacotes online\n\n```\npacman -Ss\n```\n\n##Qual pacote determinado arquivo pertence\n\n```\npacman -Qo /a/file/name\n```\n\n\n##Listagem de pacotes orfãos\n\nPacotes que não são mais necessários como dependência.\n\n```\npacman -Qdt\n```\n\n##Árvore de dependências de pacote\n\n```\npactree python\n```\n\n\n##Arquivos de determinado pacote instalado\n\n```\npacman -Ql oh-my-zsh-git\n```\n\n\n##Reinstalar pacotes com determinado padrão de nome\n\n\nPara reinstalar todos os pacotes relacionados a plugins de audio.\n```\n sudo pacman -Qqs gst | sudo pacman -Syu -\n\n```',1,'2015-10-04 17:05:01'),(130,'A cool hack for rand','This is a nice trick is useful when one\'s need a 50% of chance of something\nin PHP.\n\n```\n$yesOrNo = rand() amp; 1;\n```\n\nThis is equivalent to:\n\n```\n$yesOrNo = rand(0, 1);\n```\n\nBut fast. It\'s faster quicker than the conventional because\nit avoids method parsing.\n\nSo next time you need it, remember this cool trick.',1,'2015-10-05 11:30:10'),(131,'Bookmarks 2015-10','\n[Web\nAssembly](http://arstechnica.com/information-technology/2015/06/the-web-is-getting-it\'s-bytecode-webassembly/)\n\nThis  cool article touches on some the weakness(overheads, not much otimizable) and stronger (memory safe, sandboxed) points of\nJavaScript.\nFocusing on the weaknesses, he introduces these new project: *wasm* or the WebAssembly.  The project is being orchestrated by four major browser vendors.\nAnd, on the early prototypes, seems to be till 20 times faster than asm.js.\n\nFor compatibility they are talking of a polyfill as well.\n\nCertainly this seems a good addition to the HTML spec, in\nperformance required areas like games.\n\n[Rule of least\npower](https://en.wikipedia.org/wiki/Rule_of_least_power)\n\nIt\'s a theory for systems engineering that states that one should\nuse the least powerful language to describe a program - mainly a\nprogram data. The\nreasoning behind it is that if the data is easily to parse, other\nparties can create new programs based on that that ways beyond\nthe imagination of it\'s creator. It\'s a angular stone behind HTML\ndevelopment.\n\n[Getting the Most out of\nHTML5](https://www.filamentgames.com/blog/getting-most-out-HTML5)\n\nIt is important to note that backfilling support is just as\nimportant as looking forward to where the standard is going. \n\nSome things as basic as keyboard support (specifically for virtual\nkeyboard on mobile) and requestAnimationFrame (how we request\ndraws of the screen) needs programming to wrap varied support with\nfallbacks when there is no support. Vast lists of polyfills exist\nto support as much as possible. \n\n\n[How to get into a habit of publishing one blog post per\nweek](http://www.triplet.fi/blog/how-to-get-into-a-habit-of-pushing-one-blog-post-per-week/)\n\nThe author explains the steps of creating habits and recommends a\nbook about the matter. The steps are: trigger, routine, reward.\nCertainly I\'ll the recommended literature.',1,'2015-10-14 22:10:14'),(7,'Como a Google testa software - Review','<p>N&atilde;o existe um setor de testes, outrossim, o que seria entendio como testes faz parte do setor de melhorias.</p>\n<p>Existem tr&ecirc;s pap&eacute;is principais no processo de testes: PWE, .. .</p>\n<p>&nbsp;</p>\n<p>Os programadores s&atilde;o parte do processo de testes, e o processo decorre durante o per&iacute;odo de desenvolvimento. Cabe aos programadores produzirem c&oacute;digo de facil testabilidade, bem como produzir testes unit&aacute;rios.</p>\n<p>&nbsp;</p>\n<p>Testes automatizados de amplo escopo s&atilde;o vistos com olhos ruins pela empresa, visto que eles acabam por moldar o processo de desenvolvimento. Eles d&atilde;o prefer&ecirc;ncia por automatizar pequenos processo separadamente.</p>\n<p>&nbsp;</p>\n<p>O ambiente de desenvolvimento &eacute; similar ao de produ&ccedil;&atilde;o, existe vers&otilde;es espec&iacute;ficas de ferramentas para rodar, tanto no desenvolvimeto, quanto nos builds. Procura-se sempre manter o mais pr&oacute;ximo poss&iacute;vel o ambiente de desenvolvimenhto do de produ&ccedil;&atilde;o para que supresas s&atilde;o ocorram.</p>\n<p>&nbsp;</p>\n<p>Existem v&aacute;rias vers&otilde;es de sofware at&eacute; chegar em um beta.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>A estrategia de desnvolvimento da empresa &eacute; lan&ccedil;ar cedo, com poucas funcionalidades, o m&iacute;nimo necess&aacute;rio para fazer o software funcional. &Agrave; partir da&iacute; incrementar em itera&ccedil;&oacute;es com pequenas funcionalidades cada. Este processo diminui o stress permitindo que as funcinalidades sejam testadas com maior amplitude, visto que s&atilde;o disponibilizadas em menor quantidade por itera&ccedil;&atilde;o.</p>\n<p>&nbsp;</p>\n<p>Linguagem para o mapeamento de interfaces e protocolos, gera o c&oacute;digo automaticamente. Principais linguagens: C++, Java, Phython e Javascript.</p>',0,'2014-05-06 00:00:00'),(9,'Dicas de produtividade','Neste post pretendo juntar dicas para ser mais produtivo.\n\nNo unix\n\nPrefixar as coisas. Tenho um conjunto de comandos para diversas tarefas, como são muitos tenho uma grande tendência a esquecê-los. Para que seja mais fácil de recordá-los uma boa prática é prefixar seus programas.\n\n<img src=\"http://i.imgur.com/RMf6hps.png\"/>\n\n\n#De usuário\n\nCriar aliases\nUtilizar o copyq\nUtilizar shortcuts customizados\n\n#De programação\n\nUtilizar bash\nUtilizar vim\nUtilizar snippets\n\n#Postura\n\nNão faça nada deitado, na cama é lugar de dormir e seu cérebro já está acostumado com isso.',0,'2015-02-07 00:00:00'),(10,'Argumentos e contra-argumentos à respeito da não existência de Deus.','<p>Muitas vezes o assunto: Deus e ci&ecirc;ncia podem coexitir?,&nbsp; j&aacute; foi tratado, dessa vez, desejo expressar minha posi&ccedil;&atilde;o relativa ao assunto.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Primeiramente devemos nos perguntar que Deus? N&atilde;o vou me deter ao cl&aacute;ssico argumento al&aacute; Dawkins: que deus? Odin, Zeus, Jeov&aacute;, etc - a fim de elevar o argumento da plausabilidade em detrenimento de muitas religi&otilde;es j&aacute; terem existido na terra, segundo uma palestra que vi, registrado mais de dez mil religi&otilde;es. Outrossim, quero abordar a tem&aacute;tica de que forma de Deus crist&atilde;o voc&ecirc; se refere. Um Deus b&iacute;blio literal, que toma por verdade tudo o que l&aacute; est&aacute; escrito da forma que foi escrita, sem segundas interpreta&ccedil;&atilde;os. Ou ent&atilde;o um Deus mais ameno, personificado em Jesus Cristo, cuja &uacute;nica caracter&iacute;stica marcante - &agrave; principio - &eacute; o amor incondicional por seus filhos, uma suaviza&ccedil;&atilde;o, digamos, do Deus b&iacute;blico, onde tudo pode ser tomador por uma interpreta&ccedil;&atilde;o n&atilde;o direta como alguns estudiosos b&iacute;blicos dizem: o que voc&ecirc; tem que entender dessa passagem &eacute; o que os ap&oacute;stolos quiseram que entend&eacute;ssemos desta mensagem.</p>\n<p>Meu ponto aqui, &eacute; tentar demonstrar que o primeiro Deus &eacute; cientificamente refutado e o segundo, cientificamente improv&aacute;vel.</p>\n<p>&nbsp;</p>\n<p>Argumentos:</p>\n<p>Dos milagres:</p>\n<p>Deus parou o Sol para um carinha l&aacute; - primeiramente, deus n&atilde;o pode ter parado o Sol para que as sombras n&atilde;o se movessem aqui na Terra, outrossim, o que os ap&oacute;stolos quiseram dizer aqui &eacute; que deus parou a Terra. Agora paremos para imaginar as consequ&ecirc;ncias deste acontecimento, a terra gira em torno de seu eixo a uma velocidade x. Ao menos que deus tenha levado um tempo consider&aacute;vel para desacelerar, ter&iacute;amos sentido fortemente as consequ&ecirc;ncias desse acontecimento.</p>\n<p>&nbsp;</p>\n<p>Atrav&eacute;s da espectroscopia podemos dizer a que dist&acirc;ncia um corpo celeste est&aacute; de n&oacute;s, e como a velocidade da luz n&atilde;o se move infinitamente r&aacute;pida, h&aacute; um tempo at&eacute; que sua luz chegue at&eacute; n&oacute;s. Sendo assim, h&aacute; de haver um tempo consider&aacute;vel para que a luz dos corpos mais distantes de nosso universo chege at&eacute; nos, devido a sua manginitude. E de fato h&aacute;, estudos apontam que a luz mais antiga que chega at&eacute; n&oacute;s tem cerca de quatorze bilh&otilde;es de anos/luz. Sendo assim, a luz destes locais demorou, acredite se quiser: quatorze bilh&otilde;es de anos para chegar at&eacute; n&oacute;s. Isso &eacute; cientificamente comprovado, sendo assim, que espa&ccedil;o existe para a argumenta&ccedil;&atilde;o de que a terra tem cerca de 6 mil anos, como os registro das genealogias b&iacute;blicas apontam?.</p>\n<p>&nbsp;</p>\n<p>Com estes argumentos, eu espero ter demonstrado que ser crist&atilde;o literal n&atilde;o &eacute; mais racionalmente compat&iacute;vel. A menos que voc? acredite em um Deus abstrato e de caracter&iacute;sticas intalg&iacute;veis e infalse&aacute;veis, voc&ecirc; vive uma vida de contradi&ccedil;&atilde;o, longe do que pode ser considerado razo&aacute;vel.</p>',0,'0000-00-00 00:00:00'),(11,'Git Tips','Utilize ``git -d`` para deletar branches.\n\nO parâmetro ``d`` minúsculo delete o branch apenas se o HEAD contém em seu\nhistórico uma entrada do branch. Em outras palavras, só se já foi dado um merge\nou rebase.\n\nA opção -D para deletar deleta o branch invariavelmente.\n\n\nGit diff HEAD~1 para ver as diferenças entre o estado atual e o HEAD em um commit anterior\n\n\nExemplo de checkout (arquivo deletado por engano)\n\ngit checkout HEAD  module/Application/src/Application/Model/Message.php',0,'2014-06-02 00:00:00'),(54,'Reference','To remember\n\nCore dump\n\nIn computing, a core dump (in Unix parlance), memory dump, or system dump[1] consists of the recorded state of the working memory of a computer program at a specific time, generally when the program has terminated abnormally (crashed).[2] In practice, other key pieces of program state are usually dumped at the same time, including the processor registers, which may include the program counter and stack pointer, memory management information, and other processor and operating system flags and information. Core dumps are often used to assist in diagnosing and debugging errors in computer programs.\n\nThe name comes from magnetic core memory,[3] the principal form of random access memory from the 1950s to the 1970s. The name has remained long after magnetic core technology became obsolete.\n\nOn many operating systems, a fatal error in a program automatically triggers a core dump; by extension the phrase \"to dump core\" has come to mean, in many cases, any fatal error, regardless of whether a record of the program memory results.\n\nThe term \"core dump\", \"memory dump\", or just \"dump\" has become jargon to indicate any storing of a large amount of raw data for further examination. However, in informal conversation between persons who know what a core dump is, saying \"I did a core dump of ...\" indicates that they expressed all of the information that they know about a particular issue. For instance, \"Management had me do a core dump of our software configuration process to the new interns.\"\n\n---\n\n A 2008 study showed that men who got angry were viewed by men and women as high status and more competent, yet women who displayed their anger were rated afterwards as less competent and lower status.\n\n---\n\nType O\n\nConsume: Seafood, Red meat, poultry (chicken/turkey) and other proteins are highly recommended. When it comes to vegetables spinach, kale, broccoli and kelp are a good choice.\n\nDo Not Consume: legumes (beans, peanuts, lentils), dairy and egg products, as well as grains and wheat.\n\nPensamento:\n\nLinguagens de programação são equivalentes a como Sam Harris trata a moral. Exitem várias formas de se ir corretamente. Não obstante, existem muito mais maneiras de se ir errado. (Paralelo: NET errado Go certo)\n\nFollowing the first answer to the question: \"I-am-ambitious-talented-and-intelligent-but-I-lack-willpower-discipline-and-organization-I-am-an-impulsive-procrastinator-of-the-highest-order-What-can-I-do-to-improve?\n\", I\'ll follow the strategy of describe the worst case scenarios of how could my life end up. The aim of this\nis to really know what is waiting for me if I fail in my goals leaving all to the future, not putting priorities, etc.\n\n#TCC\nIf I do not graduate on 2014 I will spend in the minimum more a half year behind Leandro Lugaresi, having a hard time to really get a good salary. Having problems with my parents. Being unhappy and without trust on my own word or capabilities. Cub will not like it, my compromised projects will have to wait until the next semester or till a whole year.\nMy relatives will be disappointed, Rafa and the other teacher\'s horde will be disappointed. I\'ll not be able to take any concourse. I\'ll see all my old fellows going further on their careers and I\'ll be stagnated.\n\n#Ignorance about maths\n\nBeing a ignorant about maths I\'ll be my hole life incapable of talking the language of the universe.\nBeing unable to read really important articles. Being unable to take good exams and concourses.\n\n\n#A superficial knowledge about Computer Sciences\n\nA superficial knowledge or a practical knowledge is very harmful on my career. It puts me on a, not cool, only \"programmer\" position. I would have bad performance on all\ntests on the field that I would take. I would be a shame of giving talks, speaking with people and many social or intellectual activities that being a computer scientist would get.\n\n#Doubts\n\nSe o cérebro de uma pessoa para e depois volta a funcionar, como dizer que é a\nmesma pessoa?\n\n#Confiança\nTenho que ser mais confiante de mim mesmo na presença de outras pessoas. Talvez a leitura do livro de socialização ajude neste quesito.\n\n#Viver consiente\nEu admiro minha própria consiência, gosto de viver no nível dela, ou seja, ficar um nível acima do presente. Ficar pensando, não me engajar profundamente, a não ser nas tarefas as quais minhas metas estão alinhadas, nestas sim posso mergulhar, me gastar.\n\n\nPracticing skills does not allow solving new tasks that require cogitating. But, it enhances the fluency and speed of the performance and reduce mistakes. Expertise research states that practise is crucial for academic performance (Ericsson, 1998). Deliberate practise means vast and extensive intrinsically motivated training. As Schineider and stefanek (2004) summarized, deliberate practise and IQ that is slightly above average guarantee the best results for children GPAs. Similarly crucial for performance is an early start with practice that allows stabilizing acquired competences that are necessary to build on for further developments. Longitudinal data reveal that a combination of intense practice, highly developed interes, and intrinsic motivation predicts above average performance (Scheider & Stefanek, 2004). Video games provide a terrific opportunity to realize the descrribed triad (practice, interest, intrinsic motivation).\n\n\n\n#Ser melhor\nMe comportar como se eu tivesse 35.\n\n\n#References\nhttp://www.quora.com/I-am-ambitious-talented-and-intelligent-but-I-lack-willpower-discipline-and-organization-I-am-an-impulsive-procrastinator-of-the-highest-order-What-can-I-do-to-improvey',0,'2015-01-12 00:00:00'),(14,'The God Delusion Ending',' \nHere\'s a quite impressive talk of Richard Dawkings in the end of this\nMovie: [The God Delusion](https://www.youtube.com/watch?v=9FiHRVb_uE0)\n\nThere is no all seeing all loving god to keep us free from harm.\nBut atheism is not a recipe for despair, I think the opposite: by\ndisclaiming the idea of a next life we can take more excitement in this\none. The here and now is not something to be endured before eternal\nbliss or damnation. The here and now is all we have: an inspiration to\nmake the most of it. So atheism is life affirming in a way religion can\nnever be.\n\nLook around you, nature demands our attention, beg\'s us to explore, to\nquestion. Religion can provide only fossils ultimately unsatisfiable\nanswers; science, in constantly seeking real explanations, constantly\nreveals the true majesty of our world in all it\'s complexity. People\nsometimes say: there\'s must be more than just this world, than just this\nlife, but how much more do you want?. We are going to die and that makes\nus the lucky ones; most people are never going to die because their never\ngoing to be born. The number of people who could be here in my place\noutnumber the sand grains of Sahara. If you think in all different ways\nthat our genes can be permuted, you and I are quite grotesquely lucky to\nbe here. The number of events that have to happen in order for you to\nexist; in order for me to exist - we are privileged to be alive and we\nshould make the most of our time on this world.\n\n\n** Tradução livre: **\n\nNão há um Deus que tudo ama e tudo vê cuidando de nós. Mas ateísmo\nnão é um convite ao desespero, penso que seja o contrário:\ndescartando a ideia de uma próxima vida nós somos levados a levar esta\ncom mais empenho. O aqui e agora não é algo passageiro preludiando\nprazer ou desespero eterno. O aqui e agora é tudo o que temos: uma\ninspiração para tirarmos o máximo dessa vida. Nessa perspectiva,\nateísmo é a afirmação da vida de uma forma que a religião nunca\nserá.\n\nOlhe ao redor, a natureza nos demanda atenção, nos pede que\nexploremos, que questionemos. A religião nos fornece apenas fósseis de\nrespostas insatisfatórias; ciência em contrapartida, por estar sempre\nbuscando as explicações reais, constantemente revela a verdadeira\nmajestade de nosso mundo em toda sua complexidade. As pessoas às vezes\ndizem: deve haver mais do que apenas este mundo, que apenas esta vida,\nmas quanto mais você deseja?. Nós vamos todos um dia morrer e isso\nfaz de nós os mais sortudos; a maioria das pessoas nunca vai morrer\nporque elas nunca vão nascer. O número de pessoas que poderia estar\naqui no meu lugar é maior do que o número de grãos de areia do Saara.\nSe você pensar em todas as diferentes formas em que os nossos genes\npoderiam ter sido permutados - você e eu somos grotescamente sortudos.\nO número de eventos que tiveram que acontecer para que você exista,\npara que eu exista - nós somos privilegiados por estarmos vivos e nós\ndevemos fazer o melhor de nosso tempo neste mundo.',1,'2014-06-04 00:00:00'),(13,'PHP tips','<p>Este post &eacute; dedicado a apresentar algumas dicas e curiosidades sobre PHP que est&atilde;o, normalmente, distanciadas do senso comum, mesmo algumas delas sendo extremamente simples e &uacute;teis.<p><br />&nbsp;</p>\n<p><strong>&nbsp;&nbsp;DICA 1 - Ao declarar o retorno de uma fun&ccedil;&atilde;o cuidado com os par&ecirc;nteses.</strong></p>\n<hr />\n<p>&nbsp;</p>\n<div style=\"color: #c7254e;\">\n<div class=\"line number17 index16 alt2\">&nbsp; &nbsp; public&nbsp;function&nbsp;bar()</div>\n<div class=\"line number18 index17 alt1\">&nbsp;&nbsp;&nbsp;&nbsp;{</div>\n<div class=\"line number11 index10 alt2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return($this-&gt;bar);</div>\n<div class=\"line number12 index11 alt1\">&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n</div>\n<div class=\"line number12 index11 alt1\">Se voc&ecirc; declarar dessa forma e depois retornar a vari&aacute;vel como uma refer&ecirc;ncia obter&aacute; um erro:</div>\n<div class=\"line number12 index11 alt1\">\n<div style=\"color: #c7254e;\">\n<div class=\"line number17 index16 alt2\">&nbsp; &nbsp; public&nbsp;function&nbsp;bar()</div>\n<div class=\"line number18 index17 alt1\">&nbsp;&nbsp;&nbsp;&nbsp;{</div>\n<div class=\"line number18 index17 alt1\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//c&oacute;digo com problema</div>\n<div class=\"line number11 index10 alt2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(&amp;$this-&gt;bar);</div>\n<div class=\"line number12 index11 alt1\">&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n</div>\n</div>\n<div class=\"line number12 index11 alt1\">&nbsp;\n<div class=\"line number12 index11 alt1\">O recomend&aacute;vel &eacute; n&atilde;o utilizar par&ecirc;nteses em retornos.</div>\n<div style=\"color: #c7254e;\">\n<div class=\"line number12 index11 alt1\">\n<div class=\"line number17 index16 alt2\">&nbsp; &nbsp; public&nbsp;function&nbsp;bar()</div>\n<div class=\"line number18 index17 alt1\">&nbsp;&nbsp;&nbsp;&nbsp;{</div>\n<div class=\"line number11 index10 alt2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&amp;$this-&gt;bar;</div>\n<div class=\"line number12 index11 alt1\">&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n</div>\n</div>\n<div class=\"line number12 index11 alt1\">&nbsp;</div>\n<div class=\"line number12 index11 alt1\">&nbsp;</div>\n<div class=\"line number12 index11 alt1\">&nbsp;</div>\n<div class=\"line number12 index11 alt1\">&nbsp;</div>\n<div class=\"line number12 index11 alt1\"><strong>&nbsp;DICA 2 - &nbsp;Heran&ccedil;a em interfaces</strong></div>\n</div>\n<hr />\n<div class=\"line number13 index12 alt2\">&nbsp;</div>\n<div class=\"line number14 index13 alt1\">Heran&ccedil;a todo mundo conhece, mas voc&ecirc; sabia que &eacute; poss&iacute;vel criar heran&ccedil;a em interfaces?</div>\n<div class=\"line number14 index13 alt1\">&nbsp;</div>\n<div class=\"line number14 index13 alt1\">\n<div style=\"color: #c7254e;\">\n<div class=\"line number27 index26 alt2\">/**</div>\n<div class=\"line number28 index27 alt1\">&nbsp;* Subcomponent exceptions</div>\n<div class=\"line number29 index28 alt2\">&nbsp;*/</div>\n<div class=\"line number30 index29 alt1\">// In Zend/Foo/Bar/Exception/ExceptionInterface.php</div>\n<div class=\"line number31 index30 alt2\">namespace Zend\\Foo\\Bar\\Exception;</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number33 index32 alt2\">use Zend\\Foo\\Exception\\ExceptionInterface as FooExceptionInterface;</div>\n<div class=\"line number34 index33 alt1\">&nbsp;</div>\n<div class=\"line number35 index34 alt2\">interface ExceptionInterface extends FooExceptionInterface</div>\n<div class=\"line number36 index35 alt1\">{</div>\n<div class=\"line number37 index36 alt2\">}</div>\n</div>\n<div class=\"line number37 index36 alt2\">&nbsp;</div>\n<div class=\"line number37 index36 alt2\">&nbsp;</div>\n<div class=\"line number37 index36 alt2\">&nbsp;</div>\n<div class=\"line number37 index36 alt2\"><strong>DICA 3 - Informa&ccedil;&atilde;o sobre fun&ccedil;&otilde;es, m&eacute;todos e classes offline</strong></div>\n<div class=\"line number37 index36 alt2\"><hr />\n<div class=\"line number13 index12 alt2\">&nbsp;</div>\n<div class=\"line number13 index12 alt2\">Nesse caso pode-se utilizar a API de reflex&atilde;o do php, para exemplificar, execute os seguintes comandos no terminal:</div>\n<div class=\"line number13 index12 alt2\">&nbsp;</div>\n<div class=\"line number13 index12 alt2\">&nbsp;</div>\n<div class=\"line number13 index12 alt2\">\n<div class=\"line number31 index30 alt2\">\n<pre class=\"shellcode\">$ php --rf strlen\n$ php --rc finfo\n$ php --re json\n$ php --ri dom</pre>\n</div>\n<div class=\"line number32 index31 alt1\">Mais informa&ccedil;&otilde;es <a href=\"http://www.php.net/manual/en/book.reflection.php\">aqui</a>.</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number32 index31 alt1\"><strong>DICA 4 - Conhe&ccedil;a e sempre que poss&iacute;vel, utilize SPL</strong></div>\n<div class=\"line number32 index31 alt1\"><hr />A SPL &eacute; a bliblioteca padr&atilde;o do php &nbsp;- Standard PHP Library, conhecendo-a voc&ecirc; pode sobreescrever o funcionamento de diversas fun&ccedil;&otilde;es pr&eacute;-concebidas para linguagem, exemplo - reescrevendo a fun&ccedil;&atilde;o count():</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div style=\"color: #c7254e;\">\n<div class=\"line number32 index31 alt1\"><span class=\"keyword\">class&nbsp;</span><span class=\"default\">CountMe&nbsp;</span><span class=\"keyword\">implements&nbsp;</span><span class=\"default\">Countable&nbsp;<br /></span><span class=\"keyword\">{&nbsp;<br /><br />&nbsp;&nbsp;&nbsp; protected&nbsp;</span><span class=\"default\">$_myCount&nbsp;</span><span class=\"keyword\">=&nbsp;</span><span class=\"default\">3</span><span class=\"keyword\">;&nbsp;<br /><br />&nbsp;&nbsp;&nbsp; public function&nbsp;</span><span class=\"default\">count</span><span class=\"keyword\">()&nbsp;<br />&nbsp;&nbsp;&nbsp; {&nbsp;<br />&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return&nbsp;</span><span class=\"default\">$this</span><span class=\"keyword\">-&gt;</span><span class=\"default\">_myCount</span><span class=\"keyword\">;&nbsp;<br />&nbsp;&nbsp;&nbsp; }&nbsp;<br /><br />}&nbsp;<br /><br /></span><span class=\"default\">$countable&nbsp;</span><span class=\"keyword\">= new&nbsp;</span><span class=\"default\">CountMe</span><span class=\"keyword\">();&nbsp;<br />echo&nbsp;</span><span class=\"default\">count</span><span class=\"keyword\">(</span><span class=\"default\">$countable</span><span class=\"keyword\">); // o resultado ser&aacute; 3</span></div>\n</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number32 index31 alt1\"><span class=\"comment\">Mais informa&ccedil;&otilde;es <a href=\"http://php.net/manual/en/book.spl.php\">aqui</a>.</span></div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number32 index31 alt1\">&nbsp;</div>\n<div class=\"line number32 index31 alt1\">\n<div class=\"line number37 index36 alt2\">&nbsp;</div>\n<div class=\"line number37 index36 alt2\"><strong>DICA 5 - PHP na linha de comando</strong></div>\n<div class=\"line number37 index36 alt2\"><hr />\n<div class=\"line number13 index12 alt2\">&nbsp;</div>\n<div class=\"line number13 index12 alt2\">PHP tem in&uacute;meras funcionalidades via linha de comando, as que considero mais &uacute;teis s&atilde;o:</div>\n<div class=\"line number13 index12 alt2\">&nbsp;&nbsp;</div>\n<div class=\"line number13 index12 alt2\">\n<div class=\"line number31 index30 alt2\">\n<pre class=\"shellcode\">$ php -a //um shell iterativo php - estilo o do Python\n$ php -i //phpinfo() vers&atilde;o terminal\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong>DICA 6 - Links &uacute;teis</strong></p>\n<hr />\n<div class=\"line number13 index12 alt2\">&nbsp;<a href=\"http://www.phptherightway.com/\">http://www.phptherightway.com/</a></div>\n<p><br /><br /><br /></p>\n<p><img src=\"http://www.php.net/images/logo.php\" alt=\"\" width=\"68\" height=\"34\" /><br /> Se voc&ecirc; tem alguma sugest&atilde;o &agrave; este post, fique &agrave; vontade de me contatar por e-mail.</p>\n<p><br /><br /></p>',0,'2015-08-25 00:00:00'),(15,'Music','Neste post pretendo colocar a teoria que sei, história e insigths de música.\n\n#Barroco\n\nBarroco é o nome dado ao estilo artístico que floresceu entre o final do século XVI e meados do século XVIII, inicialmente na Itália, difundindo-se em seguida pelos países católicos da Europa e da América, antes de atingir, em uma forma modificada, as áreas protestantes e alguns pontos do Oriente.\n\n\n##Características\nMaior dinamismo, contrastes mais fortes, maior dramaticidade, exuberância e realismo e uma tendência ao decorativo, além de manifestar uma tensão entre o gosto pela materialidade opulenta e as demandas de uma vida espiritual.',0,'2014-06-10 00:00:00'),(16,'Facilitando a vida - backup de banco de dados','Todo o programador minimamente descente utiliza alguma espécie de\ncontrole de versão em seus projetos - geralmente acompanhado por um\nserviço de hopedagem como o Github. Essa estratégia garante, ou quase,\nque o código não se perca; contudo, muitas vezes essas ferramentas não\nsolucionam um aspecto muito comum de problemas de software: a\npersistência do banco de dados. E, no caso de programadores backend,\nmuitas vezes o database no servidor de testes fica dias defazado em\nrelação ao database em sua máquina. Em vista desse problema criei dois\nscripts: um para efeturar um backup de todo o sgbd, e outro para\nimportar os dados novamente. Este post é dedicado a explicar o\nfuncionamento destes scripts.\n\n##databases-save\n\nEste comando conecta ao sgbd e exporta cada database para um arquivo\nchamado: nomedobanco.sql, respectivamente. No exemplo abaixo está\ndescrito como utilizar o script para exportar os bancos de dados à cada\nhora utilizando o cron em um sistema Linux. A opção -v é para tornar a\nexecução mais detalhada (verbose). Caso o arquivo já existe o script\nsobreescreve o arquivo com o novo conteúdo.  Para mais opções pode-se\nencontrar a documetação com o parâmetro --help.\n\n*Exemplo:*\n```\necho \"0 * * * * root \\\ndatabases-save -v /projects/databases; \\\n/tmp/cron-save-database crontab; \\\n/tmp/cron-save-database\n```\n\n##database-setup-folder\n\nEste comando importa todos os arquivos .sql encontrados no diretório\npassado, criando o banco de dados com o nome do arquivo - excluindo a\nparte \".sql\".\n\nExemplo:\n\n```\ndatabase-setup-folder -v /projects/databases\n```\n\n \n\nFica fácil de ver como so dois scripts podem trabalhar em conjunto, um\nexportando em uma máquina com os bancos já instalados, e o outro criando\nos bancos à partir do mesmo diretório contendo os bancos que o primeiro\nexportou.\n\nUtilizando-se das vantagens do cron - como acima demonstrado -  pode-se\nobter uma automatização relevante. Uma utilização interessante, é\ncolocar o diretório em algum serviço da nuvem a fim de que os dados não\nse percam, algo do tipo: \\~/Dropbox/databases. Todavia, acredito que o\ncaso mais útil deste sistema de backup de banco é utilizando um sistema\nde virtualização do ambiente de desenvolvimento como o vagrant -\nutilizado no meu caso.\n\n \nApesar de soluções extremamente simples disponíveis, backups dos bancos\nde dados no ambiente de desenvolvimento são muitas vezes deixados de\nlado, somente lembrados após alguma espécie de desastre. Similar a este\ntópico é a automatização de processos do git - a qual estou\ndesenvolvendo um projeto bem maior - que pode ser encontrado\n[aqui](https://github.com/jeanCarloMachado/devil-easy-git), assunto\nque em outro momento tratarei em meu blog. Para um exemplo de utilização\ndesses scripts com o vagrant,\n[aqui](https://github.com/jeanCarloMachado/vagrant) pode-se encontrar\nmeu projeto de webserver com vagrant - utilizados da mesma forma que\ndispostos nos exemplos. Em outro post também pretendo abordar vagrant\npara webservers com profundidade.\n\n \n\nOs scripts aqui mencionados encontram-se ne github e podem ser\nclonados/baixos\n[aqui](https://github.com/jeanCarloMachado/devil-database-utilities).\n\nDúvidas, dicas e sujestões através do contato do site ou como uma issue\nno projeto.',1,'2014-06-12 00:00:00'),(17,'Militant Atheism','<p>I transcript &nbsp;this awsome Richard Dawkin\'s TED talk, enjoy.</p>\n<p>&nbsp;</p>\n<p>That splendid music, the comming in music: the <a href=\"https://www.youtube.com/watch?v=l3w4I-KElxQ\">Triumphal March from Aida</a>, is the music I choosen for my funneral; and you can see why - it is triumphal. I am, I will, I wont feel anything but, if I could, I would feel triumphal at having lived at all. And having lived in this esplendid planet, and having me given the opportunity to understand something about why I was where in the first place before not being here.&nbsp;</p>\n<p>Like everybody else I was in trance&nbsp;yesterday by the animal session <a href=\"https://www.youtube.com/watch?v=d3syTrElgcg\">Robbert Full and Franz Lanting, anothers</a>. The beauty of the things that they showed, the only slide jarring note was when Jafrey Vergs said of the mustang that the most explendid creatures that God put on these earth. Now of&nbsp;course we know that he didn\'t&nbsp;really mean that, but in&nbsp;this country at the moment you can\'t be too careful. I\'m a biologist and the central theory of our subject, the theory of design: Darwins theory of evolution by natural selection. In professional circles everywhere its of course universally accepted. In non professional circles outside america it\'s largely ignored, but in non professional circles within&nbsp;america it arises so much hostility that it\'s fair to say that the american biologists are in state of war. The war is so warry against pressent with&nbsp;coath cases comming up in one state after another that I feel I have&nbsp;to say somethig about it. If you want to know what I have to say about Darwinism itself I\'m afraid you going to have to look at my books which&nbsp;you wont find in&nbsp;the bookstore outside.</p>\n<p>&nbsp;</p>\n<p>Contemporary&nbsp;coath cases often concerns a energetic&nbsp;new version of creationism called: intelligent design or ID. Do not be fooled, there\'s nothing new about ID, it\'s just creationism under another name. Were\'re christendom &nbsp;- I choose the world advairsly - &nbsp;for tatical political reasons, the arguments&nbsp;of the so called ID theory are the same&nbsp;old arguments that have beign refuted again and again since Darwin down to the present day. There is an effective evolution lobby coordenating the fight on behalf of science, and I tried to do what I can to help them. But they get quite upset when people like me dare to mention that we happen to be atheists as well as evolutionists. They see us as rocking the boat, and you can understand why. Creationists, lacking any coherent scientific argument for their case &nbsp;- fallback on the popular phobia against atheism - teach your children evolution in biology class and they will soon move to drugs, grand hallucinations&nbsp;and sexual prevation.&nbsp;</p>\n<p>In fact there is, of course, educated theologians from the pope down affirming their support in evolution. This book: <a href=\"http://www.amazon.com/Finding-Darwins-God-Scientists-Evolution/dp/0061233501\">Finding Darwings God by Kenneth Miller</a>&nbsp;is one of the most effective attacks on Intelligent Design as&nbsp;I know, and it\'s also more affective because it is written by a devoted Christian. People like Kenneth Miller could be called a god sent to the evolution lobby. Because they expose the lie that evolutionism is, as matter of fact, tent do mount to atheism. People like me, on the other hand, rock the boat. But here I want to say something nice about creationists and it\'s not the thing I often do, so listen carefully. I think that they are right about one thing, I think they are right that evolution is fundamentally hostile to religion. I have already said that many individually evolutionists are like the pope - also religious - but i think they are delluding theirselves. I believe a true undestanding of Darwinism is deeply corrosive to religious faith. Now it may sound as though&nbsp;I\'m about to preach atheism, and I want to reassure you that is not what I\'m going&nbsp;to do. In an audience as sophisticated as this one that would be preaching to the quire. Instead, what I want to urge upon you is: militant atheism. But that is putting it too negatively, if I was a person who are interested in preserving religious faith I would be very afraid of the positive power of evolution, I mean science generally, but evolution in particular, to inspire and enroll,&nbsp;preciselly because it is atheistic.</p>\n<p>&nbsp;</p>\n<p>Now, the difficult problem for any&nbsp;theory of biological design is to explain the massive statistical improbability of living things. Statistical improbability in a direction of good design - complexity is not the word for this. The standard creationist argument, there is only one, they all reduce to&nbsp;this one, takes off from statistical improbability: living creatures are too complex to have come about by&nbsp;change - therefore they&nbsp;must had&nbsp;a designer. This argument, of course,&nbsp;shoot\'s itself in the foot: any designer capable of designing something really&nbsp;complex has to be even more complex himself. And that is&nbsp;before even start on the other things he is expected&nbsp;to do like: forgive sins, bless marriages, listen to prayers, favour our side in the war, disaprove our sex lives, and so on. Complexity is the problem that any theory of biology has to solve, and you can\'t solve it by postulating an agent that is even more complex, there by simply compounding the problem.</p>\n<p>&nbsp;</p>\n<p>Darwinian natural selection is so stunningly&nbsp;elegant because it solves the problem of explaining complexity in terms of nothing but simplicity. Essentialy it does it by providing a smooth ramp of gradual step by step increment. But here I only want to make the point that the elegance of Darwinism&nbsp;is&nbsp;corrosive to religion precisely because it is so elegant, so parsimonious, so powerful, so economically powerful. It has the sillouette economy of a beautiful suspention bridge. The god theory is not just a bad theory, it turns out to be in principal incapable of doing the job required of it. So, returning to tatics and the evolution lobby, I want to argue that rocking the boat maybe is just the right thing to do. My approach to attacking creatinism is unlike the evolution lobby, my approach to attacking creationism is to attack religion as a hole.</p>\n<p>&nbsp;</p>\n<p>And in this point I need acknowledge&nbsp;the remarkable tabu against speaking ill of&nbsp;religion. And I gonna to do so in the words of Douglas Adams, a dear friend, who, if never comes to TED, certainly should be invited. He begins this speach, which was tape recorded in Cambridge shortly before he died, he begins by explaining how science works throught the testing of hypothesis that are vulnerable&nbsp;to disprove. And then hes go on \"... religion does not seem to work like that, it has certain ideas of the hearth of it which we call sacret or holy what it&nbsp;means is: here is an idea or a notion that you are not allowed to say anything&nbsp;bad about, you are just not, why not?. Because you are not. Why should it be that is perfectly legitimal to support the republicans or the democrats, this model of economics vs that, vs that, Macintosh&nbsp;instead of Windows, but having&nbsp;an opinion about&nbsp;how the universe began, about who created the universe - no, that\'s holy. &nbsp;So we are used to not challenging religious ideas, and it\'s very interesting how much of furrory Richard creates when he does it. Everybody gets absolutly frenetic about it, because you are not allowed to say this things, yet when you look at it racionally, there is no reason why those ideas should not be as open to debate as any other, except that we\'ve agreeded somehow between&nbsp;us&nbsp;that they should not be\".&nbsp;</p>\n<p>In my view, not only is science corrosive to religion, religion is corrosive to science. It teaches people to be satisfied with trivial, supernatural, non explanations and blinds them, to the wonderful real explanations that we have within&nbsp;our grasp. It teaches them to accept authority, revelation, and faith; instead of, always insisting on, evidence.&nbsp;</p>\n<p>Now, there is a typical scientific journal repported revealed biology, and i want to put together, as a guest editor, a special issue on the question \"Did an asteroid killed the dinossours?\". And the first paper is a standard scientific paper, presenting evidence \" Iridium .. Potassium .. in Yucatan Indicate that an asteroid killed the dinossours\", perfect ordinary, scientific, paper. Now the second one: \" The president of the royal society has been vouch safe a strong inner conviction that an asteroid killed the dinossours\", \"It has been privately revealed to professor Hockstein that an asteroid killed the dinossours\", \"Professor Holdly was brought&nbsp;up to have total undoubt questioning faith, that an astheroid killed the dinossours\", \"Professor Hawkings has promulgated an official dogma binding on all loyal hawkingsians that an astherois killed the dinossours\". That\'s inconcievable of course but suppose: &nbsp;Jorge W Bush quote \"Supporters of the astheroid theory cannot be patriotic citizens\". In 1987 an reporter asked Jorge Bush senior wheter he reconginzes the equal scitizenship and patriotism of americans who are atheists. Mr. Bush\'es reply has become infamous \" No, I dont know that atheists&nbsp;should be considered citizens, nor should they be considered patriots, &nbsp;this is one nation under God\". Bush\'es bigotry&nbsp;was not a isolated mistake, bloated&nbsp;out in heat of the moment, and later retracted. &nbsp;He stood by it, in the face of repeated calls for clarification or withdrawal,&nbsp;he really meanted it. More to the point, he knew it pose no threat&nbsp;to his election; quite the contrary, democtrates as well as republicans parade&nbsp;they religiousness&nbsp;if they want to get elected, both parties invoke one nation under god. What would Thomas Jefferson have said \"In every country an in every age, the priest has been hostile to liberty\". Incidently I\'m not usually very proud of being British, but you can\'t help making the comparasion. &nbsp;<em>Image of a 10 pounds euro with a Darwin\'s photo on on side and a one dollar note with the \"In God we trust\" message.&nbsp;</em></p>\n<p>&nbsp;</p>\n<p>In practise what is an atheist?. An atheist is just somebody who feels about Yahweh&nbsp;the way any decent christian feels about Thor or Baal or the Golden Calf, as has been said before, we are all atheists about most of the gods that humanity has ever belived in. Some of us, just go one god further. And however we define atheism it\'s&nbsp;surely that kind of academic believe that the person is entitled to hold without being verified as a non patriotic, unelectable, non citizen. Nevertless its a non deniable fact that on not to beign an atheist is tend to mount introducing yourself as Mr. Hittler or Mr. Beelzebub, and that all stands from the perception of atheists as some kind of weird&nbsp;way out minority. Nataly Angie wrote another sad peice on New Yorker saying how lonely she felt as an atheist; she clearly feels in&nbsp;a belial&nbsp;minority.</p>\n<p>&nbsp;</p>\n<p>But actually how do american atheists stack up numerically?. The lastest survey make surprisingly encoragin reading, christianity of course takes a massive lean&nbsp;share of the population with nearly a hundred and sixty million. But what would&nbsp;you think its the second largest group conviencely outnumbering Jews with two point eight million, musliams with one point one&nbsp;million and indus, busdists and all other religions put together. The second largest group with nearly thirty million &nbsp;is the one described as non religious or secular. You can\'t help wandering why vote seeking politicians are so proverbially&nbsp;over od by the power of, for example, the Jewish lobby. The state of Israel seems to owe its very existence to the american Jewish vote. While the same time, concealing the non religious to political oblivion. This secular non religious vote if properly mobilized is nine times as numerous as the Jewish vote.&nbsp;Why do this far more substancial minority not make a move to exercise its policical muscle?.</p>\n<p>&nbsp;</p>\n<p>But so much of quantity, how about quality?, is there any correlation positive or negative between intelligence and tendency to be religious?. The survey that I quoted which is the AIRIS survey didn\'t break down it\'s data by socioeconomic classes or by education, IQ or anything else. But a recent article by Call G Bell in the Mensa Magazine provides some scrolls in the wind. Mensa as you know is an international organization for people with very high IQ. And from a meta analysis of the literature, Bell concludes that \"Of fourty three studies carried out since 1927 on the relationship between religious belief and ones intelligence or educational level all but four found an inverse connection - that is: the higher ones intelligents or educational level the less one&nbsp;likely to be religious. But I havent seen the original 42 studies and i can\'t comment on that meta analysis, but i would like to see more studies done along those lines and I know that - if I could put a little plug here - there are people in this audience easly capable of financing a massive research survey to settle the question; and I put the suggestion now for what it is worth. But let me now show you some data that have been proprerly published and analysed on one special group namely: top scientists. In 1998 Lassom and Wittle pound the crime on american scientists those who been honored by election to the national academy of sciences. And among this select group, belief in a personal god droped to a shattering seven percent, about twenty percent are agnostic, and the rest could fairly be called atheists, the similar figures obtained for beliving in a personal immortality. Among by logical scientists the figure is even lower, five point five percent only believe in god, physical scients seven point five percent. I\'m not seeing correponding figures for ellite scollars in other fields such as history or philosophy but I would be surprised if they were different.</p>\n<p>&nbsp;</p>\n<p>So we\'ve reached a truly remarkable situation a grostesc mismatch between the american intelligentsia and the american electorate. A philosophycal opinion about the nature of the universe which is held by the vast majority of top american scientists and probably the majority of the intelligentsia&nbsp;generally is so apart to the american electorate&nbsp;that no candidate for popular election&nbsp;dare of afirmate it in public. If I\'m right this means that the high office in the greatest country in the world is bared to the very people best qualified to hold it, the intelligentsia; unless they are prepared to lie about their believes. To put it blankly: american political opportunities are heavly loaded against those who are simultanly intelligent and honest. I\'m not a citizen of this country as I hope wont thought on becoming if I suggest that something needs&nbsp;to be done. I already hinted on wath that something is, from what i\'ve seen on TED, I think this is maybe the ideal place to launch it. Again, I fear it will cost money, we need a contiousness raising comming out campaign for american atheists. This could be similar to the campaign organized by homossexuals, a few years ago, althought having forbid that we should stood to public outing of peope against their will. In most cases people who out themselves will help to destroy the myth, that there is something wrong with atheists. On the contrary, they will demonstrate that atheists are often the kind of people who could serves decently row models for your children, the kind\'s of people an advertising agent could use to recomend a product, the kind\'s of people who are sitting in this room. &nbsp;</p>\n<p>There&nbsp;should be a snow ball effect, a positive feedback, such as the more names we have, the more we get. There could be non linearities, threshold effects, when a critical mass has being obtained, there\'s an abrupt aceleration in recruitment. And again, it will need money. I suspect that the word atheist itself contains remains, a stunning block - far out proportion to what it actually means, and an stunning block to people who otherwise might be happy to out themselves. So what other words could be used to smooth apart all of the wilds, sugar the pill. Darwin himself preferred agnostic, and not only out of loyalty to his friend Huxley&nbsp;who coined the term. Darwin said \"I have never been an atheist, in the same sense of denying the existance of a god, I think that generally an&nbsp;agnostic would be the most correct description of my state of mind\". He even became uncaracteristic tetchy&nbsp;with Edward Aveling. Aveling&nbsp;was a militant atheist who failed to persuade&nbsp;Darwin to accept the dedication of his book on atheism, incidently giving rise to a fascinating myth that Carl Marx tried to&nbsp;dedicate Capital to Darwin, which we did\'nt - was actually Edward Aveling. What happend was that Aveling\'s mistress was Marx\'es daugther. When both, Darwin and Marx, were dead Marx\'es papers became modeled up with Aveling\'s papers, and a letter from&nbsp;Darwin\'s said \"My dear sr., thank you very much but I did not want you dedicate your book to me\", was mistakenly supposed to be addressed to Marx. And that gives rise to this hole myth that you probably heard, is a sort of urban myth, that Marx tried to dedicate Captial to Darwin. Anyway, it was Aveling, and when they meet Darwin challenge Aveling: \"Why do you call yourselfves atheist\'s?\". Agnostic replied&nbsp;Aveling, is simply atheist with respectfull and atheist is simply agnostic with agressive, but Darwin complained: \"But why you should be so agressive?\". Darwing thoutht that atheism might&nbsp;be well and good to the intelligentsia but the ordinary people will&nbsp;not quote the wripe for it. Which is of course our old friend don\'t rock the boat argument. It\'s not recorded wheter Aveling told Darwing to come down of his high horse. But in any case that was more that a hundred years ago I would like to think that we&nbsp;might have&nbsp;grown&nbsp;up since them.&nbsp;</p>\n<p>Now, a friend, an intelligent lapsed Jew who incidently observes the sabbath, for reasons of cultural solidarity, describes himself as a tooth fary agnostic. He wont call himself an atheist because its , in principal, impossible to prove negative. But agnostic own its own might suggest that god\'s existance was therefore on equal tons of likelihood as its non existance. So my friend is strictly agnostic about the tooth fairy, but it isn\'t very likely, is it?, like God. Hands the pharase tooth fairy agnostic. But from Russel made&nbsp;the same point using a hypotetical teapot in orbit about Mars. You strictly have to be agnostic about wheather there is a teapot in orbit about&nbsp;Mars, but that does not&nbsp;means you treat the likelihood of its existence as on all falls with it\'s non existence. The list of things which&nbsp;we strictly have to be agnostic about, does not stop on tooth fairies and&nbsp;teapots, it is infinite. If you want to believe one&nbsp;particular one of them, unicorns or tooth fairies&nbsp;or teapots or Yahweh&nbsp;the burden&nbsp;is on you to say why the burden&nbsp;is not on the rest of us to say why not. We who are atheists, are also afairieists and ateapotists but we don\'t bother to say so. And this is why my friend uses a tooth fairy agnostic as a label for what most people would call&nbsp;atheist.</p>\n<p>&nbsp;</p>\n<p>Nevertheless, if we want to atract deep down atheists to come out publicly we are going to have to find something better&nbsp;to stick on our banner than tooth fairy or teapot agnostic. How about humanist?, this has&nbsp;the advantage of a world wide network a well organized association and journals and things already in place, my problem with&nbsp;it is only it\'s parent anthropocentrism&nbsp;one of the things we have learned from Darwin is that the human species is only one among millions of cousings, some close, some distant. And there are others possibilities like: naturalist but that also has problems of confusion because Darwin would thought&nbsp;naturalist - naturalists means of course as oposed to super-naturalists - it is used some times -&nbsp; Darwin would be confused by the other sense of naturalist wich he was of course,&nbsp;and, I suppose, there might be others&nbsp;that might confuse with nudism. Such people might belonging to the British beach mob which last year attacked a pediatrician&nbsp;in mistake for a pedofile. I think that the best available altarnatives for atheist is simply non-theist, it lacks the strong connotation that there is definetely&nbsp;no god, and it could therefore, easily be embraced by teapot or tooth-fairy agnostics, it\'s completly compatible with the god of the physicists. When atheists like Stephen Hawking&nbsp;and Albert Einstein&nbsp;use the word god they use it, of course, as a metaphorical&nbsp;shorthand for that deep misterious part of physics which&nbsp;we dont yet understand. Non theist will do for all that, yet unlike atheist it does not have the same phobic, hysterical, responses.&nbsp;</p>\n<p>&nbsp;</p>\n<p>But I think actually, the&nbsp;alternative is to grasp the metal of the word atheism itself precisely because it is a tabu word, carrying freesales&nbsp;of hysterical phobia. Critical mass maybe harder to achieve,&nbsp;with the word atheist then with the word&nbsp;non theist or some of the&nbsp;non-confrontational words. But if we did achieve it with that greedy&nbsp;word, atheist itself, the political impact would be even greater. I said&nbsp;that if I were religious, I would be very afraid of evolution, I go further, I would fear science in general if properly understood. And this is because the scientific world view is so much more exciting, more poetic, more filled with share wonder than eveything in the&nbsp;poverty stricken&nbsp;arsenals of the religious imagination. As Carl Sagan, another recently dead hero, put it \"How is it that hardly any major religion has looked at science and concluded, \'This is better than we thought! The universe is much bigger than our prophets said, grander, more subtle, more elegant?\' Instead they say, \'No, no, no! My God is little god, and I want him to stay that way.\' A religion, old or new, that stressed the magnificence of the Universe as revealed by modern science, might be able to draw forth reserves of reverence and awe hardly tapped by the conventional faiths.</p>\n<p>Now, this is an ellite audience and I would therefore to expect about ten percent of you to be religious. Many of you probably subscribe to our polite cultural believe that we should respect religion. But I also suspect that a fair number of those secretly despise religion as much as I do. If you are one of them, and of course many of you are not one of them, I\'m asking you to stop of being polite, come out, and say so. And if you happen to be rich, give some thought to&nbsp;ways what you might make a difference. The religious lobby in this country is massively financed, say nothing about the tax benefits, &nbsp;by foundations such as the Templeton Foundation and the Discovery Institute, we need an Anti-Templeton to step forward. If my books sold as well of Stephen Hawkings books instead as well as Richard Dawkin\'s books I do it myself.</p>\n<p>People are always going on about how did setember the eleventh&nbsp;changed you, well here\'s how it changed me: lets all stop being so dammed respectful.</p>\n<p>&nbsp;</p>\n<p>Tank you very much.</p>\n<p>&nbsp;</p>\n<p><strong>Other Links</strong></p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=CoJyONmcGbM\">The talk</a></li>\n</ul>\n<p>&nbsp;</p>',1,'2014-06-13 00:00:00'),(18,'List of fallacies and biases','I intend do fill this list with fallacies that we encounter in our every\nday lives. With the hope that it helps us to not fall or make some one\nfall in fallacious words.\n\n##Automation bias\n\n> Automation bias is the propensity for humans to favor suggestions\nfrom automated decision making systems and to ignore contradictory\ninformation made without automation, even if it is correct. This bias\ntakes the form of errors of exclusion and inclusion: an automation bias\nof exclusion takes place when humans rely on an automated system that\ndoes not inform them of a problem, while an error of inclusion arises\nwhen humans make choices based on incorrect suggestions relayed by\nautomated systems.\n\n**By Wikipedia**\n\n##Observer Expectancy\n\n>The observer-expectancy effect (also called the experimenter-expectancy\neffect, expectancy bias, observer effect, or experimenter effect) is a\nform of reactivity in which a researcher\'s cognitive bias causes them to\nunconsciously influence the participants of an experiment. Confirmation\nbias can lead to the experimenter interpreting results incorrectly\nbecause of the tendency to look for information that conforms to their\nhypothesis, and overlook information that argues against it.It is a\nsignificant threat to a studies internal validity, and is therefore\ntypically controlled using a double-blind experimental design.\nAn example of the observer-expectancy effect is demonstrated in music\nback masking, in which hidden verbal messages are said to be audible\nwhen a recording is played backwards. Some people expect to hear hidden\nmessages when reversing songs, and therefore hear the messages, but to\nothers it sounds like nothing more than random sounds. Often when a song\nis played backwards, a listener will fail to notice the \"hidden\" lyrics\nuntil they are explicitly pointed out, after which they are obvious.\nOther prominent examples include facilitated communication and dowsing.\n\n**By Wikipedia**\n\n\n#Correlational errors\n\nWhen you don\'t now if the statement you want to test originated\nthe result or the result is generated by other factor previously\nestablished. \n\n#Ad Nauseam\n\nSoon...',1,'2015-05-31 00:00:00'),(19,'Search and Replace on console','My intent with this post is to enumerate the ways I know of searching and replacing in unix consoles. In the end I\'ll elect the best one.\n\n##Searching\n\n###Grep\n```\ngrep -R \"foo\" ~/bar\n```\n\n###Ack\n\n```\nack -R \"foo\" ~/bar\n```\n\n##Search and Replace\n\n###Awk\n```\nawk \'{gsub(/pattern/,\"replacement\")}\' file\n```\n\n##Perl\n```\nperl -pi -w -e \'s/SEARCH_FOR/REPLACE_WITH/g;\' *.txt\n```\n\n###Search with backup\n\n```\nperl -e \"s/old_string/new_string/g;\" -pi.save $(find DirectoryName -type f)\n```\n\n###Tr\n\n```\ntr \'string to be converted\' \'string to replace\' <file.txt |tee file.txt\n```\n\n###Find e Sed\n\n```\nfind module/ -name \"*.php\" -exec sed -i \"s/Importando/Importing/g\" {} \\;\n```\n\n###Find, Sed e Xargs\n\n```\nfind . -name \"*.php\" -print | xargs sed -i \'s/foo/bar/g\'\n```\n\n---\n\n##Grep e Xargs\n\nEste método eu utilizo para buscar e fazer algo diferente de substituir.\n\n```\n ls -a | egrep -l \'^\\..{2,}\'  | xargs rm -rf {} \\;\n```\n\nO ``l`` como parametro para o egrep serve para que o comando mostre somente os nomes dos arquivos, ideal para utilizar com comandos.\n\n\n\n#The best one\n\n#Searching\n```\nack -Rl \"pattern to search\"\n```\n\n#Replacing\n```\ns1=\"patterToSearch\"\nack -Rl $s1 | xargs sed -i \"s/$s1/patternToReplace/g\"\n```\n\n##References\n\n1. http://lifehacker.com/5810026/quickly-find-and-replace-text-across-multiple-documents-via-the-command-line\n2. http://askubuntu.com/questions/20414/find-and-replace-text-within-a-file-using-commands\n3. http://www.brunolinux.com/02-The_Terminal/Find_and%20Replace_with_Sed.html\n4. https://rushi.wordpress.com/2008/08/05/find-replace-across-multiple-files-in-linux/',0,'2014-06-26 00:00:00'),(38,'Chega de entretenimento leviano','A troca de um tema acarretou na perda deste *post* em sua versão original - não me peça para explicar como. Sendo assim, vou tentar escrever o mesmo com novas palavras.\n\nEstou aqui para falar de entretenimento *leviano*, nesta categoria incluo: mangas, animes, filmes, jogos e séries.\n\nUma reflexão indignante é pensar a imensa quantidade de tempo que eu já joguei no lixo consumindo este tipo de porcaria.\n\nDiferente de um livro, estas formas entretenimento não lhe agregam virtuosidade de qualquer tipo. Você não fica mais rico no vocabulário. Dificilmente aprende algo - devido à insistência destes tipos de mídia a tornar tudo superficial, fácil de digerir. \n\n<!-- Tomada de decisão mais rápida consumindo jogos? Como se isso fosse bom! Como se a velocidade do pensar fosse virtude! Muito mais rudeza e superficialidade. -->\n\n\nMuito mais prolífero é aquele que consegue penetrar profundamente nas coisas e isso, isso só se faz através de esforço, de tempo e vontade. Só se muda de percepção, só se abre mão do estar certo, com  profundidade de espírito - reflexão. Antônimos do entretenimento de massas moderno que estamos, na imensa maioria dos casos, amargamente enraizados. \n\nA partir de agora, sempre que eu estiver cansado das tarefas quotidianas, quando eu desejar um pouco de entretenimento, vou procurar consumir um livro em meu *Kindle*. Qualquer livro que seja, até romances, no final das contas *humano, demasiado humano* ainda não sou capaz de fugir totalmente destas frivolidades, destes escapes da realidade.',0,'2014-12-21 00:00:00'),(41,'Testes de API com o Pyresttest','No projeto que estou desenvolvendo, nos deparamos com uma situação onde uma nova tarefa afetou o funcionamento de uma gama de outros serviços e, por consequência, a API HTTP teve de mudar. Se este conjunto de alterações fosse intruduzido no master logo depois do desenvolvimento o frontend ficaria quebrado até que as adaptações fossem refletidas no angular.\n\nVisto que estávamos nos estágios iniciais do desenvolvimento, não foi considerado prudente começar a versionar os serviços na URL como é o de costume nas *APIs*. Outrossim, resolvemos mudar a API e introduzir no processo um conjunto de testes integracionais a nível HTTP, para garantir que, no momento em que a interface seja for alterada, intencionalmente ou não, todos fiquem sabendo.\n\nVale dizer que a prevenção de quebra na API não é o único objetivo de testes de integração. Segundo o Wikipedia \"o propósito de testes integracionais é validar requisitos funcionais, performance e confiabilidade dos itens de um sistema em grande escala\". Dessa forma, efetuamos uma busca por soluções que satisfaçam estas características.\n\n###[PYRESTTEST](https://github.com/svanoort/pyresttest)\nO Pyresttest é um projeto open-source escrito em Python, como o nome já indica, com o objetivo de prover um framework para testes e benchmarks de APIs REST. Escolhemos este em detrimento à outras tecnologias como o Postman e outros por ser gratuito, open source e de fácil aprendizagem outrossim, por comtemplar todas as características que testes integracionais devem comportar.\n\nOs testes do Pyresttest são descritos em YAML ou JSON e nenhuma programação é necessária para fazê-los funcionar. A comunidade é atenciosa e altamente responsiva.\n\nEm meu primeiro contato com a aplicação não era possível utilizar variáveis nos headers das requisições. Como isso era um fator de grande importância no caso do projeto que desenvolvo abri uma issue no Github e, em questão de uma semana, o problema estava resolvido. Reportei outras issues e todas foram respondidas ou atentidas prontamente.\n\n####[INSTALAÇÃO](https://github.com/svanoort/pyresttest#user-content-installation-troubleshooting-and-special-cases)\n\nPara instalar o pyrestest você precisa utilizar o comandos abaixo, importante ressaltar que o Python esperado é o Python 2.7 longe de ser o padrão nas distribuições Linux modernas.\n```bash\n$ git clone https://github.com/svanoort/pyresttest.git\n$ cd pyresttest\n$ sudo Python2.7 setup.py install\n```\n\n---\n#####Python != 2.7\nSe você não utiliza o Python 2.7 como padrão, uma saída é criar um ambiente virtual como segue:\n\n1 - Instale o virtual-env para a sua versão de Python.\nNo archlinux:\n```\n$ sudo pacman -Syu python-virtualenv\n```\n2 - Crie um ambiente virtual\n```\npyresttest$ virtualenv -p /usr/bin/Python2.7 --distribute temp-Python\n```\n*A pasta temp-tython será criada e para utilizar o ambiente virtual você terá que rodar os comandos relativos à ela*\n\n3 - Ative o ambiente virtual\n```\npyresttest$ source temp-python/bin/activate\n```\n*Se você rodar o Python --version você verá que a versão mudou: Python 2.7.9*\nVocê também irá notar algo do tipo em seu terminal: *``(temp-Python)``[jean@JeanAir ApiTest]$*\n\n\nOBS: Para desabilitar o ambiente virtual utilize o comando:\n```\n$ deactivate\n```\n---\n\nInstale as dependências do Python utilizadas pelo Pyresttest\n\n```\npyresttest$ pip install pyyaml pycurl jsonschema\n```\nInstale o Pyresttest\n\n```\npyresttest$ sudo Python2.7 setup.py install\n```\nRode a instalação do pyrestest (descrita acima), após a instalação você pode utilizar os testes livremente.\nExemplo rodando um teste:\n\n```\ntestsfolder$ Python3.7 /usr/bin/resttest.py http://clipp-back.dev ./finance.get-summary-expense_test.yaml --interactive=true\n```\n\n\n####UTILIZAÇÃO\nApesar de a documentação comentar a possibilidade, não tive contato com o Pyresttest em json. O problema é que os exemplos se encontram, exclusivamente, em YAML. Sendo assim, o resto do post também apresentará o conteúdo em YAML.\n\nExistem 5 elementos de nível principal na API:\n- config or configuration: configuração global\n- test: a definição de um teste\n- benchmark: a definição de um benchmark\n- url: a URL para efetuar alguma operação (não consegui fazer funcionar ainda)\n- import: a possibilidade de importar uma configuração pré-determinada para possibilitar o reúso (não consegui fazer funcionar ainda)\n\n####TESTES\nAbaixo segue o primeiro teste, uma forma de autenticação.\nauthenticate_test.yaml\n```\n- config:\n##\n    - testset: \"Authenticate\"\n- test:\n    - group: \"Application\"\n    - name: \"Authenticate\"\n    - url: \"/rpc/v1/application.authenticate.json\"\n    - method: \"POST\"\n    - body: \"login=admin@domain.com&password=adminpasswd\"\n    - expected_status: [200]\n```\nO exemplo é bem intuitivo, basicamente você configura um teste na seção ```test```, este deve conter uma estutura HTTP com URI, cabeçalho e body (opcionalmente).\nAs configurações ```testset``` e ```group``` são formas de agrupar os testes e não afetam o funcionamento do teste.\nA primeira maneira de testar é validando o STATUS HTTP, neste caso 200. Na maiora das vezes, testar apenas o status HTTP não é o suficiente, precisamos saber se o body contém os dados necessários para a correta conformidade com seus requisitos. Para validar o corpo de um resultado HTTP existem os validators.\n\n#####VALIDATORS\n\nOs validators servem para validar os dados retornados por uma requisição HTTP.\nExistem dois validators principais.\n- Comparadores: Servem para comparar algum dado do resultado a um especificado\n- Extratores: Servem para determinar se algum dado existe no resultado\n\n```\n- config:\n    - testset: \"Reseller\"\n- test:\n    - group: \"Application\"\n    - name: \"Get Representation List\"\n    - url: \"/rpc/v1/application.get-representation_list-client.json\"\n    - method: \"POST\"\n    - body: \"month=12&year=2014\"\n    - expected_status: [200]\n    - headers: {\"Authorization\": \"$access_token\", \"Content-Type\": \"application/x-www-form-urlencoded\"}\n    - validators:\n        - compare: {jsonpath_mini: \"0.subscription_id\",     comparator: \"eq\",     expected: 3}\n        - compare: {jsonpath_mini: \"0.plan\",     comparator: \"eq\",     expected: \"Package1\"}\n        - compare: {jsonpath_mini: \"0.client.id\",     comparator: \"eq\",     expected: 2}\n        - compare: {jsonpath_mini: \"0.client.name\",     comparator: \"eq\",     expected: \"Client2\"}\n        - compare: {jsonpath_mini: \"0.status.id\",     comparator: \"eq\",     expected: 9}\n        - compare: {jsonpath_mini: \"0.status.description\",     comparator: \"eq\",     expected: \"Overdue\"}\n        - compare: {jsonpath_mini: \"0.expiration_date\",     comparator: \"eq\",     expected: \"2014-12-01\"}\n        - compare: {jsonpath_mini: \"0.punctuation\",     comparator: \"eq\",     expected: 7000}\n        - compare: {jsonpath_mini: \"0.money\",     comparator: \"eq\",     expected: 700}\n```\n\nEste teste faz um requisção autenticada (enviando o $access_token),  e espera um conjunto de dados; neste caso, um array json com vários campos por linha.\nA primeira linha contém uma validação para cada campo. A chave ``jsonpath_mini`` define como os dados devem ser minerados, neste caso, através do caminho json. No exemplo está-se lendo cada coluna da primeira linha do resultado e comparando-se os valores com os esperados.\nOBS: O ``$access_token`` não faz parte da notação do Pyresttest, é apenas uma chave que eu uso para localizar onde o access token deve residir e dou replace em runtime pela access token gerada em uma autenticação feita em CURL. Esta \"gambi\" foi introduzida porque inicialmente o Pyresttest não suportava variáveis de ambinte em cabeçalhos HTTP. Atualmente opções mais elegantes estão disponíveis.\n\n#####MÚLTIPLOS TESTES\n\nÉ possível ter vários testes e benchmarks no mesmo arquivo. Segue um exemplo:\n\n```\n- config:\n    - testset: \"Reseller Ranking Positions\"\n- test:\n    - group: \"Application\"\n    - name: \"Get country ranking position of client\"\n    - url: \"/rpc/v1/application.get-country_ranking_position-client.json\"\n    - method: \"POST\"\n    - body: \"country_id=1\"\n    - expected_status: [200]\n    - headers: {\"Authorization\": \"$access_token\", \"Content-Type\": \"application/x-www-form-urlencoded\"}\n    - validators:\n        - compare: {jsonpath_mini: \"position\",     comparator: \"eq\",     expected: 1}\n- test:\n    - group: \"Application\"\n    - name: \"Get state ranking position of client\"\n    - url: \"/rpc/v1/application.get-state_ranking_position-client.json\"\n    - method: \"POST\"\n    - body: \"state_id=23\"\n    - expected_status: [200]\n    - headers: {\"Authorization\": \"$access_token\", \"Content-Type\": \"application/x-www-form-urlencoded\"}\n    - validators:\n        - compare: {jsonpath_mini: \"position\",     comparator: \"eq\",     expected: 1}\n```\nCabe ao programado escolher a separação de melhor se adeque a suas necessidades. Gosto de deixar testes e benchmarks em arquivos separados pois facilita na hora de integrar com o Jenkins.\n\n#####RODANDO OS TESTES\n\nPara rodar um arquivo contendo um teste basta chamar o executável do Pyresttest com a URL de destinho e o arquivo contendo o teste.\n```\n$ resttest.py http://clipp-back.dev get-current_level-client_test.yaml\n```\n####BENCHMARKS\n\nValidar a performance de partes do sistema também é papel de testes integracionais. Através dos benchmarks do pyrestest, você consegue responder perguntas como:\n- Qual a carga máxima de usuários que este meu serviço suporta paralelamente?\n- Qual o tempo médio de execução deste serviço?\n\nSegue o primeiro benchmark\n\n```\n- config:\n    - testset: \"Authenticate\"\n- benchmark:\n    - name: \"Authenticate benchmark\"\n    - url: \"/rpc/v1/application.authenticate.json\"\n    - method: \"POST\"\n    - body: \"login=admin@domain.com&password=adminpasswd\"\n    - warmup_runs: 7\n    - \'benchmark_runs\': \'101\'\n    - output_file: \'bench-result/authenticate.csv\'\n    - metrics:\n        - total_time\n        - total_time: mean\n        - total_time: median\n        - size_download\n        - speed_download: median\n```\n\n- ``warmup_runs`` é o número  total de vezes que o programa rodará antes de começar a coletar dados, adequado para a criação de cache;\n- ``bench_runs`` é o total de vezes que os testes rodarão, o valor default é 100;\n- ``output_file`` (opcional), define onde os dados de benchmark serão armazenados;\n- ```metrics``` são os dados de performance coletados, pode-se coletar os próprios resultados das chamadas ou utilizar [métricas já definidas do Pyresttest](https://github.com/svanoort/pyresttest#user-content-metrics).\n\n```\n- config:\n    - testset: \"Get User Menu Tree\"\n- benchmark:\n    - name: \"Get User Menu Tree benchmark\"\n    - url: \"/rpc/v1/application.get-menu_tree.json\"\n    - method: \"POST\"\n    - headers:\n        - Authorization: \"$access_token\"\n    - warmup_runs: 0\n    - \'benchmark_runs\': \'10\'\n    - output_file: \'bench-result/get-menu-tree_bench.csv\'\n    - metrics:\n        - total_time\n        - total_time: mean\n        - total_time: median\n        - size_download\n        - speed_download: median\n```\n\nComo aqui disposto, algumas métricas interessantes do Pyresttest são:\n- ``total_time``: tempo total\n- ``total_time: mean``: média do tempo total\n- ``total_time: median``: mediana do tempo total\n\nA saída padrão de um benchmark é um arquivo csv como o seguinte:\n\n```\nBenchmark,Get User Menu Tree benchmark\nBenchmark Group,Default\nFailures,0\nResults,\nsize_download,total_time\n193.0,0.038495\n193.0,0.031943\n193.0,0.032668\n193.0,0.035171\n193.0,0.032769\n193.0,0.033024\n193.0,0.032837\n193.0,0.032726\n193.0,0.034357\n193.0,0.032352\nAggregates,\ntotal_time,mean,0.033634199999999996\ntotal_time,median,0.032803\nspeed_download,median,5883.0\n```\n\nOs dados são facilmente mineráveis e, muito provavelmente, uma boa fonte de relaórios.\n\n#####RODANDO OS BENCHMARKS\n\nPara rodar um arquivo contendo um benchmark basta chamar o executável do Pyresttest com a URL de destinho e o arquivo contendo o benchmark.\n```\n$ resttest.py http://clipp-back.dev get-menu-tree_bench.yaml\n```\n\n####Concluindo...\nO Pyresttest é uma boa opção para quem preza legibilidade, liberdade e custo. A comunidade é prestativa e tende a satisfazer as necessidades dos usuários, quando estas condizem com o esperado da aplicação. Em suma, recomendo e gostaria de saber sua opinião sobre o assunto, já utilzou a ferramenta?\nConhece alguma similar ou melhor.',1,'2014-12-22 00:00:00'),(39,'Quotes','> Those who cannot remember the past are condemned to repeat it.\n\nGeorge Santayana - The Life of Reason (1905)\n\n---\n\n>Routine, in an intelligent man, is a sign of ambition.\n\nWH Auden\n\n---\n\n>Correctness is clearly the prime quality. If a system does not do what\nit is supposed to do, then everything else about it matters little.\n\nBertrand Meyer\n\n---\n\n>>Simplicidade é a mais alta das sofisticações.\n\nLeonardo da Vinci\n\n---\n\n>O homem livre é o homem que pode prometer e pode trair.\n\nGabriel Marcel\n\n---\n\n>Philosophy is written in that great book which ever lies before our\neyes, I mean the universe, but we cannot understand it if we do not\nfirst learn the language and grasp the symbols, in which it is written.\nThis book is written in the mathematical language... without which one\nwanders in vain through a dark labyrinth.\n\nAnonymous\n\n---\n\n>Oh, olhai essas choupanas que esses sacerdotes construíram para\nsi! Igrejas chamam eles a tais antros de cheiro adocicado. Oh, nessa\nfalsa luz, esse ar abafado! Aqui, onde a alma, para elevar-se à sua\neminência, não tem o direito de voar! Senão que, ao contrário, assim\nmanda a sua fé: Subi a escada de joelhos pecadores! E não souberam\namar o seu deus de outro modo, senão crucificando o homem!\n\n\n>Certas perdas comunicam à alma uma sublimidade que a leva a se abster\nde toda a queixa e caminhar em silêncio, como altos ciprestes negros.\n\n>A descoberta da moral cristã é um acontecimento que não tem igual,\numa verdadeira catástrofe. Quem sobre ela informa é uma *force\nmajeure*, um destino - divide a história da humanidade em duas partes.\nA dos que antes vieram, a dos que depois viverão... O raio da verdade\natingiu justamente o que até agora mais alto se encontrava: quem\ncompreender o que aí se destruiu veja se em geral ainda tem algo nas\nmãos. Tudo o que até agora se chamou *verdade* reconhece-se como a\nforma mais prejudicial, mais pérfida e mais subterrânea da mentira; o\npretexto sagrado de tornar \"melhor\" a humanidade surge como a astúcia\npara esgotar a própria vida, para a tornar anêmica. A moral como\nvampirismo. Quem descobre a moral descobre com ela a ausência de\nvalor de todos os valores em que se acredita ou se acreditava; nos\ntipos mais venerados, e até mesmo canonizados, do homem já nada\nvê digno de veneração, divisa aí a forma mais fatal dos abortos,\nfatal, porque eles fascinavam... O conceito de \"deus\" foi inventado\ncomo o conceito de antiético à vida - nele se encontra condensado,\nnuma unidade atroz, tudo o que é prejudicial, venenoso, caluniador,\ntoda a hostilidade mortal contra a vida! O conceito de além, de\nmundo verdadeiro, foi inventado para desvalorizar o único mundo que\nexiste - para destituir a nossa realidade terrena de todo o fim, de\ntoda a razão, de todo o propósito! O conceito de alma, de espírito,\nfinalmente ainda de alma imortal, inventou-se para desprezar o corpo,\npara o tornar doente - santo -, para se deparar com uma horrível\nincúria em todas as coisas que na vida merecem seriedade, as questões\nda alimentação, habitação, dieta espiritual, cuidado com os doentes,\nhigiene, tempo! Em vez da saúde, a salvação da alma - quer dizer uma\n*folie circulaire* entre as convulsões da penitência e a histeria\nda redenção! O conceito de pecado foi inventado, juntamente com o\ninstrumento complementar da tortura, a noção de *vontade livre*,\npara extraviar os instintos, para transformar em segunda natureza a\ndesconfiança para com os instintos! No conceito de desinteresse, de\n*renúncia de si mesmo*, encontra-se o genuíno sinal de *decádence*;\no engodo pelo maléfico, a incapacidade de já não encontrar a\nsua utilidade, a autodestruição, tornaram-se em geral qualidades\ndistintivas, o *dever*, a *santidade*, o *divino* no homem! Por fim - e\né o mais terrível - no conceito de homem bom, torna-se o partido de\ntudo que é fraco, doente, falhado, do que em si mesmo é passivo, de\ntudo o que deve perecer - a lei da seleção é contrariada, e faz-se\num ideal a partir da oposição ao homem altivo e bem sucedido, ao\nhomem que diz sim, ao homem que garante e está certo do futuro - este\ntorna-se agora o mau... E em tudo isto acreditou como moral! Escassez\ninfame!\n\n>Quem deseja seriamente se tornar livre perderá a inclinação para\nerros e vícios, sem que nada o obrigue a isso; também a raiva e o\ndesgosto o assaltarão cada vez menos. Pois sua vontade não deseja nada\nmais intantemente do que o conhecimento e o meio de alcançá-lo, ou\nseja: a condição duradoura em que ele está mais apto para o conhecer.\n\n>O meu gosto, que pode ser o contrário de um gosto tolerante, também\nnisso está longe de dizer sim em bloco: ele absolutamente não gosta de\ndizer sim, antes prefere dizer não e, mais do que tudo, prefere não\ndizer nada...\n\nNietzesche\n\n---\n\n> Perfection is attained not when there is nothing more to add, but when\nthere is nothing more to remove.\n\nAntoine de Saint-Exupéry\n\n---\n\n\n>Os que não tem experiência da sabedoria e da virtude, que estão\nsempre em festas e diversões semelhantes, são levados, ao que me\nparece, para baixo, e depois, novamente, até a região intermediária,\ne por aí andam errantes toda a vida, sem jamais ultrapassarem esse\nlimite, erguendo os olhos ou elevando-se até o verdadeiro alto, nem se\nencheram realmente do ser, nem provaram o que é um prazer sólido e\npuro; mas, olhando sempre para baixo, à maneira dos animais, inclinados\npara o chão e para a mesa, engordam e acasalam-se, e, devido à cupidez\nde tal gozo, dilaceram-se e batem uns nos outros com os seus férreos\nchifres e cascos, matando-se por causa do seu apetite insaciável,\nporquanto não enchem de alimentos reais a parte real e estanque de si\nmesmos.\n\nPlatão\n\n---\n\n>O que se anuncia na consciência individual como impulso sexual em\ngeral que não se dirige para um indivíduo determinado do outro sexo\né simplesmente a Vontade de vida em si mesma, e fora do fenômeno.\nO que aparece porém na consciência como impulso sexual orientado\npara um indivíduo determinado é, em si mesma, a Vontade enquanto\nquerer-viver de um indivíduo precisamente determinado. Neste caso, o\nimpulso sexual, embora sendo de fato uma necessidade subjetiva, sabe\npôr, com habilidade, a máscara de uma admiração objetiva, iludindo\nassim a consciência: pois a natureza precisa deste estratagema para\natingir os seus fins.\n\nSchopenhauer\n\n---\n\n>For me, the first challenge for computing science is to discover\nhow to maintain order in a finite, but very large, discrete universe\nthat is intricately intertwined. And a second, but not less important\nchallenge is how to mould what you have achieved in solving the first\nproblem, into a teachable discipline: it does not suffice to hone your\nown intellect (that will join you in your grave), you must teach others\nhow to hone theirs. The more you concentrate on these two challenges,\nthe clearer you will see that they are only two sides of the same coin:\nteaching yourself is discovering what is teachable.\"\n\nDijkstra, 1979\n\n---\n\n\n> The God of the Old Testament is arguably the most unpleasant\ncharacter in all fiction: jealous and proud of it; a petty, unjust,\nunforgiving control-freak; a vindictive, bloodthirsty ethnic cleanser;\na misogynistic, homophobic, racist, infanticidal, genocidal, filicidal,\npestilential, megalomaniacal, sadomasochistic, capriciously malevolent\nbully.\n\nRichard Dawkins\n\n---\n\n> The winds and waves are always on the side of the ablest navigators.\n\nEdward Gibbon\n\n---\n\n\n> Civilization advances by extending the number of important operations\nwe can perform without thinking.\n\nAlfred North Whitehead\n\n---\n\nThree virtues of a programmer\n\n- Laziness: The quality that makes you go to great effort to reduce\noverall energy expenditure. It makes you write labor-saving programs\nthat other people will find useful and document what you wrote so you\ndon\'t have to answer so many questions about it.\n\n- Impatience: The anger you feel when the computer is being lazy. This\nmakes you write programs that don\'t just react to your needs, but\nactually anticipate them. Or at least pretend to.\n\n- Hubris: The quality that makes you write (and maintain) programs that\nother people won\'t want to say bad things about.\n\n\nLarry Wall\n\n\n---\n\n> One can no more say what the effects of video games are, than one can\nsay what the effects of food are\n\nBavelier\n\n---\n\n> Algum filho da puta vai inventar uma máquina para medir\na primavera.\n\nCummings\n\n---\n\n\n\nBe hearty in your approbation and lavish in your praise.\n\nDale Carnegie\n\n--- \n\nToda criatura deve ter permissão para \"rodar\" seu próprio\ndesenvolvimento à sua própria maneira; a forma encontrada pelo ovo\npode ter um jeito bastante oblíquo de fazer as coisas; mas é a sua\nmaneira, da qual o homem, no geral, não tem grandes motivos para\nse queixar. Por que dizemos que a ave é considerada mais viva que\no ovo, e por que dizemos que é a galinha que põe o ovo, e não\no ovo que põe a galinha, são questões que estão além do poder da\nexplicação filosófica, mas talvez sejam mais passíveis de resposta\nse pensarmos na vaidade do homem, e em seu hábito, comprovado\ndurante muitas eras, de ignorar tudo aquilo que não o lembre de si\nmesmo.\n\n\nSamuel Butler\n\n---\n\nAs ideias retiveram algumas das propriedades dos organismos. Assim\ncomo eles, as ideias tendem a perpetuar sua estrutura e a se\nreproduzir; elas também podem se fundir, se recombinar, segregar\nseu conteúdo; de fato, também elas podem evoluir e, nessa\nevolução, a seleção sem dúvida desempenha um papel importante.\n\nMonod\n\n---\n\nMorrer por uma ideia é uma atitude de nobreza inquestionável, mas\nseria ainda mais nobre se os homens morressem por ideias\nverdadeiras.\n\nH. L. Mencken\n\n---\n\n\nQuem quer que leve em consideração métodos aritméticos  para\na produção de números aleatórios estará, é claro, cometendo um pecado.\n\nVon Neumann\n\n---\n\nNão devemos admitir um número maior de causas para os fenômenos\nnaturais do  aquele ao mesmo tempo verdadeiro e suficiente para\nexplicar sua aparência. \n\nNewton\n\n---\n\n\nTime and health are two precious assets that we don\'t recognize\nand appreciate until they have been depleted. \n\nDenis Waitley\n\n---\n\nWhen you’re tired you sleep, and when you’re not, you do physics.\n\nSabrina Pasterski',1,'2014-12-21 00:00:00'),(22,'Valores, moral e ética','A valorização de algo não se dá pelo ser desse algo, outrossim, pela\nrelação entre algo com alguém. Diz-se que algo possui valor quando não\nnos permite a indiferença. O mundo cultural é um sistema de significados\ne valores já estabelecidos por outros. \n*Lévis Strauss* afirma que o reino humano (em oposto ao animal) se\ncaracteriza pelo estabelecimento de regras de convivência. \nJá a moral é o conjunto de regras de conduta - valores - admitidos em\ndeterminada época por um determinado grupo de homens.\nUm exemplo do caráter temporal da moral é a troca dos sistemas\nfeudal/burguês onde o valor do trabalho é enaltecido se comparado com o\nperíodo anterior. Quando antes, visto com desprezo devido à existência\nde uma classe servil e outra ociosa; o trabalho ganha seu valor\nrefletido nas enormes riquezas e poderes dos burgueses impelidos pela\nexpansão mercantil. \n\nA moral é primeiramente coletiva, visto que se trata do agrupamento de\nvalores de um grupo de pessoas, não obstante é também individual, visto\nque exige a aceitação da parte como uma regra para o todo. Não há\ndicotomia neste caso, trata-se de diferentes aspectos de uma mesma\ncoisa. \\\nPor mais que os indivíduos apreciem os valores morais de suas\ncomunidades a moral não pode ser considerada a única fonte da verdade.\nEm vista de valores inadequados cabe à ética indicar a solução; seja\nrefinando, seja completando, por vezes descartando, valores morais.\nSendo assim, a ética pode ser considerada a reflexão da moral.\n\nUma sociedade com moral mas sem ética é hipócrita e virtuosamente\nempobrecida, já o contrário - apesar de provavelmente impossível - é\ncaótica.\n\n#### Ato moral\n\n-   Ato moral: é livre, consciente, intencional e solidário;\n-   Ato amoral: são as transgressões aos atos morais;\n-   Ato não moral: aqueles que não cabem ao escopo da moralidade.\n\nO ato moral provoca efeitos não somente na pessoa que age, mas naquelas\nque a cercam e na própria sociedade como um todo. O ser verdadeiramente\nmoral é autônomo; contudo, não ignora, nem nega, sem uma justificação\nracional, os valores alheios.\n\nEm moral, o homem virtuoso é aquele se que com força se aplica à\nrealização de um dever. É a permanente disposição para o querer bem, o\nque supõe a coragem de assumir os valores escolhidos e enfrentar os\nobstáculos que resistem à ação. Uma vida virtuosa é aquela que persiste\nno agir moral como um hábito fundado.\n ',1,'2014-08-17 00:00:00'),(23,'Upando seu projeto git em um servidor sem git','Por vezes deparo-me com servidores de produção horríveis para o programador, desprovidos de controle, lhe atiram um ftp e boa sorte.\nEntão bate aquela frustração, toda aquela bela arquitetura de setup: git, composer, scripts de automatização de banco, pastas, etc; jogue tudo no lixo e dê setup do site como um escravo.\n\nVocê pode pensar que está tudo perdido, bem... Não mais, pelo menos para o versionamento com git.\n\nFoi numa situação estressante como essa que me deparei com a ferramenta que vou apresentar aqui: o [git-ftp](https://github.com/git-ftp/git-ftp).\n``\nComo você já deve ter imaginado, esse serviço conecta seu projeto versionado a um servidor ftp e faz o trabalho sujo de sincronização. É chegado o fim daqueles dias de *choose-and-pick-files* da sua máquina para o servidor.\n\n\n### Instalação\n\nExistem vários métodos de instalação que podem ser encontrados [aqui](https://github.com/git-ftp/git-ftp/blob/develop/INSTALL.MD); entretanto, recomendo o manual - setando o projeto na sua máquina - digo isso por que só consegui fazer o serviço funcionar com o último commit do master, devido a um problema de máximo de argumentos CURL alcançados, que, aparentemente, acontece exclusivamente no OSX. Sendo assim, vamos à instalação:\n\n```\n$ mkdir -p ~/git-ftp\n$ cd ~/git-ftp\n$ git init .\n$ git remote add origin git@github.com:git-ftp/git-ftp.git\n$ git pull origin develop\n$ sudo make install\n```\n\n\n### Inicializando o git-ftp\n\nUma vez instalado, devemos inicializar o projeto no servidor ftp.\n\n```\n$ cd myProjectName\n$ git ftp init -v -u MyUserName -p MyPassword ftp://mydomainwithsupporttoftp.com\n```\n\nIsso irá upar o seu projeto no servidor em seu estado atual, mas não tema, apenas arquivos versionados serão mexidos, os demais permanecerão como estão - inclusive os não versionados dentro de diretórios versionados; isso abre possibilidades para você utilizar o git-ftp em projetos já existentes sem temer perda de arquivos. Vale mencionar que se seu projeto não está na raiz do seu serviço ftp você pode passar o diretório juntamente com a url do servidor, algo como: ftp://mydomainwithsupporttoftp.com/myProjectFolder.\n\n### Atualizando os arquivos após *comitar*\n\nDepois de realizar um comit, você pode atualizar os arquivos no servidor ftp com o seguinte comando:\n\n```\n$ git ftp push -v -u MyUserName -p MyPassword ftp://mydomainwithsupporttoftp.com\n```\nAssim como no exemplo anterior, o parâmetro ``` -v ```  é opcional, servido apenas para mostrar informações do que está acontecendo.\n\n### Automatizando\n\nExecutar o ftp-push toda vez após *comitar* é trabalhoso, para os preguiçosos, podemos automatizar adicionando o comando a um hook do git.\n\n```\n$ cd myProjectName/.git/hooks\n$ echo \"#! /bin/bash\n\ngit ftp push -v -u MyUserName -p MyPassword ftp://mydomainwithsupporttoftp.com\" > post-commit\n$cd -\n```\n\nPronto! A partir de agora sempre que *comitar* você terá seus arquivos sincronizados no servidor de sua escolha. Não estou dizendo aqui que você deve upar para produção logo depois que comita; mas no meu blog por exemplo, que não tem problemas quebrar esporadicamente, considero uma ferramenta valiosa.\n\n###Be aware!\n\nLinks simbólicos podem lhe dar uma dor de cabeça enorme até você detectar que eram eles os causadores do problema. Se seu projeto tiver links simbólicos aconselho que você garanta que eles não vão parar no versionamento.',1,'2014-09-13 00:00:00'),(25,'Vim e Sublime: o melhor de ambos','Um bom editor de textos/IDE sempre está por trás de um bom desenvolvedor. Essa poderia ser a *golden rule* da programação. Meu editor de texos é o Sublime, trata-se de um projeto recente com funcionalidades similares à editores como: Atom, TextMate, etc. Não obstante, fatores à dizer: excelente performance em projetos gigantes, múltiplos cursores, rapidez em localizar arquivos, etc, aumentam muito minha produtividade sendo diferenciais chave da minha escolha pelo Sublime (mesmo este não sendo open-source). \n\nEntretanto, como um tradicional cara *Unix like* aprecio enormemente o jeito Vim de editar texto. Não me entenda errado, não sou nenhum evangélico de Vim (*hater* de mouse), muito menos um expert no assunto. Mas o jeito do vim, quando navegando e editando um arquivo, é muitas vezes mais produtivo do que a navegação/edição tradicional: simplista e feita para estudantes de publicidade usuários do Microsoft Word e senhoras sem *background* em TI :P.\n\nO Vim como editor de textos é ótimo mas falha em diversos aspectos que uma IDE moderna trata trivialmente, como: gestão de múltiplos arquivos, buffers, suporte à mouse, etc. Este post tenciona apresentar alguns destes ótimos recursos do Vim e surgerir a integração destes no Sublime para que obtenhamos o melhor dos dois mundos. \n\nO grande trunfo do Vim é que ele contém algumas características de linguaguem e, como toda a linguagem, você junta elementos simples para criar padrões complexos e extremamente customizáveis. \n\n### Classes Gramaticais\n\nNa \"linguagem\" Vim você encontra as seguintes classes gramaticais:\n\n**Verbos**: y *copiar*, p *colar*, c *mudar* , d *deletar*, / *buscar* , = *identar*, etc\n\n**Substantivos**: w *palavra*, s *sentença*, p *parágrafo*, b *bloco*, linha, etc\n\n**Advérbios**: i *dentro*, a *ao redor*, t *até encontrar caractere x*\n\n\n### Palavras compostas\n\nAlgumas funcionalidades comuns (que tomariam várias palavras) são reduzidas à atalhos, alguns deles seguem abaixo.\n\n``} bloco superior, { bloco inferior``\n\n``0 início da linha, $ final da linha``\n\n``gg início do documento, G final do documento``\n\n``u transformar em caixa baixa, U tranformar em caixa alta``\n\n``yy copie a linha inteira``\n\n``. repita a última frase``\n\n``* busca pela palavra sob o cursor e move para a primeira ocorrência acima``\n\n``# busca pela palavra sob o cursor e move para a primeira ocorrência abaixo``\n\n``== reidenta a linha atual``\n\n`` guu linha atual para caixa baixa``\n\n`` gUU linha atual para caixa alta``\n\n\n\n### Modos\n\nPara completar a funcionalidade de um editor, o Vim introduz o conceito de Modos que são contextos onde o significado das palavras podem mudar.\n\n1 v *seleção*\n\n2 ESC *navegação*\n\n3 : *comandos*\n\n### Exemplos\n\nAlguns exemplos de utilização são:\n* **xp** swap de caracteres ae fica ea;\n* **rX** substitua o caractere no cursor por X;\n* **c/foo** altere o texto até a primeira ocorrência de foo;\n* **viwy** entre no modo de seleção, selecione dentro da palavra e copie. (copia a palavra sobre o cursor);\n* **0v}p** vá para o início da linha, entre em modo de seleção, suba um bloco e cole o conteúdo da memória;\n* **ci\"** troque o conteúdo dentro das aspas;\n* **yy3pESCgg.** copie a linha atual e cole-a 3 vêzes abaixo, entre no modo de navagação, vá até o início do arquivo e repita a operação (copie a linha atual e cole-a 3 vêzes abaixo);\n* **ESC3j12lv3wd** entre no modo de navegação, desça 3 linhas, vá 12 caracteres à esquerda, entre no modo de seleção, selecione 3 palavras e as delete;\n* **ESCggvGU** entre no modo de navegação, vá para o início do arquivo, entre no modo de seleção, vá para o final do arquivo, transforme o selecionado em uppercase (mude todo o documento para caixa alta).\n\n\n\nFica aqui exposto que, uma vez dominado a utilização básica do Vim, fica muito mais rápido fazer operações complexas através da \"linguagem\" Vim. \n\n##Vim no Sublime\n\nVim e Sublime são feitos para a mesma coisa: editar textos; em outras palavras são concorrentes. Contudo, existem plugins no Sublime para imitar a linguagem do Vim. O padrão é o Vintage - que vem integrado com o Sublime -  mas este sofre carência de funcionalidades. O melhor plugin que conheço de suporte à Vim é o Vintageous, dos recursos do Vim que conheço, nenhum falta à este plugin.\nO Vim no Sublime abre um leque de oportunidades novas quando utilizado junto com múltiplos cursores, mas isso é assunto para outro post. \n',1,'2014-09-18 00:00:00'),(26,'Programador: tipo Mago D&D','<p>&nbsp;</p>\n<p>Ja li &oacute;timas analogias entre a profis&atilde;o de programador e assuntos variados: <a href=\"http://eltonminetto.net/blog/2014/09/17/se-as-empresas-fossem-bandas-de-rock/\">programador rockstar</a>, <a href=\"https://blog.idrsolutions.com/2014/10/kind-programmer-rpg-class/\">programdor personagem de D&amp;D</a>, entre outras; neste post pretendo explorar meu pr&oacute;prio paralelo. Desde muito me parece que os programadores tem tudo a ver com os magos de Dungeons and Dragons - sim aqui &eacute; onde voce vai embora se for uma pessoa com o m&iacute;nimo de sanidade. Despois de filtrar os leitores, vou escopar - se me permite a licen&ccedil;a po&eacute;tica, estou falando do Mago da vers&atilde;o 3.5 de D&amp;D, cl&aacute;ssica em defini&ccedil;&atilde;o, tipo kernel 2.6.</p>\n<p>&nbsp;</p>\n<p>Todo o texto a seguir - o qual esteja formatado em it&aacute;lico - &eacute; composto por trechos do livro do jogador v3.5.</p>\n<p>&nbsp;</p>\n<p>De nada adianta for&ccedil;a, carisma ou agilidade, quando voc&ecirc; est&aacute; em frente ao computador escrevendo um c&oacute;digo... intelligence matters! O mesmo se aplica ao mago, este precisa de dedica&ccedil;&atilde;o, concentra&ccedil;&atilde;o e intelecto para lan&ccedil;ar seus feiti&ccedil;os. O aspecto crucial de um progamador qualquer &eacute; sua capacidade l&oacute;gica e, visto que a magia &eacute; por defini&ccedil;&atilde;o algo n&atilde;o natural - n&atilde;o l&oacute;gico - a associa&ccedil;&atilde;o talvez n&atilde;o seja perfeita. N&atilde;o obstante, em ambos os casos a intelig&ecirc;ncia &eacute; o fator predominante. <em>Os magos precisam de um grande tempo de dedica&ccedil;&atilde;o, lendo tomos antigos, decifrando runas, debatendo teorias m&aacute;gicas com seus colegas e praticando pequenas magias sempre que poss&iacute;vel</em>. J&aacute; o progamador, este passa muito tempo lendo livros de computa&ccedil;&atilde;o, fazendo tutoriais e estudando o c&oacute;digo alheio. Bons programadores tamb&eacute;m costumam frequentar eventos de software onde podem debater e aprender novas t&eacute;cnicas e estilos (magias). Outrossim, os dedicados est&atilde;o constantemente praticando seus feiti&ccedil;os na cria&ccedil;&atilde;o de algum projeto profissional ou hobby.</p>\n<p>&nbsp;</p>\n<p>No mundo de Dungeons and Dragons, bem como no contexto hist&oacute;rico, o grim&oacute;rio &eacute; o livro dos conhecimentos de um mago, contendo seu repert&oacute;rio de m&aacute;gicas. Em programa&ccedil;&atilde;o, s&atilde;o os scripts, bibliotecas, postagens, bookmarks e todas as demais pegadas criadas durante a caminhada do programador as quais o auxiliam em suas novas trilhas. <em>O mago tem que estudar seu grim&oacute;rio diariamente</em>; isto compara-se ao processo de consultar documenta&ccedil;&otilde;es sobre uma(s) fun&ccedil;&acirc;o(&otilde;es) ou API\'s que o programador necessita utilizar em seu projeto.&nbsp; <em>Muitas vezes os magos preferem se especializar em certos tipos de magia, tornando-os mais poderosos na &aacute;rea escolhida.</em> Seja uma linguagem ou em algum aspecto de programa&ccedil;&atilde;o, &agrave; dizer: seguranca, banco de dados, sistemas operacionais, os reis da programa&ccedil;&atilde;o dificilmente ser&atilde;o encontrados em lugares contrastantes; tipo MSDN e LinuxQuestions. O mago, conforme adquire experi&ecirc;ncia, torna suas magias mais eficazes: com maior alcance, maior dano e maior frequ&ecirc;ncia de utiliza&ccedil;&atilde;o. J&aacute; falei bastante sobre o crescimento do programador em minha tradu&ccedil;&atilde;o do <a href=\"/post/visualizar/00024/o-programador-fantasma-como-o-anonimato-esta-matando-sua-carreira-em-programacao\">Fantasma que Programa</a>. Um mago de n&iacute;vel um ter&aacute; um grim&oacute;rio contendo todas as magias de n&iacute;vel zero (exceto magias de sua(s) escola(s) proibidas). Escolas proibidas s&atilde;o tipo ferramentas e linguagens que o progamdor despreza, no meu caso: java, windows entre outros.</p>\n<p>&nbsp;</p>\n<p><em>Os magos tem uma certa inclina&ccedil;&atilde;o para a ordem em detrimento ao caos.</em> D&aacute; uma olhada na arquitetura de pastas de um programador para voc&ecirc; saber do que eu estou falando.</p>\n<p>&nbsp;</p>\n<p>No D&amp;D o \'range\' de pontos de vida de um mago varia de 1 a 4, dentre as classes, a menor do jogo. Isso combina muito com v&aacute;rios programadores que conhe&ccedil;o, muito comummente gordinhos e sedent&aacute;rios. Em outras palavras: a expectativa de vida tende a ser baixa.</p>\n<p>A classe mago permite v&aacute;rios idiomas iniciais (com possibilidade de expans&atilde;o); n&atilde;o &eacute; necess&aacute;rio pensar muito para deduzir que os melhores programadores s&atilde;o detentores de um variado repert&oacute;rio de linguagens - fator muito valorizado pelas grandes empresas.</p>\n<p>&nbsp;</p>\n<p><em>O mago pode invocar um familiar, um pequeno animal m&aacute;gico que o serve. Para muitos magos, seu familiar &eacute; seu &uacute;nico amigo genu&iacute;no. Com risco de redun&acirc;ncia, n&atilde;o </em>&eacute; segredo de que festa nerd &eacute; evento de software e jogos em rede :D. <em>Os magos est&atilde;o dispostos a trabalhar com membros de outras classes</em>; e<em>les preferem conjurar magias quando est&atilde;o progidos por guerreiros poderosos</em>. Nada melhor do que poder trabalhar somente na sua API, tranquilo por saber que o frontend vai dar conta da interface.</p>\n<p>&nbsp;</p>\n<p>Concluindo...</p>\n<p>&nbsp;</p>\n<p>Espero por meio deste post ter consolidado meu argumento sobre o assunto; estrangeirando: ter feito meu ponto.&nbsp;Idiossincrasias &agrave; parte, acredito que podemos ao menos fazer aforimos quanto a inevit&aacute;vel condi&ccedil;&atilde;o l&oacute;gica respeit&aacute;vel e avidez por conhecimento que todo o bom programador e o t&iacute;pico m&aacute;gico de Dungeon and Dragons compartilham.</p>\n<p>Talvez voc&ecirc; seja um programador (e um &oacute;timo programador) e n&atilde;o se enquadre do indiv&iacute;duo que aqui descrevo, procurei dar &ecirc;nfase ao programador esteriotipado o qual me identifico em muitos aspectos. Agora, se voc&ecirc; n&atilde;o se encaixa em nenhum dos itens acima mencionados, bem, o talvez &eacute; BEM grande.</p>\n<p>&nbsp;</p>\n<p><strong>Atualiza&ccedil;&atilde;o:</strong></p>\n<p>Encontrei um sistema operacional POSIX que combina perfeitamente com o aqui exposto: <a href=\"http://sorcerer.silverice.org/img.php\">Sorcerer</a>. Entre seus recursos est&atilde;o inclusos:</p>\n<ul style=\"list-style-type: undefined;\">\n<li>Comando instalador chamado cast</li>\n<li>Um desinstalador chamado dispelling</li>\n<li>Um cat&aacute;logo de software chamado grimoire, entre outros</li>\n</ul>',1,'2014-11-20 00:00:00'),(27,'A Paisagem Moral, Harris - Breves impressões','Hoje concluí a leitura do livro A Paisagem Moral de Sam Harris. Mais uma\nvez o autor me surpreendeu, tocou em um assunto tabu com extrema\nelegância e coesão, IMHO acertando em cheio em suas premissas e\ninferências. De leitura não tão acessível como suas obras sobre o novo\nateísmo, A Paisagem Moral tem um teor científico e, ao menos em parte,\nmarcado pela bagagem técnica do neurocientista.\n\n \n\nA tese central do livro pode ser sintetizada na seguinte passagem:\n\nA moralidade e os valores dependem da existência de mentes conscientes -\ne especificamente do fato de que tais mentes podem experimentar várias\nformas de bem-estar e sofrimento neste universo. As mentes conscientes e\nseus vários estados são fenômenos naturais, é claro, totalmente presos\nàs leis da natureza (quaisquer que sejam elas). Portanto deve haver\nrespostas certas e erradas a questões sobre moralidade e valores que\npotencialmente recaiam no escopo da ciência. Sob esse ponto de vista,\nalgumas pessoas e culturas estão certas (em maior ou menor grau) e\noutras estarão erradas quanto ao que consideram importante na vida.\n\n \n\nSegue uma de minhas passagens preferidas:\n\nO que significaria para um casal decidir que deveriam ter um filho?\nProvavelmente significa que eles acham que seu bem-estar tenderá a\ncrescer por terem trazido mais uma pessoa ao mundo; também deveria\nsignificar que esperam que seu filho tenha uma vida que, na média, valha\na pena ser vivida. Se não esperassem essas coisas, é difícil imaginar\npor que desejariam uma criança.\n\nPorém, a maioria das pesquisas sobre felicidade sugere que as pessoas\nna  verdade ficam menos felizes após terem filhos e só voltam a se\naproximar de seus níveis prévios de felicidade depois que os filhos saem\nde casa. Digamos que você conheça essas pesquisas, mas imagina que seu\ncaso será uma exceção. Aí, é claro, outro conjunto de pesquisas mostrará\nque a maioria das pessoas acredita que é exceção a regras desse tipo:\nnão existe nada mais comum do que achar que você é acima da média em\ninteligência, sabedoria, honestidade, etc. Mas você também conhece essas\npesquisas e nada disso o surpreende. Talvez, no seu caso, todas as\nexceções sejam verdade e você venha a ser um pai ou uma mãe tão feliz\nquanto espera ser. Porém, um estudo famoso sobre o sucesso humano sugere\nque uma das formas mais certeiras de uma pessoa diminuir sua\ncontribuição à sociedade é formar uma família. Como você veria sua\ndecisão de ter um filho se soubesse que todo o tempo que passou trocando\nfraldas e brincando de Lego o impediria de encontrar uma cura para o mal\nde Alzheimer que na realidade estava bem ao seu alcance?\n\n \n\nEssas não são perguntas vazias. Mas tampouco são o tipo de pergunta a\nque alguém poderia responder. A decisão de ter um filho  sempre poderá\nser tomada no contexto de expectativas razoáveis (e não tão razoáveis)\nsobre o bem-estar futuro de todas as partes envolvidas. Parece-me que\npensar dessa forma é, mesmo assim, uma maneira de contemplar a paisagem\nmoral.\n\n \n\nMesmo que não consigamos conciliar perfeitamente a tensão entre\nbem-estar pessoal e coletivo, não há razão para achar que de modo geral\nestão em conflito. O vento certamente sopra na mesma direção. Não é nem\num pouco difícil vislumbrar as mudanças globais  que melhorariam a vida\nde todo o mundo: todos estaríamos melhor num mundo no qual gastássemos\nmenos os nossos recursos nos preparando para matar uns aos outros.\nDescobrir fontes de energia limpa, cura de doenças, avanços na\nagricultura e novas maneiras de facilitar a cooperação são objetivos\ngerais cujos esforços valem a pena. Temos todos os motivos para\nacreditar que persegui-los nos levará para o alto nas escarpas da\npaisagem moral.\n\n \n\nHarris tem como premissa fundamental para sua moralidade a busca pelo\nmaior nível de felicidade coletivo. Sendo o maior nível de sofrimento\ncoletivo o pior estado que a humanidade poderia estar e a felicidade\ngeral o melhor. Com isso em mente ele sugere uma analogia entre um campo\ncom picos e depressões como sendo os maiores e menores níveis de\nfelicidade coletiva, respectivamente - sua paisagem moral resumidamente.\nPor fim, argumenta que a ciência e o método científico ajudam a\nresponder as questões que surgem em nossa busca para alcançar altos\npicos na paisagem moral.\n\nEstou com preguiça de prosseguir; recomendo a leitura. ;)\n\n \n\n ',1,'2014-11-07 00:00:00'),(123,'The last responsible moment','Usually we are faced with decisions we have to make. But often this\ndecisions are not essential right when they appear.\n\nI\'m hear to defend that we delay this decisions the most we can to\ntake the decision.\n\nThis is because the nature of our operations - as software engineers,\nand as people living in a complex world - politics tend to change. Late\nare the moments when a great amount of requirements show up.\n\nSo the wisest thing to do is to wait until the last moment that you can\nact on the problem. The so called: last responsible moment. So chances\nare that we have the greater amount of knowledge one can get to do\nwhatever we need to.\n\nAs lazy as it may sound, this serves me well generally.',1,'2015-09-22 16:06:13'),(124,'From browser to test','',0,'0000-00-00 00:00:00'),(125,'Locales, locales...','This is a very tiny post, it\'s for me to remember about\nlocales. Don\'t matter which kind of Backend app one develop, if it\nwill run in more than one machine you MUST set the locale. I know,\nI know, how can any developer install an SO that is not in\nEnglish?! Don\'t ask me, put the setting.\n\nAnd this is the way of doing it:\n```\nini_set(\'intl.default_locale\', \'en-US\');\n```\n\nI decided to place it here to be able to avoid searching in the\nproject history for the notation when (not to far) it will be needed\nonce again.',1,'2015-09-23 11:22:08'),(29,'Sistema de plugins no Zend Framework 2','\n\nO Zend Framework 2 utiliza uma interessante estrutura de plugins\npara seus controladores que vale o trabalho de uma segunda análise.\nBasicamente se você implementar o método ***setPluginManager***\nem um controlador do tipo ***AbstractActionController*** ou\n***AbstractRestfulController*** é lhe garantido o acesso a um conjunto\nde plugins pré-fabricados e a possibilidade de injetar novos. O\nobjetivo deste post é criar uma estrutura similar para ser utilizada em\num outro conjunto de classes que possam se beneficiar de plugins.\n\nUm plugin é basicamente uma classe (ou conjunto de classes) que\nrealizam uma tarefa específica para um ou mais requisitante(s). Entre\nos plugins do zend Framework constam:\n\n - **AcceptableViewModelSelector** - Seletor de ViewModel\'s baseado\n - **em critérios do usuário FlashMessenger** - Um sistema de\n - **notificações para o usuário Forward** - Ajuda a construir\n - **um sistema *widgetizável* através de chamada de mais de um\n - **controller/action por requisição Identity** - Recupera uma\n - **instância da entidade de usuário (autenticado) Layout** -\n - **Auxilia em um conjunto de operações para o layout Params**\n - **- Acesso facilitado de parâmetros das mais diversas fontes\n - **PostRedirectGet** - Tenta minimizar a duplicação de requisições\n - **post Redirect** - Simplifica o processo de redirect (utilizando o\n - **sistema de rotas zf2) Url** - Gerador de URL\'s\n\nPara utilizar algum plugin em um controlador basta chamá-lo em uma das\nseguintes formas:\n\n```\n$plugin = $this->plugin(\'identity\');\n//ou\n$plugin = $this->identity();\n```\nEsta forma de trabalhar é interessante pois ajuda a desacoplar código;\njá vi muito código de mentores da comunidade com coisas do tipo:\n\n```\nclass Budget\n{\n...\n    public function getIdentity($params)\n    {\n        return $this->getServiceLocator()->get(\'MyNamespace\\Service\\User\')->getIdentity();\n    }\n...\n}\n``` Essa forma de trabalhar está longe de condizer com os padrões\n[SOLID](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\n).\n\n``S``ingle Responsability Principle - Budget não está mas cuidando\nexclusivamente de orçamentos, agora virou uma via para pegar\nidentidades de usuários!\n\n``O``pen Closed Principle - este princípio - a meu ver - não se\naplica;\n\n``L``iskov substitution principle - como este método é usado como\num facilitador ele acaba quebrando a interface do objeto (tudo bem se\n```getIdentity``` for privado), certamente os objetos vão continuar a\ncompartilhar sua interface herdada mas foi adicionada complexidade a uma\nclasse que pode ou não ser herdada, em outras palavras a substituição\nfica relativizada;\n\n``I``nterface segregation principle - Se ```getIdentity``` estiver em\numa interface o problema em potencial da substituição fica resolvido\nmas não é o caso geralmente;\n\n``D``ependency inversion principle - n. a.\n\n\nCom isso em vista, especialmente o problema da responsabilidade única,\nme parece urgente a busca por uma alterantiva mais elegante.\n\n\n---\n\nNo projeto que desenvolvo, surgiu a necessidade de algo do tipo depois\nde os serviços (classes centrais da lógica de negócio) começarem a\nimplementar um conjunto significante de interfaces para atenderem seus\nmais variados propósitos. Havia uma interface para injetar o serviço\nde traduções, outra para o identity, outra para cache e assim vai.\nEste problema foi solucionado herdando de ```AbstractPluginManager```\nem ```AbstractService``` e configurando os plugins adequadamente.\nTalvez uma alternativa ainda melhor (em questões de OO) seja injetando\numa instância de uma classe concreta de ```AbstractPluginManager```,\nmas com injeção também haveria uma leve perda de performance , uma\nquestão de trade-off\'s.\n\n\n#### O caminho da herança - ServiceAbstract como Gerenciador de Plugins\n```php\n<?php\n\nnamespace Core\\Service;\n\nuse Zend\\ServiceManager\\ServiceManager;\nuse Zend\\ServiceManager\\ServiceManagerAwareInterface;\nuse Zend\\ServiceManager\\AbstractPluginManager;\n\nabstract class Service extends AbstractPluginManager implements ServiceManagerAwareInterface\n{\n    ...\n\n    /**\n     * plugin factories\n     * @var array\n     */\n    protected $factories = [\n        \'identity\' => \'Core\\Service\\Plugin\\IdentityFactory\',\n        \'translate\' => \'Core\\Service\\Plugin\\TranslateFactory\',\n        \'cache\' => \'Core\\Service\\Plugin\\CacheFactory\',\n    ];\n    \n    /**\n     * validate a  plugin\n     */\n    public function validatePlugin($plugin)\n    {\n        if ($plugin instanceof Plugin\\PluginInterface) {\n            return;\n        }\n\n        throw new \\InvalidArgumentException(sprintf(\n            \'Plugin of type %s is invalid; must implement %s\\Plugin\\PluginInterface\',\n            (is_object($plugin) ? get_class($plugin) : gettype($plugin)),\n            __NAMESPACE__\n        ));\n    }\n\n    /**\n     * Method overloading: return/call plugins\n     *\n     * If the plugin is a functor, call it, passing the parameters provided.\n     * Otherwise, return the plugin instance.\n     *\n     * @param  string $method\n     * @param  array  $params\n     * @return mixed\n     */\n    public function __call($method, $params)\n    {\n        $plugin = $this->get($method);\n        if (is_callable($plugin)) {\n            return call_user_func_array($plugin, $params);\n        }\n\n        return $plugin;\n    }\n}\n```\nAbstractPluginManager define um método abstrato o: ```validatePlugin```\nque deve ser implementado por seus filhos, neste caso validei\nse os plugins implementam a interface que defini para eles\n```Plugin\\PluginInterface```. Além da interface a implementar, existem\ntrês variáveis relevantes a criação de plugins\n\n - **AbstractPluginManager::$factories** Recebe um array com os nomes\n - **AbstractPluginManager::$de Factories que retornam um plugin\n - **AbstractPluginManager::$invokables** Recebe um array com os nomes\n - **AbstractPluginManager::$de Plugins que podem ser instanciados sem\n - **AbstractPluginManager::$a ajuda de uma factory, não utilizei\n - **AbstractPluginManager::$nos exemplos pois todos os serviços que\n - **AbstractPluginManager::$implementei necessitam de uma dependência\n - **AbstractPluginManager::$externa (e não pretendo falhar quando a\n - **AbstractPluginManager::$SOLI(D), D especialmente).\n \nPara criar um invokable:\n```php\n	protected $aliases = [\n		\'identity\' => \'\\Core\\Service\\Plugin\\Identity\'\n	];\n```\n \n - **AbstractPluginManager::$aliases** Servem para dar apelidos aos\nplugins (por default os plugins são nomeados de acordo com o nome de\nsuas classes)\n\nPara criar um alias:\n```php\n	protected $aliases = [\n		\'identity\' => \'useridentity\'\n	];\n```\n(A partir de então ```$this->identity()``` e $this->useridentity() ``` fazem a mesma coisa )\n\nO método ```__call``` é uma conveniência que nos possibilita\nchamar os plugins como se eles fossem membros da classe. A partir\nde então ```$this->identity()``` tem o mesmo resultado de\n``$this->get(\'identity\')``.\n\n\n####Uma interface para os plugins\n```php\n<?php\n\nnamespace Core\\Service\\Plugin;\n\n/**\n * base service plugin signature\n *\n * @category Application\n * @package  Service\n * @author   Jean Carlo Machado <contato@jeancarlomachado.com.br>\n */\ninterface PluginInterface\n{\n}\n```\nMesmo deixando a interface vazia é bom depender em abstrações, sendo assim a mantive. \n\n***Nota***\nO método ``__invoke()`` está sendo utilizado em todos os plugins\nexemplificados abaixo mesmo assim não faz parte da interface. Em\nplugins com múltiplas intenções (ex: FlashMessenger) um método\nprincipal como o ```__invoke``` sugere um objeitvo principal que pode\nnão ser verdadeiro.\n\n####Plugin Identity\n\n```php\n<?php\n\nnamespace Core\\Service\\Plugin;\n\n/**\n * identity plugin\n *\n * @category Application\n * @package  Service\n * @author   Jean Carlo Machado <contato@jeancarlomachado.com.br>\n */\nclass Identity implements PluginInterface\n{\n    protected $authenticationService;\n\n    /**\n     * Retrieve the current identity through the auth service\n     *\n     * @return Application\\Model\\User\n     */\n    public function __invoke($token)\n    {\n        return $this->authenticationService->getIdentity($token);\n    }\n\n    public function getAuthenticationService()\n    {\n        return $this->authenticationService;\n    }\n\n    public function setAuthenticationService($authenticationService)\n    {\n        $this->authenticationService = $authenticationService;\n\n        return $this;\n    }\n}\n```\nOBS: Utilizo o método mágico ``__invoke`` para executar a\nfuncionalidade do plugin sem precisar utilizar métodos.\n\n####Factory Identity\n\n```php\n<?php\n\nnamespace Core\\Service\\Plugin;\n\nuse Zend\\ServiceManager\\FactoryInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\n\n/**\n * factory for identity plugin\n *\n * @category Application\n * @package  Service\n * @author   Jean Carlo Machado <contato@jeancarlomachado.com.br>\n */\nclass IdentityFactory implements FactoryInterface\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function createService(ServiceLocatorInterface $serviceLocator)\n    {\n        $services = $serviceLocator->getServiceLocator();\n        $helper = new Identity();\n        if ($services->has(\'Application\\Service\\Auth\')) {\n            $helper->setAuthenticationService($services->get(\'Application\\Service\\Auth\'));\n        }\n\n        return $helper;\n    }\n}\n```\nO importante aqui é implementar o ```FactoryInterface```, a partir de\nentão o ``AbstractPluginManager`` se responsabiliza por injetar uma\ninstância de ServiceManager na chamada ```createService``` que pode ser\nutilizado para incluir as dependências necessárias no plugin.\n\n\n###Plugin Cache\n```php\n<?php\n\nnamespace Core\\Service\\Plugin;\n\n/**\n * cache plugin\n *\n * @category Application\n * @package  Service\n * @author   Jean Carlo Machado <contato@jeancarlomachado.com.br>\n */\nclass Cache implements PluginInterface\n{\n    protected $cacheService;\n\n    /**\n     * Retrieve the cache service\n     *\n     * @return Zend\\Cache\\Storage\\Adapter\\AbstractAdapter\n     */\n    public function __invoke()\n    {\n        return $this->cacheService;\n    }\n\n    public function getCacheService()\n    {\n        return $this->cacheService;\n    }\n\n    public function setCacheService($cacheService)\n    {\n        $this->cacheService = $cacheService;\n\n        return $this;\n    }\n}\n\n```\nNo ```_invoke``` do plugin do cache retornei a própria instância de\nCache, para facitilitar, visto que normalmente diversas operações\nsão realizadas com esta classe em um serviço. Talvez o ideal seria\nimplementar as chamadas mais utilizadas no plugin em detrimento de\nretornar todo o objeto pois as interface dos plugins devem prezar a\nsimplicidade, segundo o SOL(I)D.\n\n---\n\nVocê ainda pode configurar o seu PluginManager para pegar os array\'s de\nconfiguração nos configs do Zend, e criar uma factory para injetar em\ncada atrituto. Pode também injetar dinamicamente plugins atravás do\nmétodo ``setService($serviceName)`` do seu gerenciador de plugins.\n\nNota: Se você olhar a implementação de PluginManager\nvocê notará que o mesmo herda suas configurações de\n``Zend\\ServiceManager\\ServiceManager``, sendo assim não abuse pois este\né um dos maiores objetos no Zend Framework2. Recomendo a estrutura\nsomente quando lidando com classes chave ao projeto.\n\n\nRecapitulando, o código fica muito mais organizado sem aqueles get*\'s\nfora de escopo pulando em cada classe importante do projeto.\n\n\nSugestões, comentários e críticas são sempre bem vindos.',1,'2014-12-04 00:00:00'),(28,'Configuração básica do Zend\\ViewManager','Algum tempo atrás tive que setar from scratch uma camada de view Zend 2  para meu ambiente de testes. A necessidade urgiu parar testar um serviço com envio de e-mails que utilizam templates para Zend 2.\nVou aprensentar minha solução aqui para que, caso alguém se depare com um problema congênere, não precise fazer sofrer com demasiadas pesquisas.\n\n\nPois bem, primeiras coisas primeiro. A camada de view do Zend Framework 2 é composta por vários componentes - estruturados independentemente para permitir extensão e múltiplos usos. A documentação do Zend Framework aponta os seguintes componentes:\n\n- Contedores de variáveis: guardam variáveis e callbacks para serem representados na view\n- Modelos de visão (view-models): armazenam Contedores de variáveis, especificam qual template será utilizado, e implementam o padrão de software (Composite)[https://en.wikipedia.org/wiki/Composite_pattern\\]\n- Renderizadores: dado um Modelo de Visão, provêm uma representação do mesmo para ser retornado. O Zend Framework disponibiliza três renderizadores padrão: \n1. PhpRenderer\n2. JsonRenderer\n3. FeedRenderer\n- Resolvedores: Utilizam de Strategies para mapear um template para um recurso que o Renderizador poderá consumir.\n- Estratégias de renderização\n- Estratégias de resposta\n\nEntão, basicamente, um processo de renderização Zend 2 se dá da seguinte forma:\nO Zend recebe uma requisição do usuário, ele faz todo o processamento prévio a view e\nA view do Zend 2 consiste em estratégias que mapeaiam as requisições para um renderizador e estratégias para injetar o resultado de uma renderização na resposta.\n\n$renderer = new \\Zend\\View\\Renderer\\PhpRenderer();\n\n        $translate = new \\Zend\\I18n\\View\\Helper\\Translate();\n        $translate->setTranslator(\n            (new \\Zend\\I18n\\Translator\\TranslatorServiceFactory())->createService($serviceLocator)\n        );\n\n        $helperPluginManager = new \\Zend\\View\\HelperPluginManager();\n        $helperPluginManager->setService(\'translate\', $translate);\n\n        $renderer->setHelperPluginManager($helperPluginManager);\n\n        $resolver = new \\Zend\\View\\Resolver\\AggregateResolver();\n\n        $renderer->setResolver($resolver);\n\n        $stack = new \\Zend\\View\\Resolver\\TemplatePathStack(array(\n            \'script_paths\' => array(\n                getenv(\'PROJECT_ROOT\'). \'/module/Application/view\',\n            )\n        ));\n\n        $map = new \\Zend\\View\\Resolver\\TemplateMapResolver([\n            \'email-layout\' => getenv(\'PROJECT_ROOT\'). \'/module/Core/view/layout/layout-email.phtml\'\n        ]);\n\n        $resolver->attach($stack);\n        $resolver->attach($map);\n\n        return $renderer;',0,'2014-11-22 00:00:00'),(30,'Dicas de Bash','Algumas dicas de Bash\n\n#Comandos:\n\n``lslogins``\n\n##Recode\n\n``recode - l``\n\nEx:\n\n``recode HTML..UTF-8 meu-post-com-html``\n\n#Criando log de comandos\n\n```\nscript my.terminal.session\n```\n\nDigite os comandos que você deseja\n\n```\n$ exit\n\n```\n\nPara ver:\n\n\n```\nless script my.terminal.session\n```\n\n---\n\nLocking a directory\n\nFor privacy of my data I wanted to lock down /downloads on my file server. So I ran:\n\nchmod 0000 /downloads\n\nThe root user can still has access and ls and cd commands will not work. To go back:\n\nchmod 0755 /downloads\n\n---\n\n#Restaurar o diretório /tmp\n\n```\nmkdir /tmp\nchmod 1777 /tmp\nchown root:root /tmp\nls -ld /tmp\n```\n\n#Get a reminder you when you have to leave\n\nIf you need a reminder to leave your terminal, type the following command:\n\n``\nleave +hhmm\n``\n\n#The variable CDPATH defines the search path for the directory containing directories:\n\n```\nexport CDPATH=/var/www:/nas10\n```\n\nNow, instead of typing cd /var/www/html/ I can simply type the following to cd into /var/www/html path:\n\n```\ncd html\n```\n\n#Copy file into multiple directories\n\nInstead of running:\n\ncp /path/to/file /usr/dir1\ncp /path/to/file /var/dir2\ncp /path/to/file /nas/dir3\n\nRun the following command to copy file into multiple dirs:\n\necho /usr/dir1 /var/dir2 /nas/dir3 |  xargs -n 1 cp -v /path/to/file\n\n\n#Quickly find differences between two directories\n\nThe diff command compare files line by line. It can also compare two directories:\n\nls -l /tmp/r\nls -l /tmp/s\n\n# Compare two folders using diff ##\ndiff /tmp/r/ /tmp/s/\n\n\n#Text formatting\n\nYou can reformat each paragraph with fmt command. In this example, I\'m going to reformat file by wrapping overlong lines and filling short lines:\n\nfmt file.txt\n\nYou can also split long lines, but do not refill i.e. wrap overlong lines, but do not fill short lines:\n\nfmt -s file.txt\n\n#Testar se o processo está rodando na interface gráfica\n\nÉ só testar a existência de uma variável exclusiva do X.\n\nif [ -n \"$DESKTOP_SESSION\" ]; then\n    /usr/bin/xmodmap -e \"keycode  62 = Insert NoSymbol Shift_R\"\nfi\n\n#Estragou as permissões do /tmp?\n\n```\nchmod -R go-rwx /tmp/* /tmp/.[!.]*\nchmod 777 /tmp/.X11-unix /tmp/.X11-unix/*\nchmod 1777 /tmp\n```\n\n#Seq\n\nUtilize o comando seq para trabalhar com sequências\n\n```\nseq 0 1000\n\n```\n\nUtilize parênteses para rodar comandos em um sub-shell.\n\n```\n(cd wharever; ./command-in-wharever)\n\n```\n---\n\n``type -a command`` Para saber onde algum executável se encontra.\n\ntype: type [-afptP] name [name ...]\n    For each NAME, indicate how it would be interpreted if used as a\n    command name.\n\n    If the -t option is used, `type\' outputs a single word which is one of\n    `alias\', `keyword\', `function\', `builtin\', `file\' or `\', if NAME is an\n    alias, shell reserved word, shell function, shell builtin, disk file,\n    or unfound, respectively.\n\n    If the -p flag is used, `type\' either returns the name of the disk\n    ile that would be executed, or nothing if `type -t NAME\' would not\n    return `file\'.\n\n    If the -a flag is used, `type\' displays all of the places that contain\n    an executable named `file\'.  This includes aliases, builtins, and\n    functions, if and only if the -p flag is not also used.\n\n    The -f flag suppresses shell function lookup.\n\n    The -P flag forces a PATH search for each NAME, even if it is an alias,\n    builtin, or function, and returns the name of the disk file that would\n    be executed.\ntypeset: typeset [-afFirtx] [-p] name[=value] ...\n    Obsolete.  See `declare\'.\n\n\n##Referências\n\n1. http://www.cyberciti.biz/open-source/command-line-hacks/20-unix-command-line-tricks-part-i/',0,'2015-01-13 00:00:00'),(31,'Sockets Linux','',0,'0000-00-00 00:00:00'),(32,'XDebug','Neste post pretendo explorar se é bom ou não utilizar o Xdebug com php.\n\n\nXdebug is a PHP extension that was written and is maintained by Derick Rethans. It provides debugging and profiling capabilities.',0,'2015-02-10 00:00:00'),(33,'Expressões Regulares','Defender que expressões regulares são simples.',0,'2015-03-05 00:00:00'),(35,'Zend Framework 2 Traits','Zend Framework 2 starting from version 2.5 comes with a handy collection of traits that with no doubt could enhance the workflow of the majority of developers. For those who do not program in ZF2 it is a valuable asset as well - it may serve as an example of naming convention (at last!) and as an application of the so called horizontal reuse in PHP.\n\n```\nack -g \"Trait\" vendor/zendframework/\nzend-inputfilter/src/InputFilterAwareTrait.php\nzend-code/src/Generator/TraitGenerator.php\nzend-code/src/Generator/TraitUsageInterface.php\nzend-code/src/Generator/TraitUsageGenerator.php\nzend-stdlib/src/Hydrator/HydratorAwareTrait.php\nzend-stdlib/src/Guard/NullGuardTrait.php\nzend-stdlib/src/Guard/AllGuardsTrait.php\nzend-stdlib/src/Guard/ArrayOrTraversableGuardTrait.php\nzend-stdlib/src/Guard/EmptyGuardTrait.php\nzend-log/src/LoggerAwareTrait.php\nzend-eventmanager/src/ListenerAggregateTrait.php\nzend-eventmanager/src/EventManagerAwareTrait.php\nzend-servicemanager/src/MutableCreationOptionsTrait.php \nzend-servicemanager/src/ServiceLocatorAwareTrait.php\nzend-form/src/LabelAwareTrait.php \nzend-form/src/FormFactoryAwareTrait.php\nzend-i18n/src/Translator/TranslatorAwareTrait.php\n\n```\n\n**OBS: this is not an exaustive list, these are only from a little collection of ZF2\'s modules that I use currently.**\n\n\nThose with at least a bit of experience of ZF2 probably already faced some */AwareInterface$/* usage; this is Zend\'s way of asserting [design by contract](https://en.wikipedia.org/wiki/Design_by_contract).\n\n\nBelow is an example of utilization of the *ServiceLocatorAwareTrait*. \n\n```\n<?php\n\nnamespace Core\\Service;\n\nuse Zend\\ServiceManager\\ServiceLocatorAwareInterface;\nuse Zend\\ServiceManager\\ServiceLocatorAwareTrait;\n\nclass Metadata implements ServiceLocatorAwareInterface\n{\n    use ServiceLocatorAwareTrait;\n}\n\n```\n\n*OBS: This pattern of usage applies as well for all the other AwareTraits listed above*.\n\nTo maintain the contract the interface *ServiceLocatorAwareInterface* must remain. Anyway now you are free from implementing it. \n\nHere is the implementation of *ServiceLocatorAwareTrait* (there are bigger aware interfaces than this one):\n\n```\n    protected $serviceLocator = null;\n\n    public function setServiceLocator(ServiceLocatorInterface $serviceLocator)\n    {\n        $this->serviceLocator = $serviceLocator;\n\n        return $this;\n    }\n\n    public function getServiceLocator()\n    {\n        return $this->serviceLocator;\n    }\n```\n\n--- \n\nBy browsing this files you note a worth mentioning pattern: almost all of them are followed with an respective interface. \n\nThe exceptions are:\n- *Generators*: these aren\'t event traits, they are classes for trait generation;\n- *Guards*:  for argument type validation -  which is a very recent resource (introduced on 2.3) - albeit I\'m not certain if it will remain relevant with PHP 7.\n\nSo keep your traits near it\'s interfaces!\n\nThat\'s it, let me know if it was useful to you.',1,'2015-06-24 22:00:00'),(36,'Dicas doctrine','Performance\n\nCache:\n\nUtilizar consultas DQL com parâmetros.\n\nÉ recomendado utilizar APC com o ORM.\n\nDoctrine é dividido em 3 partes principais:\n\nCommon\nDBAL (includes Common)\nORM (includes DBAL+Common)\n\n#Terminologia\n\n- Entidade: É um leve e persistente objeto de domínio.\nEntidades não podem ser final ou conterem médodos final.\nTodas as propriedades da entidade precisam sem protegidas ou privadas (de outra foram o lazy-loading pode não funcionar corretamente).\n\nO doctrine deve ser visto como uma ferramenta para sincronizar objetos em memória com o banco de dados em bem definidas unidades de trabalho.\n\n\nThe identity map has a second use-case. When you call EntityManager#flush Doctrine will ask the identity map for all objects that are currently managed. This means you don’t have to call EntityManager#persist over and over again to pass known objects to the EntityManager. This is a NO-OP for known entities, but leads to much code written that is confusing to other developers.\n\nThe following code WILL update your database with the changes made to the Person object, even if you did not call EntityManager#persist:\n\n<?php\n$user = $entityManager->find(\"Person\", 1);\n$user->setName(\"Guilherme\");\n$entityManager->flush();\n\n\nNow whenever you call EntityManager#flush Doctrine will iterate over the Identity Map and for each object compares the original property and association values with the values that are currently set on the object. If changes are detected then the object is queued for a SQL UPDATE operation. Only the fields that actually changed are updated.\n\nThis process has an obvious performance impact. The larger the size of the UnitOfWork is, the longer this computation takes. There are several ways to optimize the performance of the Flush Operation:\n\nMark entities as read only. These entities can only be inserted or removed, but are never updated. They are omitted in the changeset calculation.\nTemporarily mark entities as read only. If you have a very large UnitOfWork but know that a large set of entities has not changed, just mark them as read only with $entityManager->getUnitOfWork()->markReadOnly($entity).\nFlush only a single entity with $entityManager->flush($entity).\nUse Change Tracking Policies to use more explicit strategies of notifying the UnitOfWork what objects/properties changed.\n\n\n#Proxies\n\nYou\'re displaying a list of latest 25 articles and you want to display a details of the first one. Each of them contain a large amount of text, so fetching all that data would be a waste of memory. That\'s why you don\'t fetch unnecessary data.\n\nSELECT a.title, a.createdAt\nFROM Entity\\Article a\nORDER BY a.createdAt DESC\nLIMIT 25\n\n$isFirst = true;\nforeach ($articles as $article) {\n    echo $article->getTitle();\n    echo $article->getCreatedAt();\n\n    if ($isFirst) {\n        echo $article->getContent(); // Article::content is not loaded so it is transparently loaded\n                                     // for this single article.\n\n        $isFirst = false;\n    }\n}',0,'2014-12-09 00:00:00'),(37,'O preço da gambiarra','Se você é um programador por dois ou três anos, você provavelmente já\nfoi atrasado de forma significativa por um código mal feito de outra\npessoa. Se você é um programador por mais de dois ou três anos você\nprovavelmente já atrasou alguém por código mal feito. O grau de atraso\npode ser significante. Durante o período de um ano ou dois, times que\neram rápidos no início de um projeto podem ver-se movendo ao passo do\ncaramujo. Cada modificação no código quebra outras duas ou três partes\ndo programa. Nenhuma mudança é trivial. Cada adição ou modificação no\nsistema requer que a massa confusa, os remendos e as amarras sejam\n\"entendidas\" para que mais confusão, remendos e amarras sejam\nadicionados. Com o tempo a gambiarra se torna tão grande, tão profunda e\ntão alta que não se consegue mais limpar. Não há nenhuma saída.\n\nEnquanto a gambiarra é produzida, a produtividade do time continua a\ncair*,* assimptotaticamente aproximando-se de zero. Enquanto a\nprodutividade decai, os gerentes fazem a única coisa que podem;\nadicionam mais equipe para o projeto na esperança do aumento da\nprodutividade. Mas aquela nova equipe não é versada no design do\nsistema. Eles não sabem a diferença entre as mudanças que comportam o\nintento do design e as mudanças que o inibem.\n\nLogo, eles, e todos no time, estão sob uma horrível pressão para\naumentar a produtividade. Então todos eles fazem mais e mais gambiarras,\ndirigindo a produtividade para zero.\n\n**O grande redesign dos céus**\n\nEventualmente o time se rebela. Eles informam o gerente que não podem\ncontinuar a desenvolver aquele código odioso. Eles demandam um design\nnovo. Os gerentes não querem gastar os recursos em um novo sistema, mas\neles não podem negar que a produtividade está terrível. Eventualmente\neles se entregam às demandas dos desenvolvedores e autorizam o grande\nredesign dos céus.\n\nUm novo time ninja é selecionado. Todos querem fazer parte daquele lindo\nprojeto virgem. Eles começam novamente e criam algo verdadeiramente\nbelo. Mas apenas os melhores e mais brilhantes são escolhidos para o\ntime ninja. Todos os demais devem continuar a manter o projeto antigo.\n\nAgora os dois times estão em uma corrida. O time ninja precisa construir\num novo sistema que faz tudo o que o antigo faz. Não apenas isso, eles\nprecisam se manter-se atualizados nas modificações que continuamente são\nfeitas no sistema antigo. Os clientes não vão migrar de sistema até que\no novo faça tudo que o antigo fazia.\n\nEssa corrida pode levar um longo tempo. Eu já vi isso levar 10 anos. E,\nquando o novo sistema está finalmente pronto, os membros do time ninja a\nmuito se foram, e os novos membros demandam que um redesign porque o\natual está uma gambiarra.\n\nSe você já experienciou ao menos uma pequena parte desta história que eu\nacabei de contar,  então você já sabe que gastar tempo mantendo o código\nlimpo não só vale à pena; é uma questão de sobrevivência profissional.\n\nVocê já perambulou por alguma gambiarra tão grave que lhe custou semanas o\nque deveria ter sido feito em horas? Você viu já algo que deveria ser\numa linha de modificação tomar, pelo contrário, centenas de linhas nos\nmais variados módulos? Esses sintomas são muito comuns.\n\nPor que isso acontece com código? Porque bom código apodrece tão\nrapidamente? Nós programadores temos diversas desculpas para isso. Nós\nreclamamos que o design mudou de uma forma inesperada e degradou o\nconceito inicial. Nós culpamos os sprints que são muito apertados.\nAcusamos os gerentes estúpidos e os clientes intolerantes. Mas a culpa,\nquerido programador, é nossa. Nós não somos profissionais o suficiente.\n\nIsso pode ser difícil de engolir. Como pode essa gambiarra ser minha\nculpa? E quanto aos requisitos? E quanto ao sprint? E os gerentes? Eles\nnão tem parte na culpa?\n\nNão. Os gerentes procuram conosco as informações que eles precisam para\nprometer algo ao cliente. E, mesmo que eles não procurem, não nos cabe\nficarmos quietos e não informar-lhes o que pensamos. Os usuários nos\nprocuram para validar o modo que os requerimentos serão dispostos no\nsistema. Os gerentes de projeto nos indagam sobre os prazos do sprint.\nNós estamos profundamente engajados no planejamento do projeto e\ncompartilhamos uma grande carga de responsabilidade por qualquer\neventual falha. Especialmente se essas falhas estão relacionadas a\ncódigo ruim.\n\n\"Espere!\", você diz. \"Se eu não fizer o que meus gerentes dizem eu vou\npara a rua\". Provavelmente não. A maioria dos gerentes querem a verdade,\nmesmo que eles não aparentem gostar dela. A maioria dos gerentes querem\nbom código, mesmo que eles sejam obcecados com o prazo. Eles podem\ndefender o prazo e os requisitos com paixão; mas esse é o trabalho\ndeles. *Seu trabalho é defender o código com o mesmo entusiamo*.\n\nPara consolidar o argumento; e se você fosse um médico e tivesse um\npaciente que demandasse que você parasse com o processo\nde lavar as mãos ao preparar-se  para a cirurgia, alegando que isto toma\nmuito tempo? Claramente o paciente é o chefe; e ainda assim o médico\ndeve recusar-se absolutamente. Por quê? Porque o médico sabe mais do\nque o paciente sobre os riscos que doença e infecção. Não seria\nprofissional para o médico concordar com a requisição do paciente.\n\nDa mesma forma, não é profissional para os programadores se renderem à\nvontade dos gerentes que não entendem os riscos da gambiarra.\n\nProgramadores se veem em um dilema de valores fundamentais. Todos os\ndesenvolvedores com mais do que uns poucos anos de experiência sabem que\ngambiarras anteriores os atrasam. E ainda todos os desenvolvedores\nsentem a pressão de fazer gambiarras para cumprir os prazos. Em outras\npalavras, eles não tomam o tempo para avançar rápido.\n\nVerdadeiros profissionais sabem que a segunda parte do dilema é errada.\nVocê não vai cumprir o prazo  fazendo gambiarra. De fato, a gambiarra vai te\natrasar instantaneamente e vai te fazer perder o prazo. A única forma de\ncumprir o prazo - a única forma de ir rápido - é mantendo o código tão\nlimpo quanto o possível a todo o momento.\n\nEste texto é uma tradução livre tirada do livro **Clean Code: A Handbook\nof Agile Software Craftmanship**.',1,'2014-12-12 00:00:00'),(40,'Dicas de aprendizado','null',0,'2014-12-21 00:00:00'),(42,'A ciência e suas contradições',' problema da ciência não são os cientistas ou o método; quem dá a notícia.\n\nOs revisores l&ecirc;em por cima e d&atilde;o not&iacute;cias abertas a interpreta&ccedil;&atilde;o:<\n\nUMa not&iacute;cia:\n\nO ovo faz mal\n\nOutra not&iacute;cia\n\nO ovo faz bem\n\nA realidade\n\nQuando determinada subst&acirc;ncia X entra em contato com outra libera algo que faz mal para o sistema x do ser humano\n\nA realidade\n\nQuando determinada subst&acirc;ncia Y entra em contato com outra libera algo que faz mal para o sistema W do ser humano beneficiando o x\n\n\n\nA ci&ecirc;ncia n&atilde;o mudou, n&atilde;o houve contradi&ccedil;&atilde;o cient&iacute;fica. O problema s&atilde;o as fontes que intepretam tudo com uma vis&atilde;o estrita e pr&aacute;tica.\n\n\n\nAfinal, o que &eacute; a ci&ecirc;ncia?\n\n\n\nRessaltar a necessidade de algo ser reproduz&iacute;vel\n\n\n\nPorqu&ecirc;?\n\nPorque as pessoas gostam.\n\n\nEnt&atilde;o n&atilde;o venha dizer que a ci&ecirc;ncia est&aacute; errada quem est&aacute; errado &eacute; voc&ecirc; que consome coisas mastigadas, perfumadas e mentirosas sobre o trabalho cient&iacute;fico.\n\n\n\nRefer?ncias\n\n\n\n//utilizar as afirma&ccedil;&otilde;es desta reportagem em compra&ccedil;&atilde;o a realidade do trabalho.\n\nhttp://www.scientificamerican.com/article/how-to-grow-stronger-without-lifting-weights/?WT.mc_id=SA_Facebook\n\n\n\nCiência é uma empreitada colaborativa\n\nA literatura tenta dar a impressão que a ciência é feita de grandes pulos. Mas\na realidade é que ela é composta de passos de bebê. A impressão que dá quando\nvocê lê revistas e noticiários de ciência  que todos são Eistein, toda a semana\ntem um novo Eistein. \n\nAté existe uma mínima parcela de grandes pulos mas estes grandes pulos não são\nfeitos por idivíduos trabalhando sozinhos. Eles dependem\ninteramente, não apenas do vasto número de engenhiros\n e outras pessoas trabalhando em seus laboratórios e universidades, mas pelos outros colaboradores também. \n\nEu faço ciência, eu gosto de pensar que faço. E faço através da colaboração de\n estudandes, pós doutorados e  múitas  pessoas pelo mundo. E essa é a parte da ciência que nós celebamos, ou\ntentamos celebrar. Ciência é celebrável por ser uma atividade humana que\ndemonstra que é possível sobrepujar barreiras de culturas, linguas, religiões.\n\nO exemplo que eu uso frequentemente é o Large Hardron Collider LHD. A cateral\ngótica do século 21. A catedral gótica foi construída através de centenas de\nanos por milhares de artesões trabalhando em dedicação familiar. O LHC foi\nconstruído em décadas por milhares de físicos, centenas de países falando\ndezenas de idiomas, com várias religi?os diferenciadas. Mas todos falam o mesmo\nidioma: ciência. Ciência é a única area na atividade humana que demonstra  que\nas pessoas podem trabalhar juntas com um objetivo em comum. Cada um com uma\npequena responsabilidade. \nSeria razoável dar o prêmio nobel para pessoas do que para grupos.\n\n\nWe are just a million little gods causing rain storms turning every good thing to rust.',0,'2014-12-24 00:00:00'),(43,'GNU Screen','Comecei a utilizar o GNU Screen como terminal. Inicialmente eu tinha intenção\nde utilizá-lo para armazenar a sessão do meu aplicativo de IRC: Irssi. Não\nobstante, ele se revelou útil por uma série de outros motivos.\n\n- Guardar a sessão entre a interface gráfica e o console virtual;\n- Servir como motivador para eu não reiniciar a máquina;\n\nO screen funciona mantendo um *socket* sempre aberto...\n\n#Copiar e colar\n\n##Screen way\n\nPara copiar conteúdo com o Screen você precisa:\n1. Ctrl+a+[: entra em modo de cópia\n2. navegue ao início do texto com os comandos do vim\n3. enter: entra no modo de cópia\n4. navegue ao final da seleção com os comandos do vim\n5. enter: para sair do modo de cópia\n6. Ctrl+a+]: cola o conteúdo no local indicado na screen\n\nPara copiar para *clipboard* você precisa de um aplicativo de cópia como o\n``xsel``.\n\nDepois do passo 5 você roda o seguinte comando:\n\n``\ncat | xsel -b\n``\nem seguida o passo 6 para colar e o Ctrl+d para fechar o comando anterior.\n\nPronto, a área copiada está em seu *clippboard*\n\n##Modo tradicional\nObviamente você ainda pode copiar e colar com o botão intermediário do mouse - à moda Unix.\n\n##Comandos muito grandes\n\nQuando você utiliza o Screen - pose ser que se depare com problemas ao utilizar comandos de múltiplas linhas.\n\nRecomendo a utilização do caractere \\ para que você consiga usar o CR para digitar em muitas linhas',0,'2014-12-24 00:00:00'),(78,'Dicas Composer','Quando sua biblioteca simplesmente não funcionar (provavelmente proquê você mexeu em algo no vendor que não devia), o composer install não arruma e você não pode simplemente \ndar um um composer update. Nesse caso você pode fazer o seguinte para solucionar seu problema\n\n```\ncomposer update\ngit reset --hard HEAD\ncomposer install\n\n```',0,'2015-02-19 00:00:00'),(44,'Documentando APIs com o Swagger','\n#topicos\n- O swagger é agnóstico a liguagem\n- Ele não requer que o código seja reescrito\n- Você não precisa necessariamente depender de annotations\n\n- Com um arquivo swagger é possível gerar código para a linguagem alvo\n  utilizando um dos geradores disponíveis.\n  Linguagens suportadas são: PHP, Java, Javascript\n\n\n#Componentes\n##Server\nOnde fica hospedado os serviços e a url das documentações. A URL das\ndocumentações é o ponto de início do Swagger. A documentação contém uma\ndescrição em JSON dos recursos disponíveis.\n\n##Client\nÉ qualquer aplicação que quer consumir APIs no servidor. Para o cliente é dada\numa URL que aponta para a documentação da API e converte o JSON em um objeto\nque pode ser usado para chamar a API. Clientes estão disponíveis em um variado\nnúmero de linguagens tornando simples implementar uma API rest que foi\ndocumentada via swagger.\n\n##UI\nA interface do swagger (Swagger UI) serve como fonte de documentação e uma\nforma de os desenvolvedores testarem a API sem terem que escrever nenhum\ncódigo.\n\nA UI padrão pode ser instalada via npm com o comando:\n\n```\nnpm install -g swagger-ui\n```\n\n\n#Criando uma especificação Swagger\n\nA especificação é composta de dois arquivos\n\n- Listagem de recursos: Lista as APIs que estão disponíveis e concede uma breve\n  descrição de cada.\n- Descrição de API: Detalha cada API contido na listagem de recursos, este\n  arquivo contém informações sobre parâmetros, nomes de funções, valores\n  retornados e descrições de alto nível de como utilizar a API.\n\nExistem três formas de se criar uma especificação swagger:\n\n-Codegen: Utilizando de anotações no código faz-se a criação dos arquivos de\nespecificação\n\n-Automaticamente: Alguns servidores como o ``swagger-node-express`` e o\n``swagger-play`` criam as APIs e as especificações swagger ao mesmo tempo\n\n-Manualmente: Escrevendo o JSON manualmente.\n\n#estrutura',0,'2015-01-05 00:00:00'),(45,'Porquê referências em PHP é uma ideia ruim','#Intro\n\nMuitas pessoas são contra referências em PHP, mas a grande maioria não sabe\nexplicar o porquê de ser algo ruim. Confesso que sempre considerei uma\notimização desejável e este atrito de opiniões chegou ao ponto que resolvi\npesquisar à respeito para responder a questão definitivamente.\n\nVindo de C eu sempre tive o hábito de criar referências...\n\n#Conteúdo\n\n#&Referências \n\nhttp://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html',0,'2015-01-06 00:00:00'),(46,'Especificação do HTML5 ','null',0,'2015-01-06 00:00:00'),(47,'Dicas de escrita científica','Colocar as referências do livro de ciência que eu estou lendo.',0,'2015-01-06 00:00:00'),(48,'Metas 2015','Seguindo a indicação [deste post](http://www.hackcollege.com/blog/2015/01/02/resources-for-making-and-keeping-new-years-resolutions-as-a-student.html), resolvi tornar público meu conjunto de metas para 2015.\n\nTentei seguir as indicações que encontrei nas referências. Sendo assim, segue\num pequeno resumo do que tentei contemplar ao criar minha lista de metas: \n\n- Lista pequena;\n- Itens específicos e precisos;\n- Definir prazos;\n- Pedir ajuda; \n- Criar pressão externa (este post);\n\nSegue minha lista de metas:\n\n### Concluir e apresentar meu trabalho de conclusão\nEstou para me formar já a dois anos, faltando apenas a apresentação do trabalho\nde conclusão. Se não for este ano, não vai mais; visto que o curso é federal e\ntem um prazo máximo para ser cumprido. Dessa forma este é a meta número um e\ntodas as demais são opcionais. Posso apresentar o trabalho no primeiro ou no\nsegundo semestre, vou tentar **com minha alma** apresentar no primeiro mas, de\nqualquer forma, o semestre não é algo imprescindível; o mais importante é que\nfique algo muito bom. Para que eu consiga entregar no prazo, pretendo me\ndedicar no mínimo 30 minutos por dia útil em sua confecção; e ser extremamente\nverboso nas reuniões com meu orientador.\n\n### Passar na certificação LPI1\nJá fiz as provas uma vez e não passei por pouco (duas questões na segunda\nprova aproximadamente). Escolhi me certificar LPI antes de PHP pois já tenho\nexperiência com a prova e sei que da última vez - quando eu tinha bem menos\nexperiência - eu não passei por muito pouco. Sendo assim, acredito que não\nprecisarei de muito esforço para passar. Esta prova quero fazer ainda no\nprimeiro semestre para não ter que esperar pelo resultado em 2016 e\nabrir brecha para a extrapolação da meta.\n\n### Aprender PERL\nTodo o programador Unix-like fodão sabe PERL so... Uma linhagem por ano é algo\nessencial para mim. Já sei (ou soube) PHP, C++/C, Bash, Java, Javascript e Assembler da\nMicrochip. PERL é uma escolha natural neste caso - visto que combina muito\nbem com minhas habilidades em Bash. Para definir se eu aprendi, quero\ndesenvolver um pequeno sistema (o qual ainda não decidi o que será). Pelo menos\na leitura de um livro referência em PERL também é requisito para eu decidir se\naprendi ou não.\n\n### Utilizar Vim para programar e escrever \nJá estou utilizando o Vim para escrever; mas programar é outra história. Tenho\nnaturalidade na forma de trabalhar com o Vim pois venho usando a uns 3 anos.\nEntretanto, ao comparar-se com o Sublime, o vim carece em facilidade quando se\ntratando da manipulação de múltiplos arquivos. Em ações recorrentes como: busca e substituição em\narquivos, gestão de projetos com vários diretórios, buffers, etc, é muito\nmais prático o modo de trabalho do Sublime. Todavia, isso não é impedimento; eu\nposso sanar estes gargalos utilizando plugins e outros recursos do vim. Preciso\napenas tirar o tempo para tanto.\n\n### Colaborar ativamente em um projeto *open-source*: Doctrine\nJá efetuei vários *pull requests* para os mais diversos projetos open-source.\nNão obstante, a falta de foco atrapalha na visibilidade destas colaborações.\nEste ano pretendo colaborar ativamente (pelo menos um PR a cada duas semanas)\nem UM projeto que eu utilize com muita frequência. As opções óbvias são: Zend\nFramework 2 e Doctrine 2. Escolhi o segundo pois o Zend Framework 2 já está\nbem \"acabado\" - praticamente não recebe mais colaborações de funcionalidades e também\nporquê sei muito menos, relativamente, de Doctrine do que de Zend Framework.\n\nQuero começar com colaborações simples nas documentações e com o tempo expandir\nmeu foco para a criação de novas funcionalidades. A ideia é que, pela metade\ndo ano, eu já esteja fazendo PRs de funcionalidades. \n\nObviamente esta meta não exclui colaboração em outros projetos open-source. Vou\ncontinuar a fazer colaborações \"em demanda\" nos projetos open-source que eu me\ndeparar; só que este tipo de colaboração tende a agregar bem menos valor do\nque colaborações previamente planejadas e frequentes.\n\n\n###Tocar Violino\nEinstein tocava violino nas horas vagas so ... Brincadeiras à parte, tocar\ninstrumentos musicais faz bem para o cérebro e contrasta sublimemente com\nprogramação. Violino porquê fará o meu já obtuso gosto por música clássica se\nexpandir e porquê minhas peças favoritas, em geral, são orquestradas por violinos.\nPara tal, pretendo começar um curso de violino - o qual já me cadastrei - em\nfevereiro e permanecer no mesmo por, pelo menos, todo o\nano de 2015.\n   \n**Concluindo...** é claro que eu quero fazer outras coisas neste ano, mas de\nlonge estas me parecem as mais importantes, as coisas as quais eu devo\ndedicar-me com maior empenho. \nCaro leitor (interessado na vida alheia), espero que você me cobre o status destas metas sempre que você se recordar. \nPara encerrar, o que achou das metas? Você tem as suas e espera que eu as\ncobre? Por favor me permita conhecê-las.\n\n\n##Referências\n\n1. http://www.hackcollege.com/blog/2013/09/19/how-to-organize-your-to-do-list-and-motivate-action.html\n2. http://lifehacker.com/5971803/top-10-strategies-for-making-your-new-years-resolution-stick\n3. http://www.hackcollege.com/blog/2015/01/02/resources-for-making-and-keeping-new-years-resolutions-as-a-student.html',1,'2015-01-08 00:00:00'),(49,'Como adormecer rapidamente','Estou demorando absurdamente muito tempo para dormir.\n\n##Refer?ncias',0,'2015-01-07 00:00:00'),(50,'One does note simply choose a colorscheme','##Web Tools\n\n###PHP online\nhttps://3v4l.org/',0,'2015-01-07 00:00:00'),(51,'Php e Hooks do git','Php e Hooks do git',0,'2015-06-07 00:00:00'),(52,'Vim tabs','Tab support is great asset of Vim. Being able to keep many projects opened concurrently, each one with its files and settings - without performance loss - is certainly a good incentive for one to want to keep they computer uptime high. Was thinking on that which I was impelled to wrote this post reviewing the key aspects of tabs.\n\n##Syntax\n\n- ``:tabs`` list all tabs;\n- ``:tabm n`` move the current tab to the *n* position;\n- ``:tabm`` move the current tab to the last position;\n- ``:tabn`` go to the next tab;\n- ``:tabp`` go to the previous window;\n- ``:tabclose n`` close a tab;\n- ``:tabclose`` close the current tab;\n- ``:tabonly`` close all other tabs;\n- ``:tab drop {file}``  open {file} in a new tab, or jump to a window/tab containing the file if there is one;\n- ``:tab split`` copy the current window to a new tab of its own;\n- ``2 gt`` go to the second tab;\n- ``gT`` go to the previous tab;\n\n###Open files in tabs\n\n```\nvim -p file1 file2\n```\n\n##Usage examples\n\n> Tabs are great places to work on small tasks that fall outside your normal work flow.\n\n> If you are working in a buffer with most folds open, you can keep a second tab page showing the buffer with all folds closed for an \"at a glance summary\".\n\n\n###View Help Pages\n\n``\n:tab help foo\n``\n\n##References\n\n1. http://vim.wikia.com/wiki/Quick_tips_for_using_tab_pages\n2. http://vim.wikia.com/wiki/Using_tab_pages\n\nComments are appreciated.',1,'2015-06-17 17:00:00'),(53,'Dicas do livro  Clean Code: Handbook of Agile Software Craftmanship','Coletei algumas notas [deste livro](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) as quais valem o custo da transcrição.\n\nA tradução destas passagens é fruto do meu esforço e provavelmente elas não são\ntão boas quanto as originais. Não obstante, considero que este material serve\ncomo um memorando conveniente dos pontos chave para a criação de código limpo.\n\n---\n\nDevemos ser honestos nas pequenas coisas. Isso significa sermos honestos com o\ncódigo, com nossos colegas sobre o estado do código e, acima de tudo, sermos\nhonestos conosco sobre o código. Nós fizemos o máximo, assim como os\nescoteiros, para deixarmos \"o campo mais limpo do que o encontramos\"?\nRefatoramos nosso código antes de fazer o *Pull Request*? Essas não são\npreocupações periféricas, são questões centrais dos valores ágeis. É uma\nprática recomendada do *SCRUM* incluir a refatoração dentro do conceito de\n\"pronto\". Código limpo não insiste em perfeição, apenas em honestidade e em\nfazer o melhor que nós podemos. Errar é humano; perdoar é divino. No *SCRUM* nós\ndeixamos tudo visível. Nós areamos a lavanderia suja. Somos honestos pois\nsabemos que o estado de nosso código nunca é perfeito. Nos tornamos mais\nhumanos, mais dignos do divino, e mais próximos da grandiosidade nos detalhes.\n\n---\n\nEu gosto que meu código seja elegante e eficiente. A lógica deve ser simples de\nmodo que os bugs tenham dificuldade em se esconder, as dependências mínimas e\nfáceis de manter, gestão de erros completa e estrategicamente articulada,\nperformance próxima do ótimo para não tentar as pessoas a fazer bagunça com\notimizações sem princípios. Código limpo faz uma coisa só mas faz bem feita.\n\nCódigo ruim tenta fazer muito, tem intenções fora de ordem e ambiguidade de\npropósito. Código limpo é código focado. Cada função, cada classe, cada módulo\nexpõe uma atitude a qual permanece focada, não interrompida por detalhes\nexteriores.\n\n**Bjarne**\n\n---\n\nDuplicação e expressividade tomam um longo tempo até eu considerar um código\nlimpo. Melhorar código sujo com apenas essas duas coisas em mente faz uma\ndiferença extraordinária.\n\nDuplicação; quando a mesma coisa é feita de novo e de novo é um sinal que uma\nideia na sua mente não está bem representada no código. Eu tento entender o que\né, então busco representar a ideia mais claramente.\n\nExpressividade para mim inclui nomes com sentido. Até eu ficar contente a\ntendência é eu a trocar os nomes de funções e classes inúmeras vezes.\nCom ferramentas modernas renomear é um tanto fácil, então eu não fico incomodado em fazê-lo repetidamente.\nNão obstante, expressividade vai além de nomes.\nEu também analiso se um método ou objeto faz mais do que apenas uma coisa.\nCaso sim, eles devem ser quebrados em dois ou mais elementos.\n\n---\n\nUma forma de saber se uma função esta fazendo mais de uma coisa é se você consegue extrair outra função dela com um nome que não e meramente uma redeclaração da sua implementação.\n\n---\n\nClasses e objetos devem ter nomes compostor por substantivos ou frases de substantivos como:\nCliente, *WikiPage*, *Conta* e *AdressParser*. Evite nomes como: *Manager*, *Processor*,\n*Data* ou *Info* em suas classes. O nome de uma classe não deve ser um verbo.\n\n---\n\n\nQuando construtores são sobre escritos utilize *Factories abstratas* com métodos\nque descrevem os argumentos. Por exemplo,\n\n```\n    Complex.fulcrumPoint = Complex.FromRealNumber(23.0);\n```\né geralmente melhor do que\n```\n    Complex fulcrumPoint = new Complex(23.0);\n\n```\n---\n\nO número ideal de argumentos para uma função é ZERO. Depois um seguido\nproximamente por dois argumentos. Funções com três argumentos devem ser\nevitadas sempre que possível. Mais do que três argumentos em funções requer\njustificação especial de outra forma não devem ser utilizados.\n\n---\n\nArgumentos de *flag* são feios. Passar um booleano em uma função é uma prática\nterrível. Booleanos imediatamente complicam a assinatura do método,\ndescaradamente proclamando que a função faz mais de uma coisa. Faz X se\na ``flag`` é verdadeira e Y se é falsa.\n\n---\n\nEm geral, argumentos de saída devem ser evitados. Se sua função precisa\nmodificar o estado de algo, ela deve modificar o estado do seu objeto!\n\n---\n\nO uso primário de comentários se dá para compensar nossa falha em expressar-nos\ncorretamente no código. Em outras palavras, se é necessário comentar, a\nprobabilidade é grande de que seu código tenha um design ruim.\n\n---\n\nComentários mal acurados são muito piores do que nenhum comentário. Eles mentem\ne enganam. Criam expectativas que não podem ser atendidas. Eles expõem e\nrecomendam o uso de regras antigas que não precisam ou não devem mais ser\nutilizadas.\n\n---\n\n**Comentários mandatórios**\n\nÉ um mal costume ter regras que especificam que cada função precisa der um\n*dockblock*, ou que cada classe deve ter um comentário no topo. Este tipo de\ncomentário apenas enche o código de sujeira, propaga mentiras, e tende a criar\nconfusão e desorganização.\n\nPor exemplo, requerer *dockblocks* para cada função nos leva a abominações\ncomo as abaixo. Este *dockblock* simplesmente não incrementa em nada a leitura,\nserve apenas para ofuscar o código e criar mentiras em potencial.\n\n```\n/**\n *\n * @param $title The title of the CD\n * @param $author The author of the CD\n * @param $tracks The number of tracks of the CD\n * @param $durationInMinutes The duration of the CD in minutes\n *\n */\n public addCd($title, $author, int $tracks, int $durationInMinutes)\n {\n    Cd $cd = new Cd;\n    $cd->title = $title;\n    $cd->author = $author;\n    $cd->tracks = $tracks;\n    $cd->duration = $durationInMinutes;\n }\n```\n---\n\n**A metáfora do Jornal**\n\nPense em um artigo de jornal bem escrito. Você o lê verticalmente. No topo,\nvocê espera um cabeçalho que vai lhe informar do que se trata a história e\npermitirá a você decidir se é algo que você deseja ler. O primeiro parágrafo\nlhe dá a sinopse de toda a história, escondendo os detalhes minuciosos.\nConforme você prossegue para baixo, os detalhes vão aumentando até que você tem\ntodas as datas, nomes, citações, hipóteses e outras minuciosidades.\n\nEm geral é uma boa analogia esperar que nossas classes sejam como artigos de\njornal. Os nomes devem ser simples mas explanatórios. Os nomes por si, deve ser o\nsuficiente para nos dizer se estamos na classe correta ou não. As partes\nsuperiores do código devem ser capazes de nos informar os conceitos e\nalgoritmos de alto nível. Os detalhes devem crescer conforme vamos descendo na\nclasse, até que no final nós encontramos os mais refinados detalhes do fonte.\n\nUm jornal é composto por vários artigos; a maioria bem pequenos. Alguns são um\npouco maiores. Bem poucos contém texto suficiente para encher uma página. Isso\ntorna o jornal usável. Se o mesmo fosse apenas uma história contendo um\naglomerado desorganizado de fatos, datas, e nomes, simplesmente ninguém iria\nlê-lo.\n\n---\n\nConceitos que são grandemente relacionados devem ser mantidos verticalmente\npróximos. Claramente esta regra não funciona para conceitos que pertencem a\narquivos separados. Mas conceitos altamente relacionados não devem ser\nseparados em arquivos diferentes a não ser que exista uma explicação bem\nespecífica para tanto. De fato, essa é uma das razões que variáveis protegidas\ndevem ser evitadas.\n\n---\n\nEm geral nós desejamos que funções chamem dependências que apontem na direção\n\"para baixo\". Em outras palavras, uma função chamada deve estar abaixo na\ndeclaração do que a função que a chamou. Isso cria um bom fluxo no código do\nmais abstrato ao mais específico.\n\n---\n\nObjetos expõem comportamento e escondem dados. Dessa forma fica fácil adicionar\nnovos tipos de objetos sem modificar os comportamentos existentes. Isso também\ndificulta a inclusão de novos comportamentos nos objetos existentes. Estrutura\nde dados expõem dados e não tem comportamento significativo. Tornando fácil\nadicionar novos comportamentos para as estruturas de dados existentes, mas\ndificultando a adição de novas estruturas de dados para funções existentes.\n\nPara uma dada parte um sistema nós às vezes necessitamos de flexibilidade para adicionar novos\ntipos de dados, então devemos preferir objetos. Outras vezes, nós precisamos adicionar novos\ncomportamentos, nesta parte devemos optar por estruturas de dados.\nBons desenvolvedores de software entendem estas características e escolhem o\nprocedimento correto de acordo com o trabalho em mãos.\n\n---\n\nObjetos escodem seus dados atrás de abstrações e expõem funções que operam\nneles. Estruturas de dados expõem seus dados e não têm nenhuma função\nimportante.\n\nInfelizmente muitos desenvolvedores não veem claramente a distinção entre um e\noutro tratando estruturas de dados como objetos (colocando regras de negócios\nnelas). Isso é ruim pois cria conceitos híbridos entre estrutura e objeto.\n\n---\n\nCada exceção que você lançar deve prover contexto o suficiente para determinar\na fonte e a localização do erro.\n\nCrie mensagens de erro informativas e as passe juntamente com as exceções.\nMencione a operação que falhou e o tipo de falha.\n\n---\n\nCódigo com regras externas precisa de clara separação e testes que definem suas\nexpectativas. Devemos evitar deixar grande parte do nosso código saber\nsobre particularidades de terceiros. É melhor depender em algo que você\ncontrole pois de outra forma isso vai acabar controlando você.\n\nNós gerenciamos particularidades externas em poucos locais no código. Podemos\naté encapsulá-las em um adaptador para converter nossa interface perfeita com\nas especificidades da interface de terceiro. Dessa forma nosso código fala\nmelhor por nós, promove consistência de utilização e requer poucos pontos de\nmanutenção quando o código de terceiro mudar.\n\n---\n\nCódigo de teste é tão importante quanto código de produção. Não se trata de uma\nimportância secundária. Requer estudo, design e cuidado. Precisa ser mantido\ntão limpo quanto código de produção.\n\n\nCódigo de teste utiliza padrões de engenharia diferenciados do código de\nprodução. Ele ainda precisa ser simples, sucinto e expressivo, mas não\nnecessariamente tão eficiente. No final das contas, ele roda no ambiente de\ntestes e este ambiente tem necessidades diferenciadas do ambiente de produção.\n\n\nEsta é a natureza do padrão duplo. Existem coisas que você nunca faria em um\nambiente de produção que são perfeitamente aceitáveis em testes. Essas coisas\nusualmente envolvem memória e eficiência de *CPU*. Mas nunca envolvem aspectos\ncom clareza de código.\n\n---\n\nTestes não devem depender um do outro. Um teste não deve definir as condições\npara o próximo. Você deve ser capaz de rodar cada teste independentemente e na\nordem que desejar. Quando testes dependem um do outro a falha do primeiro\ncausa um cascateamento de problemas tornando os diagnósticos difíceis e\nescondendo defeitos.\n\n---\n\nOrganização de classes\n\nÉ importante ter convenções para estruturar classes. No padrão Java uma classe\ndeve começar com uma lista de variáveis. Iniciando por constantes públicas, variáveis\nprivadas, seguidas por variáveis com instâncias privadas. Raramente\nhá alguma boa razão para a existência de variáveis públicas.\n\nFunções públicas devem seguir a lista de variáveis. É interessante colocar as\nfunções privadas, chamadas por funções públicas, logo abaixo da função chamadora;\ndessa forma a continuidade da leitura (como um artigo de jornal) é assegurada.\n\n---\n\nMuitos desenvolvedores temem que um grande número de classes - com um\núnico propósito cada - torna mais difícil a compreensão global do funcionamento do que um pequeno\nnúmero de classes com lógica misturada.\nEles estão preocupados que talvez tenham de navegar de classe em classe para descobrir como as peças estão\ndispostas.\n\nNão obstante, um sistema com muitas classes pequenas não tem mais partes móveis\ndo que um sistema com poucas e grandes classes. Há a mesma quantidade de coisas\npara saber sobre um sistema com classes grandes do que com um sistema com\nvárias classes pequenas. Então é a questão é a seguinte: você quer que suas\nferramentas fiquem organizadas em caixas com pequenos compartimentos\ncontendo nomes bem definidos? Ou você prefere poucos compartimentos apenas\npara colocar tudo dentro?\n\nQualquer sistema razoável vai conter uma grande gama de lógica e complexidade.\nA primeira meta na administração dessa complexidade é organizá-la de forma\nque o desenvolvedor saiba onde procurar as coisas e que precise entender\napenas a complexidade das coisas diretamente relacionadas ao que ele procura. Em\ncontraste, um sistema com grandes classes de múltiplos propósitos insiste que\ntenhamos que nos esgueirar por vários conceitos que nós não necessariamente\nprecisaríamos ou desejássemos saber no momento.\n\nPara colocar claramente: nós queremos que nossos sistemas sejam compostos por\nvárias classes pequenas, não poucas grandes. Cada classe encapsula uma única\nresponsabilidade, tem apenas uma única razão para mudança, e colabora com umas\noutras poucas classes a fim de atingir os desejados comportamentos do sistema.\n\n---\n\n**Manter coesão resulta em várias classes pequenas**\n\nApenas o ato de quebrar grandes funções em várias menores já causa a\nproliferação de classes. Considere uma função grande como várias variáveis\ndeclaradas dentro dela. Vamos dizer que você quer extrair uma pequena parte\ndesta função em uma função separada. Não obstante, o código que você deseja\nextrair utiliza quatro variáveis. Você deve passar todas as quatro variáveis\ncomo argumentos para a nova função?\n\nNão! Se promovermos essas quatro variáveis para variáveis de instância, aí nós\npodemos extrair o código sem passar um argumento sequer. Isso fará que fique\nainda mais fácil quebrar a função em pedaços ainda menores.\n\nInfelizmente, isso também significa que nossas classes perdem coesão pois\nacumulam mais e mais variáveis de instância. Mas espere! Se existe um pequeno\nconjunto de variáveis de desejamos compartilhar entre algumas funções isso\nsignifica um candidato forte para uma nova classe. Quando classes perdem\ncoesão, devemos divida-as em classes menores.\n\n---\n\nNós geralmente esquecemos que o melhor é adiar decisões até o último momento\npossível. Isso não é preguiçoso ou irresponsável; outrossim, nos possibilita\ntomar decisões com a melhor informação possível. Uma decisão prematura é uma\ndecisão feita com conhecimento insuficiente.\n\n---\n\nAprenda a biblioteca padrão de sua linguagem - conheça os algoritmos\nfundamentais. Entenda como algumas das funcionalidades oferecidas pela\nbiblioteca resolvem os problemas.\n\n---\n\n**Utilize o conceito de menor surpresa**\n\nQuando um comportamento óbvio não é implementado os leitores e usuários do\ncódigo não podem mais depender de sua intuição sobre os nomes das funções. Eles\nperdem sua confiança no autor e retomam a leitura dos detalhes do código.\n\n---\n\nCada vez que você ver um código duplicado saiba que ele representa uma\noportunidade perdida de abstração. Aquele código pode muito provavelmente virar uma\nsub-rotina ou até uma nova classe. Encapsulando duplicações dessa forma você\naumenta o vocabulário de seu design; e outros programadores podem se beneficiar\ndas abstrações que você criou. Programar se torna rápido e menos tendencioso a\nerros devido ao acréscimo do nível de abstração.\n\n---\n\nQuando um método usa assessores de outro objeto para manipular dados\ndentro daquele objeto, ele inveja o escopo de classe daquele outro objeto. Ele\ngostaria de estar dentro daquela outra classe para que tivesse acesso direto às\nvariáveis que aquele objeto manipula.\n\n---\n\nVariáveis com nomes mais explanatórios são geralmente melhores do que variáveis com nomes simples.\nÉ memorável o quanto um módulo opaco pode se tornar transparente apenas por quebrar os\ncálculos em variáveis intermediárias bem nomeadas.\n\n---\n\nCriar variáveis protegidas por padrão não é encapsular o suficiente.\n\n---\n\nSe você precisa inspecionar a implementação (ou documentação) de uma função\npara saber o que ela faz então você deveria trabalhar mais tempo na busca por\nmelhores nomes ou no rearranjo das funcionalidade para que as mesmas possam\nser dispostas em funções com nomes melhores.\n\n---\n\n\nEspero que esses conceitos lhe sejam úteis assim como veem sendo para mim.\n\nCríticas e comentários são sempre muito bem vindos.',1,'2015-01-10 00:00:00'),(55,'Weekly Report','Resolvi criar este *report* semanal devido ao caráter benéfico desta prática. Uma boa prática é eu ler o anterior, pelo menos uma semana, antes de começar a escrever o novo report. Seria bom estruturar os *reports* da seguinte manaeira:\n\n- O que pode ser melhorado\n- O que foi bom\n\nDessa forma eu melhoro a objetividade deste trabalho. Quando eu estiver cabisbaixo por exemplo, eu posso ler a parte do que foi bom.\n\n###Semana 1\n\nEsta semana trabalhei como um escravo. Pelo menos essa é a impressão que dá em respectiva. Não obstante, um fato digno de lembrança é meu posto sobre o livro de *Clean Code* repercutiu razoavelmente. Aponto de o Elton fazer comentários jocosos sobre o assunto. Tive problemas para dormir mas já estou estudando formas de remediar este problema. Comecei a ler um livro sobre as rotinas de pessoas ilustres e estou decidido a criar uma rotina bem disciplinada. Comprei um HD externo pois pretendo começar a fazer imagens do meu sistema operacional com frequência mensal. Quanto ao Linux, essa semana gastei bastante tempo aprendendo sobre o sistema - deu pânico no kernel 3.18 com meu módulo *wireless* de terceiro.\n\n####Pontos a melhorar\n\n- Iniciei meus estudos sobre Doctrine mas longe da rotina a qual especifiquei nas minhas metas - preciso melhorar aqui também.\n- Recomecei a escrever o TCC mas ainda está longe do que eu pretendo que seja.\n\n##Semana 2\n\nEsta semana, trabalhei bastante, mas não como escravo, defini bastante coisa e finalmente o pessoal de fortaleza está se ajustando ao local que eles merecem (fora do projeto). Aparentemente uma outra pessoa vai entrar no projeto em *backend* também - pelo que disse o Elton uma pessoa mais velha e com bastante experiência. Finalmente vou trabalhar com alguém que saiba bastante e que eu talvez tenha que correr atrás para acompanhar, de qualquer forma será uma experiência satisfatória para meu desenvolvimento profissional. Não receio ficar para trás pois não conheço ninguém tão dedicado quanto eu - se comparado ao pessoal de Joinville, fico par à par com pessoas com 10x mais experiência do que eu. Esta semana ouvi somente música clássica - e umas pequenas doses de Naruto. É uma boa perspectiva essa, aparentemente meu gosto não está mais suportando Metal e toda  aquela sujeira sonora. Semana que vem haverá um *meetup* o que é ótimo para meu desenvolvimento de *networking* aqui em Joinville. O melhor de tudo é que esse é no estilo de desenvolvimento. Talvez uma micro apresentação seja algo válido neste ponto. Comecei a acordar cedo ao invés de interromper o sono na madrugada, me pareceu uma melhor forma de se proceder. Fui muito mais disciplinado nesta nova rotina; comecei inclusive a programar de pé nas manhãs, o que se provou algo difícil mas compensatório - pretendo explorar mais esta forma de trabalhar no futuro. Assisti dois filmes durante a semana e mais dois no final de semana - é demais e eu preciso colocar um fim nisso. Vou remover o *popcorn* - provavelmente será benéfico temporariamente. Preciso lembrar de escrever e ler o que eu escrevi sobre este assunto. Não obstante, tive a impressão de ter um final de semana mais intelectual do que a média dos meus dias. Espero que à longo prazo isso se torne rotina. Meu progresso foi pequeno em relação as minhas metas esta semana - preciso de comprometer mais. Ter mais foco, principalmente. Fiquei preso em diversas idiossincrasias que espero remediar em breve - como a utilização do vim.\n\nSábado perdi um *post* devido ao meu script de edição, tenho que pensar em formas de fazer backups do meu blog também. E como me livrar a imensa quantidade de e-mails que estou recebendo na minha caixa de entrada do contato@jean... . Outra coisa importante, eu tenho que responder para os meus leitores do blog as perguntas que me foram feitas - fica aqui registrado para fazer isso.  Deixei para a última hora para escrever isso e agora estou meio que me arrependendo. São tantos pensamentos ao mesmo tempo. Tenho que me acostumar a escrever isto desde o início da manhã de sábado. A leitura que efetuei de Nietzsche esta semana reforçou minhas ideias sobre meu modo de agir. Também reforçou a necessidade de eu permanecer imparcial com as outras pessoas - criei um *post* para me lembrar das palavras que me influenciaram. Enfim, esse *report* ficou um tanto nebuloso, é porque eu não tomei o tempo suficiente para organizá-lo. Espero que não seja dispendioso ler estas curtas passagens.\n\n##Semana 3\n\nFiz a entrevista com o novo candidato a programador e, a impressão que tive, é que ele é bem mais fraco do que eu, em questões de conhecimento obviamente. Mas acredito que não será outro caso como Fortaleza: que eu tenha que levar nas costas. Mas a probabilidade de eu ficar ensinando muito mais do que aprendendo é substancial. Já estou a duas semanas consecutivas na newsletter da Semana PHP - isso é ótimo pois está criando uma grande visibilidade para a minha pessoa. Não somente isso, o Elton quer publicar meus *posts* sobre Zend2 no blog *http://frameworksphp.com.br/* - isso é muito positivo, vai aumentar minha visibilidade drasticamente. Outra coisa legal que aconteceu é que a equipe compufour de Joinville foi convidada para a festa da empresa em Concórdia com tudo pago. Vamos um dia antes da festa para conhecer o lugar e as pessoas - provavelmente sermos conhecidos muito mais do que conhecer.\n\nComecei a utilizar o Vim como IDE full time. Apesar de o Sprint ter sido meio bagunçado e quase atrasado - acho que não foi por movido de meu editor, muito mais provável que se deu por estarmos perto de uma entrega. Em todo o caso, vale ficar alerta para ver se coisas similares acontecerem repetidamente. Estou resoluto a utilizar muito menos o Facebook em contrapartida utilizar o IRC para socialização acadêmica.\n\nEstou conversando demais com o Matheus, certamente não demais para o padrão das pessoas normais, mas demais para os meus padrões. Tenho que bolar um mecanismo para ser menos interrompido - de modo que eu tenha mais tempo para o meu raciocinar. Minha rotina de sono tem melhorado de forma incremental. Esta semana, em nenhum dos dias tive problemas em acordar de madrugada. O dia mais difícil foi quinta - não obstante, eu consegui permanecer acordado vendo vídeos do *SciShow*. Tenho que criar atrito neste assunto, não devo acordar mais tarde, sim dormir mais cedo. Devo utilizar o computador de pé nos finais de semana e nas madrugadas. Li um estudo que conclui que quem passa mais de três horas sentado por dia tem muito mais chances de ter problemas no coração - sendo assim tenho que minimizar ao máximo meu tempo sentado. Não assisti nenhum filme essa semana! Alguns vídeos do *SciShow* mas isso acho que é uma boa coisas - este canal é incrível e está me ajudando a reforçar o laço entre felicidade e ciência.\n\n##Semana 4\n###O que pode ser melhorado\nEstou com receios financeiros, devo me organizar, talvez não seja o momento correto de começar um curso de violino. Muito menos de comprar o material necessário - mas vou fazer as contas para esclarecer. É importante que eu comece a monitorar meus gastos com algum aplicativo que ainda tenho que decidir qual será.\n\nNo sábado fui ver o primeiro kitnet e não gostei das perspectivas, lugar horrível - um verdadeiro cantro de sujeira e de calor. Se os demais lugares que eu visitar no futuro forem de qualidade equivalente, penso que estou melhor servido em um hotel mesmo. Lá eu pagaria 500 reais mas o lugar é horrível, aqui, por 750 eu tenho alguém para fazer limpeza e um ambiente muito melhor (e ventilador, tv e todos os equipamentos). Não é de todo o ruim as perspectivas de viver em um apartamento. Pelo menos não me parecem neste instante.\n\nTive problemas nas otimizações do *Clipp* esta semana. Me falta ainda bastante conhecimento de *Doctrine* para me considerar um bom profissional com a ferramenta.  Não obstante, acredito estar lançando bons fundamentos na perspectiva que os outros tem da minha pessoa, porque afinal de contas, eu sei muito. Mais do que ele em praticamente todos os aspectos de desenvolvimento Backend. Tenho apenas que cuidar para não brincar demais, a companhia do Matheus deve ser evitada sempre que possível. Para lançar bases ainda meis profundas na boa impressão que as pessoas fazem de mim, profissionalmente é claro, seria interessante que eu fizesse um post sobre o padrão mediator esta semana - assunto importante para o futuro próximo do PHP. Também seria importante, para o meu desempenho no Clipp, que eu instalasse o zend server na minha máquina. Também é importante que eu leve o trabalho dia-a-dia mais a sério - para que as eventualidades não terminem por estourar na data da entrega. O Elton está interferindo mais do que eu desejaria que ele fizesse no processo de desenvolvimento. Por exemplo, fazendo otimizações que eu devia ser o responsável. Criando um *branch* *develop* - destruindo o conceito do *master*.\n\nMeu desempenho com o Vim está ficando próximo do ideal. Velocidade já está adequada, preciso apenas melhorar a teoria: lendo documentações, criando tutoriais, etc. Comecei a ler um livro de Unix e estou convicto que minha aposta nesta forma de trabalhar é o caminho para o sucesso profissional - mesmo tomando uma enorme parcela de esforço necessária.\n\nTive a primeira aula de música - violino - e simplesmente achei fantástico, violino é elegante, força o usuário a ser elegante e ter uma boa postura; a pratica tem que ser em pé!\n\nDerrubei o computador essa semana, foi horrível. Cheguei a ter pesadelos. Felizmente apenas um arranhão ficou no dispositivo.\n\nMeu sono não foi adequado, no sábado e domingo eu acordei as 7hs. Talvez seja um bom momento para eu trocar minha rotina. Estou pensando em ficar acordado até mais tarde ao invés de acordar cedo para fazer as coisas. Poderia utilizar as primeiras horas da manhã para caminhar um pouco. Sexta feira estive extremamente desfocado e não rendi porcaria nenhuma.\n\nSeria interessante que eu mantesse anotadas as dúvidas que vão ocorrendo ao longo do tempo, ou os assuntos abordado os quais eu não domino completamente. Para que com o tempo eu os revise e não os deixe passar desconhecidos.\n\nAssisti muito naruto este final de semana, sem contar em duas vezes o filme The Last durante a semana. Faz-se necessário maior controle da minha parte.\n\nEsta semana quase considerei instalar o Age2 para jogar com o Matheus ou comprar o Heroes 3 HD.\n\n####Domingo\n\nO final dia está bonito lá fora, chega a me dar um bom humor. A iluminação da troca de turno é algo excepcional. Talvez seja interessante eu encontrar um lugar onde a vista seja privilegiada para passar esse tempo nas semanas futuras.\n\n###Semana 5\n\nTecnicamente já é sábado, apesar de ser madrugada. Estou em um ônibus viajando para CB (extremamente cansado).\n\nTive alguns debates com o Elton quanto ao que significa simplicidade. Eu estou firme no Unix Way, provavelmente para  melhorar meus argumentos seja melhor eu reforçar a leitura do livro do assunto, que iniciei a leitura.\n\nComecei a ler um livro sobre aprendizagem, principalmeente relaciondado às ciências exatas.\nEm Carlos Barbosa as coisas são muito mais calmas do que em Joinville. O clima aqui é especialmente melhor, mas a mentalidade das pessoas é muito quadrada. Caí nos vícios mundanos, assisti 3 filmes no sábado e cheguei a instalar o Age 2, tenho que cuidar para não entrar em um ciclo de vícios. Estou com vontade de ler Nietzsche para me lembrar de permanecer forte. Meu desktop está super estável mas sinto que devo efetuar um Backup logo. Estou escutando as músicas do Coração Valente e sinto-as extremamente úteis para forçar meu foco.\n\nTenho que cuidar para não quebrar regras.\n\nPassei todo o final de semana jogando, um desperídício sem fins.\n\n###Semana 6\nUm desperdício nos meus pais\n\n###Semana 7\n\nPassei viajando em concordia\n\n###Semana 8\n\nFinalmente de volta à rontina possso escrever com calma.\nAssisti o filme de Alan Turing, de fato fiquei muito tocado. A vida dele tem muito do que eu quero para a minha: não conformismo, vontade absoluta, genialidade, e cooperação para tornar o mundo um lugar melhor. Posso utilizar este filme como inspiração esporadicamente. Hoje (sábado), tirando o filme de turing, fiu extremamente eficaz, não fiquei fazendo merda. Publiquei um post, li bastante e encaminhei a resolução da biscicleta.\n\n####Semana 9\n\n#####O que foi bom\nO Elton falou explicitamente para mim que eu tenho um grande potencial. As palavras específicas foram:\n\n```\nacho q nós dois fazemos uma boa dupla :simple_smile: Vc tem toda a teoria \"fresca na memória\" e eu complemento com um pouco de experiência, pq sou mais velho\nacho q vc tem um grande futuro pela frente\ndá pra melhorar um pouco as skills sociais, mas isso é parte do crescimento pessoal kk\n```\nO Elton começou a me passar tarefas de engenharia. A primeira foi fazer a engenharia do sistema de report.\nFalei com o Matheus francamente sobre a performance dele, acho que foi uma boa estratégia.\n\n#####O que precisa ser melhorado\n\nMinha performance na engenharia do sistema de report não foi tão bom como eu gostaria. Isso deriva do fato de eu não ter o costume de realizar este tipo de atividade.\n\n####Semana 10\n\n#####O que foi bom\n\nEncontrei esse café excelente aqui perto do hotel, estou me sentido bem disposto aqui dentro, escrevendo este report.\nO sistema de reports está ficando excelente. Estou seguindo regras SOLID, e construindo com base no uso em potencial. É uma tarefa complexa.  Deixei o pessoal perplexo quando falei que eu não minto.\nComecei a prática do afiar o machado no início do período de trabalho. Tenho que refinar a ideia mas basicamente é para eu fazer uma pequena melhoria no meu processo, por exemplo: aprender algo de vim.\n\n#####O que precisa ser melhorado\n\nPreciso voltar a manter minha rotina de sono. Devo acordar cedo e fazer as coisas acontecerem.\nPreciso voltar a me alimentar com regularidade. Esta semana forma várias as vezes que eu jantei ou comi fora do horário.\nTenho que deixar claro meu comprometimento com a verdade e com o método científico.\nTive uma gripe foda essa semana. Vou cuidar para me exercitar com maior regulariadade a fim de manter minha saúde à um nível excelente.\nPassei muito tempo no youtube esta semana.\n\n####Semana 11\n\n#####O que foi bom\nO sistema de relatórios está ficando bem profissional. Falei com meu irmão, falei que me preocupava com ele e tentei ajudar a ele encontrar um curso que ele queira fazer. Bloqueei o facebook e não senti muita necessidade do mesmo. Não estou acordando às 4.  Comecei a utilizar somente o notebook no trabalho. O teclado estou deixando  no hotel para que eu programe de pé. Não obstante, até então não permancei grande parte do tempo em pé no hotel. Estou lendo o livro sobre socialização, tem se demonstrando uma leitura bastante interessante. Provavelmente conseguirei utilizar diversos dicas do livro no meu quotidiano.  Baixei um concerto que me impressionou bastante, a performance da violonista foi excepcional. Provavelmente é um bom costuma daqui para frente consumir operas e concertos, certamente servirão como catalisadores para meu gosto por música classica.\n\n#####O que precisa ser melhorado\nEstou me exaltando muito no trabalho com a falta de profissionalismo de Fortaleza. Talvez eu deve ser mais ameno *talvez*.\n####Semana 12\n#####O que foi bom\n\nRecebi uma oferta de emprego de Taywan! O Raony disse que eu sou um Spoky melhorado :), isso de fato me deixa feliz, vou tentar impressiona-los - no bom sentido - ainda mais com minha cultura científica.\n\nNa aula de música eu notei que estava extremamente inteligente; isso pode parcialmente ter sido originado do fato que antes da aula eu estava experimentando uma interface gráfica tiled. Provavelmente é interessante eu adicionar tarefas similares, extremamente lógicas - mais do que já tenho - no meu quotidiano. Também, recentemente tenho tido a impressão de que, com o devido foco, consigo fazer qualquer tarefa intelectual. Estou calmo no trabalho e recebendo várias tarefas gerenciais.\n\nFinalmente fiz backup do meu computador; utilizei o rsync pois me pareceu o mais cost-effective. Assisti o filme  *Interestellar*, quase chorei, de fato é um efeito *mind-blowing* pensar que viagens próximas a velocidade da luz podem bagunçar tanto com a vida das pessoas.\n\nA impressão que tenho é que ouvindo cosmos e tendo em mente coisas relacionadas ao universo minha tendência a estudar aumenta. Provavelmente uma boa estratégia é baixar e deixar em meu computador um cópia de Cosmos original para me manter inspirado.\n\nOutra coisa positiva nessa semana foi que eu comecei a utilizar o *Umano* como despertador e isso de fato se mostrou efetivo para me fazer acordar pensando em coisas positivas. Pois, principalmente no final de semana, acordo pensando no que eu posso fazer para relaxar! Relaxar! Logo depois de acordar? Tenho que lembrar de utilizar o Umano sempre para vencer essa vontade de porco.\n\nUma mentalidade boa que se expressou fortemente esta semana é a de otimização de meu ambiente para se adaptar à web. Pois a única coisa certa que vai durar para aplicativos de usuários é a web. Tenho que utilizar ferramentas e me especializar fortemente nesta área. Quando vou pesquisar a utilização de um aplicativo primeiro tenho que analisar se não vale mais à pena utilizar algo relacionado a web.\n\n#####O que precisa ser melhorado\n\nTenho que assistir menos filmes. Me lembrar de que ao invés de filmes, uma fonte superiora de entretenimento são os livros no meu Kindle. Tenho que me esforçar mais nas minhas metas no final de semana. Preciso escrever mais, noto que depois de um tempo vencendo a inércia da escrita as palavras fluem quase que naturalmente.\nTenho que me exercitar mais, estou no geral muito cansado, no momento que estou escrevendo isso, por exemplo. Tenho que passar menos tempo no Youtube, penso que este é o momento para bloqueá-lo novamente do Firefox. Não estou utilizando o Wunderlist como sistema para gerenciar meu tempo como eu deveria. Talvez seja o momento de eu continuar a leitura daquele livro *Getting things done*.\n\n####Semana 13\n\n#####O que foi bom\nO Elton deixou o controle sobre o Kanban sobre minha responsabilidade. O Juliano me pediu umas dicas para começar com PHP, eu respondi com um post no meu blog e ele gostou muitíssimo. Inclusive posteriormente me desejou feliz páscoa. Terminei de ler o livro *Humano Demasiado Humano* e comecei outro de ciência sobre inteligência artificial. Meu Twitter vem crescendo em uma taxa razoavelmente alta, tenho que manter esse hábito de Twittar pelo menos uma vez por dia.\n\nComecei a mexer a estrutura do meu Blog, já está razoavelmente melhor, mas tenho muito trabalho pela frente para deixá-lo muuuito legal. O importante é que eu venci a inércia que anteriormente vinha tendo com receios de estragar. Na verdade eliminei um bom pedaço de lixo do blog, provavelmente ele ficou razoavelmente mais rápido.\n\nEstou realmente ficando bom com o Violino, já nem preciso mais olhar para as notas para realizar as músicas. O professor também mencionou que eu estou progredindo. Fiquei animado e resolvi adicionar um segundo turno de estudos de violino no meu dia. Estou estudando a segunda música atualmente, e provavelmente na próxima aula irei progredir ainda mais.\n\nO Elton e eu saímos da Coderockr caminhando e tivemos uma conversa interessante sobre empresas, tenho impressão que ele está bem positivo em relação à minha pessoa. Tivemos também uma conversa sobre a estrutura do sistema de observer do product e resolvemos utilzizar os eventos do Zend. No fim, todas as sugestões que eu dei foram utilizadas no sistema.\n\nDei umas  boas risadas no chat do *Archlinux offtopic*.\n\nOuvi um post no *Umano* sobre como largar hábitos ruins. Basicamente, você tem que abrir mão daquela coisa sem exceções, pode ser uma coisinha mínima de cada vez, mas tem que ser absoluto. Fiquei feliz com esta constatação pois é bastante similar ao meu modo de pensar.\n\n#####O que precisa ser melhorado\n\nComi muitos condimentos essa semana. Mas já tomei a resolução de nunca mais comer Ketchup a não ser o caseiro. Assisti vários episódios de Naruto neste feriado, tomei a resolução de não assistir mais nada, quando eu estiver à fim de assistir alguma coisa vou escolher um novo livro ou continuar algum que eu já esteja lendo. Tenho que passar mais tempo em pé.\n\n####Semana 14\n\nHoje (Tue Apr  7 21:45:55 BRT 2015), escrevendo o TCC, me dei conta de umas coisas interessantes:\n\nEu rendo muito mais, intelectualmente, quando não tenho música para me distrair. Para reforçar essa minha tese é interessante que eu faça uma pesquisa sobre trabalhos científicos no assunto.\n\nÉ muito divertido escrever o TCC, cansar, ajustar o Wunderlist, ajustar o jogo  e voltar a escrever.\n\nMuita dificuldade em algo a torna menos produtiva, eu não estava escrevendo muito o tcc antes pois não via no horizonte as prospecções de entrega em markdown. Agora de mudei para odt estou mais empolgado e escrevendo mais.\n\nEstou meio que \"me baseando fortemente\" em um trabalho que é bem parecido para ter conteúdo o suficiente para divergir.\n\nPesquisei sobre música e de fato trabalhos intelectuais são melhores produzidos no silêncio, a não ser que a pessoa esteja emocionalmente abalada por algo. Sendo assim, vou começar a não ouvir música enquanto eu trabalho. Provavelmente é interessante eu pesquisar alguma forma de obstruir o som enquanto eu trabalho.\n\n\n##### O que foi bom\n\nO Ednardo tem respeito por mim e não cansa de me chamar de chefe. Não sei se é bom ou ruim, mas quando o Elton está ausente sou eu quem cuida de todo o projeto e quem toma as decisões sobre praticamente tudo. Desnecessário dizer que as dúvidas de design são quase que sempre direcionadas para a minha pessoa. Agora não sei se é bom toda essa responsabilidade pois estou fazendo coisas demais, testando partes do sistema a todo o momento,  construindo as partes mais difíceis do sistema, aconselhando todo mundo, distribuindo tarefas, etc. Tenho que pensar um pouco mais sobre isso.\n\nJá comecei a estudar a quarta música.\n\nO Wagner mencionou que temos direito à horas extras.\n\nEstou muito mais disciplinado, e agora, pelo fato de eu estar pobre por dois meses, acredito que a disciplina só tende a aumentar.\n\nLi os sofrimentos do jovem Werter, muito bom o modo de escrever de Goethe. Talvez seja interessante eu adicionar mais umas obras dele em minha lista de leituras atuais para ficar cada vez mais excelente na escrita.\n\nNão utilizei o Youtube por causa da Two Factor Authentication hoje de tarde.\n\nDesnecessário dizer que minha tarde foi extremamente positiva em relação à produtividade. Talvez seja interessante fazer o mesmo em relação ao Facebook.\n\nOuvi menos música no trabalho, talvez isso seja parte do problema de eu estar mais cansado. Não obstante, tenho que ser estratégico e ouvir música em momentos oportunos e não o fazer em momentos de grande concentração.\n\nApertar a bolinha azul é um bom meio para recuperar memórias segundo uma pesquisa de segundo nível que encontrei.\n\nAlmocei o Padock\'s e apreciei mais a comida, sem falar que é muito mais perto da Coderockr. Acho que é uma boa começar a pedir uma garrafa d\'agua no lugar do habitual suco de laranja. Deve ser mais barato e fazer mais  bem no meu caso  visto que hidratação é muito mais importante que frutas - e já como frutas diariamente.\n\nParei de ir no café aqui perto do hotel, ali eu gasto bastante e consumo coisas que não deveriam constar no meu cardápio noturno (tipo cafés com doce de leite). Comecei a ir, pelo menos nos finais de semana, no McCafé do Muller, lá eu não preciso comprar quase nada e ficar por tempo quase que indefinido.\n\nContatei a advogada e estou esperançoso que, à partir de agora, as coisas comecem a andar em relação à bicicleta. Não obstante, ela interpretou umas coisas, por escrito, de forma errônea, tenho que pedir uma cópia do documento para dar uma revisada e colocar algumas considerações.\n\nCortei meu cabelo e não ficou ridículo. Para falar à verdade foi até elogiado.\n\n##### A melhorar\n\nEstou cansando muito rapidamente no trabalho. Como estou totalmente sem grana, tenho que começar a ficar um tempo adicional na Coderockr trabalhando não precisa ser sempre, mas é interessante eu manter uma frequência nesta atividade.\nO tempo extra, posso me dedicar, mesmo que parcialmente, a contribuições Open-Source que de alguma forma ou de outra melhorem o Clipp.\nTenho que passar mais tempo em pé e praticar mais exercícios. O Matheus está se tornando um peso cada vez maior. É difícil lidar com ele, ele não trabalha como deveria e mente com frequência. Talvez eu ser franco com ele seja uma forma mais adequada de resolver isso.\n\n####Semana 15\n\nGastei um tempo considerável ajustando meu sistema operacional, acho que tenho que começar a fazer posts sobre isso, senão essa experiência não vai ter valido muito. No final da sexta e durante todo o sábado não fiz nada que preste a não ser mexer no meu SO.\n\n##### O que foi bom\n\nNo domingo resolvi dormir ao invés de assistir filmes.\nAssisti um documentário de como se tornar mais inteligente, e de fato, tocar instrumentos é uma das melhores maneiras conhecidas. Outra coisa interessante que descobri deste documentário é que escrever *reports* antes de algo que requeira muita concentração é uma boa pois acalma a mente, livra o cérebro de pensamentos que de outra forma ficariam vagando (e consumindo CPU). Brincar com bolinhas, aquele negócio que o pessoal faz em frente ao semáforo também é uma boa maneira de aumentar a inteligência.\n\nO Airton veio me pedir se eu não quero fazer um job. Isso mostra o quão bem eu fiquei visto ao olhar do pessoal da Cub.\nConsegui economizar bem meu dinheiro, não fiz nenhum gasto excessivo e não fui movido por nenhum desejo incontrolável.\nComecei a jogar o Vim Golf e gostei bastante do que experienciei, certamente esse é o melhor jogo para eu posso alocar em meu restrito e exclusivo tempo diário.\nComecei a ficar um tempo adicional na Coderockr, é importante que eu utilize esse tempo para fazer coisas legais que normalmente eu não faço durante o tempo de trabalho - como colaborar para open-source - em projetos que se relacionem ao Clipp. O Wagner não para de sublinhar o fato que que todos teremos grandes recompensas por entregar o Clipp finalizado.\n\n##### A melhorar\nÉ melhor que eu ouça menos música durante o trabalho, principalmente durante as horas que requerem maior concentração.\nAssisti muito GoT. No domingo não rendi suficientemente. Tenho que me esforçar mais para manter a minha rotina coerentemente.\nTenho que buscar o tempo perdido em meu Wunderlist para voltar a me sentir confortável.\n\nO Mateus não para de dar *showzinhos* e querer colocar a culpa nos outros devido as suas entregas escassas. Tenho que ser mais frio com ele, mais direto, como eu fui durante a reunião com o Wagner. Quando falei que eu não tomaria mais de 40 minutos para descobrir que o problema que o estava bloqueando estava no *Backend*.\n\n####Semana 16\n\nCara é incrível como sem música eu penso mais claramente sobre minha vida. Para sustentar minha tese a longo prazo, é importante que eu pesquise mais sobre o assunto. Vou deletar minha conta no Spotify pois sei que essa é uma das grandes fontes da minha proatividade quanto à musica.\n\nLi um post que aponta que as pessoas para serem de fato observadas por seus superiores devem servir como ferramentas. Acrescentava também que as pessoas que antecipam as necessidades dos seus superiores são as destacadas como mais valiosas. Isso tudo é óbvio, mas é bom ter em mente.\n\nMeditei sobre minha rotina e porque eu acabo a quebrando esporadicamente. Acredito que seja porquê ela de fato não é tão regular quanto deveria. Acho que no final de semana eu não posso quebrar a regra para fazer coisas mais \"legais\". Se a minha semana não contém tudo o que eu acho interessante, então a solução é colocar o que falta na semana e não abrir exceções nos finais de semana.\n\nAgora que estou mais próximo do trabalho, e também porquê eu necessito praticar alguma forma de esporte, acho que vou começar a correr pelas manhãs. Provavelmente bem no início da manhã é o tempo ideal para correr, visto que as pessoas estão sonolentas, o risco de criminalidade é muito menor.\n\nComecei a ler em voz alta a Eneida e estou gostando bastante da experiência. Me parece que este costume melhora minha maneira de falar na hora de agir em público.\n\nA senhora (Betinha) que me alugou o apartamento está super receptiva com a minha pessoa. Não obstante o marido dela tem auzhimer e ela está um tanto depressiva. Inclusive me perguntou qual a religião dos meus pais - ressaltando que, pelo menos rezar, é muito importante. Obviamente que eu fui delicado com ela mentindo que meus pais eram católicos pouco praticantes. É deveras interessante que eu fique razoavelmente fluente quanto essa doença para poder ser mais cordial e atencioso quanto às pessoas que são condicionalmente importantes para mim.\n\n\nEstou feliz com o fato de que aqui no meu novo apartamento eu não tenha acesso adquirido à internet. Atualmente estou furtando a conexão da Croasonho, que não é nada boa. Isso vai ser positivo pois vai estimular que eu realize trabalhos o mais \'offline\' o possível e fique longe da vasta gama de distrações que eu sou impelido quando estou na rede. Na verade acho super-positvo acessar menos à internet. Vou ficar mais focado e vai estimular-me a pesquisar mais sobre redes - um assunto que o meu conhecimento carece atualmente e de vital importância para um cientista da computação.\n\nNão posso querer dormir mais nos finais de semana. Tenho que elaborar um esquema de sono durante a semana que me permita não me sentir cansado e ter a necessidade de reposição nos finais de semana.\n\n##### O que foi bom\n\nO Rafa Jaques está feliz com o desenvolvimento do meu TCC. Mas eu não estou, preciso apertar o passo senão não vou entregar um trabalho digno de minha pessoa.\nA Tamiris veio falar comigo depois de um tempão, não respondi, mas é legal saber ser importante.\nMe mudei para meu novo apartamento, é legal aqui, acho que a longo prazo essa foi a melhor escolha que eu poderia fazer na minha vida a fim de me aproximar dos meus objetivos.\nOuvi bem pouca música, em partes porquê não sei onde está meu fone, mas também não senti tanta necessidade assim e meu pensamento fluiu de forma extraordinária.\nO Matheus está mais dedicado com o Clipp o que é muito positivo na minha opinião. Dessa forma, podemos nos dar bem sem ressentimentos da minha parte.\nAdicionei uma métrica à dashboard do meu blog para determinar a média diária de acessos, até então, tenho observado, aproximadamente, uns 80 acessos diários ao site. Isso é muito mais do que eu imaginava. Estou bastante contente e estimulado à produzir mais conteúdo, com crescente qualidade.\nMeu post sobre o Archlinux foi publicado em uma newsletter na Indonéisa! È incrível como o conteúdo em inglês tem muito mais alcance do que da forma que eu vinha construindo os trabalhos anteriore.\nComecei a ler o livro \'Pratical Vim\', aparentemente é um documento referência no assunto; abordando com profundidade o CORE do Vim e as intenções primárias da ferramenta.\n\nEstou gostando da leitura do o Snow Crash.\n\nEstou muito feliz com meu desktop. Ainda mais depois que encotrei o tema de solazired numix para gtk2.\n\nTive uma discussão sobre retórica com o Mathus e ele foi sincero a ponto de sugerir implicitamente que ele usualmente mente. Gostei da conversa e me despertou novo interesse sobre retórica.\n\n##### A melhorar\n\nMinha postura na cadeira não está boa o suficiente, tenho que procurar sentar ereta mente. Até porque é meio vergonhoso ficar esparramado na cadeira em meio as pessoas seletas que eu convivo (Júlia e Eminetto).\nPraticar mais exercícios.\n\nTenho que dar um jeito de melhorar minha postura de time com o Ednardo. A mente dele pode ser capciosa, mas não posso deixar isso me abalar, tenho que induzir nele minha forma de pensar, visto que a forma dele é totalmente caótica.\n\nTenho que me habituar a ler mais o que eu escrevo. Sei que o objetivo inicial é apenas tirar determinada ideia da minha mente. Não obstante, tenho que me acostumar com a \'arte de polir palavras\' como dizia Nietzsche, de outra forma nunca alcançarei o patamar onde serei digno de ser lido pelas pessoas mais ilustres.\n\nTenho que ser mais cauteloso nas minhas compras. Hoje comprei uma cama de 1600, a retórica do indívíduo que me vendeu foi excelente. De fato, é importante que eu tenha uma boa cama. Mas não posso me deixar influenciar de forma tão trivial como aconteceu hoje.\n\nO Elton falou no chat - para resolver um conflito com o Ednardo - que eu preciso ser mais político. Não acredito que ele veja isso como um real problema, foi mais por política quanto à LDS. Mesmo assim, tenho que encontrar formas de mitigar isso. Gosto e acho importante ser exigente, mas talvez às vezes eu sou apenas exigente, tenho que buscar interagir mais com o resto do pessoal para direcioná-los para o comportamento que eu espero deles.\n\nTenho que retomar a leitura do Getting Things Done, fazer resumo das partes importantes até então encontradas. Esse mês preciso render muito em meu TCC.\n\nTenho que ser mais proativo no início da manhã. O Elton muitas vezes tem que me pedir coisas que eu sei que ele vai pedir para eu fazer. Vou buscar dar um boost na minha performance durante a manhã, sem me distrair absolutamente nas primeiras horas. Depois disso, fica mais calmo e eu posso fazer interrupções no meu fluxo de trabalho a fim de relaxar.\n\n\n####Semana 17\n\n\nTenho que começar a escrever com mais frequência sobre PHP. Tenho a chance de ser altamente alavancado través do Elton para visibilidade nacional se escrever com frequência sobre PHP. Acho que duas vezes por mês é uma boa frequência para o assunto.\nGanhei uma cadeira super-foda.\n\nMeus pais vieram e me ajudaram nas coisas.\n\n####Semana 18\n\nParticipei do meu primeiro Hangout.\nMovi o servidor para a Digital Ocean.\nFui para o MeetUp dos Artesões de software, muito boa experiência e troca de ideias.\nMeu posto sobre design podre foi colocado no Medium e teve razoável repercusão.\n\nGanhei a caneca bacana da Compufour com meu nome escrito nela.\nResolvi parar de ver todo e qualquer mangá/anime até eu estar formado.\nDesenvolvi a possibilidade de editar completamente meus posts via terminal.\n\nHoje está frio e agradável.\nParticipei de uma NN na coderockr. Foi legal mas destriui com o resto do meu final de semana.\n\nQuero MUITO escrever meu TCC em Markdown, mas não vou fazer agora. Pesquisei bastante o assunto, e apesar de possível, é inalcançável no meu estado de desenvolvimento atual. Eu preciso ficar um Deus do Vim e de Latex ao mesmo tempo e ainda por cima criar um trabalho de valor. Sem falar nas idiossincrasias desnecessárias que o instituto adicionou. Fazer tudo isso é imposível por enquanto. Para o meut trabalho de mestrado me comprometo a fazer em Markdown mas por hora vou ficar com a solução parcial. Vou escrever posts sobre mainhas referências e utilizá-las para embasar meu trabalho.\n\n\n#####O que precisa ser melhorado\n\nPreciso prestar mais atenção nos requisitos senão eles me escapam e tenho que depender da opinião alheia para discuti-los.\n\nTalvez instalar o clipp na minha máquina ajude a mitigar esse problema.\n\nPreciso de focar mais no Tcc senão não vou me formar.\nPreciso ser mais rigoroso quanto minha rotina.\n\nO pessoal de Fortaleza está me deixando muito estressado, preciso refletir em meios de minimizar isso.\n\n\n\n####Semana 19\n\nI think i\'ll start writing in english as my native language is more and more unused by myself. Yesterday for example I stayed all the night thinking in English.\n\nI delayed my TCC presentation for the next semester it give me a great relief. Anyway I must hurry to build a really awesome project.\nIts starting to appear gaps on the attention that clipp development requires of myself. I wanna to use this time to improve myself and the clipp of course.  Finally another backend developer start to work at Compufour, the guy seems to be quite good and it will be awesome to have another guy on the team.  Matheus apparently started to see me in a more respective position. With me he practically dont make jokes that I\'m so used to see him applying on others.\n\nI wrote down some cool software in bash to help me on the daily tasks. Like to format a pretty  json in cli.\n\nI stayed so much extressed today Sat May 14 BRT 2015, it was apparently simple but it turns out to be of great complexity. The problem is that I decided to make it on the better way I know I could. Anyway I could not dishearten, the ideal way of work must be the way I do things. What I must do is to improve my velocity. One way of achieving that is to write more snippets and backend-cli tools. Another way is to improve my skills with Vim.\n\n\nNow  Sat May 16 20:02:46 BRT 2015 I\'m at Flowers Shopping drinking a coffe and writing this report. This is a very cool setting, I need to do this more frequently.\n\n\nI have to optimize my life for the kind of style I\'m looking for. Its like a nomad, but yet with much style. In order to have that I must posses only portable thins, but this things must be super cool.\n\nI\'m thinking in optimize my Blog, to write it again, better an just with the elements I consider essential for him.\n\n\nStrace appears to be a good tool for me to have in my skill set. I have to figure out ways to learn it.\n\nIt\'s in my goals to get a certification this year, I hope to get the LPI because currently I know much more about Linux than every thing else. So, to acheive that, it would be cool to make an online test about LPI1.\n\n\nMy github followers base is growing a lot currently, like one per day. This is super nice and I need to practise more open-source to get yet more visible than I\'m being right now.\n\nI moved from Lxde to only Openbox and I\'m quite happy, what was missing was a task laucher, and I found those. It was preaty easy to migrate afeter that because I\'ve been use LXDE in a very hardcore way, dealing with config files, pratically openbox itself. Another consideration about that is that if find extreamly easy to migre from one to another with Arch, this is the power of not choosing things for the user. Maybe in a near future I try Xmonad again.\n\nI\'m becaming really good at music, as a self instructor, I\'m finding too easy to get the theorical and pratical things easily.\n\n#####What need to be improved\n\nI need to improve my sleep schedule, I\'m sleeping more that I should.\n\n\n####Week 20\n\n\nToday, Mon May 18 18:54:08 BRT 2015 the whole day was a chaos, many requirements to be attended and I endup not finishing the marjority of them. Anyway, this reveals the crucial role I\'m doing in this project, and, for that, I\'m quite happy.\n\nDude, I studied the Multiple files section of Vim\'s book and I\'m super excited. I never move want to close vim. The truth is: you should not! You should have yours tabs with each project inside and work that way forever! I\'ll have to think about ways of doing just that.\n\nToday I got really stressed on the work, it was because I could not stop in a unique task. All of them needed my help somehow, and Fortaleza do not hesitate in being poor professionals.\n\nAnother thing I missed out today was to pass the midday at Coderockr, there I spend my rare and precious time bluntly. All days when I\'m in doubt to go to Coderockr I must remember how I feel today.\n\nMatheus is being an idiotic guy. He told in public that I told him that Leandro cannot control his Girlfriend. Of course its a lie, but he continues insisting on it.\n\n\nI\'m quite happy with what I\'m able to do with my current knowledge of CS. I\'m a really good hacker in the end.\n\nI finished the reading of Snow Crash, it was a really good book - I certainly must read more hacker books from now on.\n\n\nI made Cub\'s job quite quickly. It was really easy.\n\nI removed tint2 from my desktop and included a conky that I\'m aiming to customize deeply. This really seems the way to go as a good hacker.\n\n\n####Week 21\n\nI need to remember the moral landscape of Harris when giving value to things. Two major factors to remember, first that there are no such thing as moral values cannot be accountable into scientific facts; for that, the only necessary assumption is that our aim it to maximize the well being of living creatures.\n\nI resolved to write down daily my expectations to work at each day. From one to ten.\n\nThu May 28 08:54:03 BRT 2015\n\nCurrent expectation for working today: 7\n\n\n#####What need to be improved\nMy sleep schedule.\n\n#####Week 22\n\nI was invited to participate of another hangout - about traits in php an reuse.\n\nI was congratulated by Elton in the behalf of having made clipp free of programming errors and well styled.\n\nElton asked me to write a post about what I made on the clipp hooks so he could use this lore in other projects.\n\nI gone to another \"Coding dojo\" with the software craftsman group.\n\nClipp is almost finished for the release, I\'m currently making more interesting changes - architectural changes on it now.\n\nI started to \"really\" use Goodreads website, there I got his reference about the Internet book that I end up reading on this holyday. There is a really good place for someone like myself - I intend to read much more from its tips from now on.\n\nI started to read a book about relationships, lets see what comes from that.\n\n#####Week 23\n\nI\'m quite happy today Thu Jun 11 18:56:26 BRT 2015. I many posts this week, several improvements on Clipp and TCC and in my work flow.\nI\'m meditating practically all days, excluding the last two because I was in a hurry about TCC. I\'m going to work early too, this is making a observational difference in my daily performance.\n\nMy weekend was such a waste, I passed all time practically on bed watching videos. At least I had a good conversation with my parents - we talked for about an hour and the time seemed to pass quickly.\n\nI\'m reading a book about human relations and I feel like old world secret was revealed to me. Probably I\'ll be much better in human relations from now on.\n\n\n#####Week 24\nClipp finally moved the tag To 1.1! Matheus as always is a quite bad company, yesterday we went to drink a cofee and he stayed all the night talking about money and show how he is irresponsible about it.\n\n\n#References\n\n1. http://lifehacker.com/why-you-should-keep-a-journal-and-how-to-start-yours-1547057185\n2. http://99u.com/workbook/39643/the-secret-to-happiness-is-regular-audits',0,'2015-01-17 00:00:00'),(56,'Compiling PHP','Estou necessitando criar um sistema de backups pois estou gostando muito do\nmeu sistema operacional em seu estado atual.\n\n\nGostaria de utilizar o Glaciar',0,'2015-01-17 00:00:00'),(57,'Programming Log','This file is intended to be my programming report. Any thing I struggle with on my daily programming routine should be included in this file for the sake of latter review and decision taking.',0,'2015-06-15 00:00:00'),(58,'Advanced Pyresttest by example','<p>adsf</p>',0,'0000-00-00 00:00:00'),(60,'Dicas de Programação','Um objeto não tem que saber dos atributos de um objeto que lhe é passado como parãmetro.\nEssa é a lei de demeter.\n\nInterfaces fluentes são são uma quebra da lei de demeter\n\nAcessores que retornam this estão errados segundo a mesma lei.\n\nNão utilize blocos de código como o abaixo em programação orientada a objetos. Se você tem um bloco de código que pode ser reparados dos demais quer dizer que você tem um candidato à método.\n```\n//================= start ===============\n    Código aqui\n//================= end ===============\n```\n#Interfaces\n\nCrie muitas interfaces, principalmente quando trabalhando em grupo. A melhor maneira de fazer aquele seu colega parar de programar daquela forma que você não gosta é institucionalizando um padrão. O conceito de interfaces se encaixa perfeitamente para institucionalizar coisas.',0,'2015-01-20 00:00:00'),(81,'Quando refatorar','Hoje participei do primeiro - mas de longe não último - *coding* dojo da minha vida. Tive uma impressão bastante positiva sobre o processo.\n\nUm dos acontecimentos do evento, o qual prendeu meu pensamento, foi uma distinção feita entre reescrita e refatoração. O argumento utilizado foi que refatoração se trata de manter o design original apenas ajustando suas bordas e que reescrita significa destruição do design original em detrimento de outro mais adequado aos novos requisitos. Nunca tive em mente esta distinção, não obstante, a dúvida ficou pairada na minha mente e decidi pesquisar sobre o assunto. E, como eu suspeitava a [definição de refacoring](http://c2.com/cgi/wiki?WhatIsRefactoring) é o processo de alteração de software de uma forma que ele não mude seu comportamento externo (nenhuma menção sobre design). Não obstante, este fluxo de pensamento me induziu a pensar no caso da viabilidade da refatoração. Assunto que me deparei nestas duas últimas semanas em vista de uma refatoração substancial de um [código apodrecendo](http://www.jeancarlomachado.com.br/post/visualizar/00074/sintomas-de-design-podre).\n\nSou um programador. E acho que a postura correta do programador é que, em vista de um design melhor - para as necessidades atuais e futuras - sempre vale à pena a refatoração. Se você é um profissional na escrita de software é sua obrigação lutar pela base o mais limpa e concisa o possível. A postura de [If It Is Working Dont Change](http://c2.com/cgi/wiki?IfItIsWorkingDontChange) quase nunca é eficiente para o programador. Defender a manutenção do \"design original\" na hora da refatoração apenas \"ajustando as pontas\" soa um tanto quanto os *hacks* que geram [problemas de viscosidade](http://www.jeancarlomachado.com.br/post/visualizar/00074/sintomas-de-design-podre#Viscosidade). Em suma, se seus requisitos mudaram e seu software necessita de mudanças que o design não comporta, não me parece uma posição defensável para o programador - o profissional da escrita de software - defender a manutenção de algo insustentável.\n\nObviamente o mundo não é tão binário quanto eu gostaria. Os interesses variam no projeto. Um programador ideal se preocupa como o código, defende-o, mas existem outros *stakeholders*, o gerente de projetos por exemplo. Cabe a este, entre outras tarefas, controlar os prazos; para ele geralmente não é evidente a necessidade de refatoração de um código e, mesmo quando evidente, algumas vezes não lhe parece uma boa ideia.\n\nEm vista deste conflito de interesses, para que as duas partes fiquem satisfeitas, é necessário um processo racional. [Este post](http://c2.com/cgi/wiki?EconomicsOfRefactoring) sobre Economia da refatoração aborda os fatores de influência na hora de considerar a refatoração, cabe a ambas as partes dialogar e decidir se o momento é adequado à refatoração ou não.\n#Referências\n\n1. http://c2.com/cgi/wiki?WhatIsRefactoring\n2. http://c2.com/cgi/wiki?EconomicsOfRefactoring',1,'2015-03-04 00:00:00'),(61,'Notas do livro: Crepúsculo dos ídolos','Desde muito Nietzsche é meu filosofo favorito.\nEspero que este pequeno tributo auxilie a compreender o magnânimo\nempreendimento do pensador.\n\nAjuda a ti mesmo: então todos te ajudarão. Princípio do amor ao próximo.\n\n\nQue não sejamos covardes em relação aos nossos atos! Que não os\nabandonemos uma vez consumados! - O remorso é indecente.\n\nQuão pouco é preciso para ser feliz! O som de uma gaita de foles - Sem\nmúsica a vida seria um erro.\n\n*On ne peut penser et écrire qu\'assis* (G. Flaubert) *Só se pode\npensar e escrever sentado*. Te peguei, niilista! O sedentarismo é\njustamente o pecado contra o Espírito Santo. Apenas os pensamentos\ncaminhados têm valor.\n\n\nAprender a ver - habituar o olho à calma, à paciência, a deixar que\nas coisas se aproximem; adiar o juízo, aprender a envolver e cercar o\ncaso particular por todos os lados. Esta é a primeira preparação para\na primeira espiritualidade: não reagir imediatamente a um estímulo,\nmas lançar mão dos instintos que inibem e isolam. Aprender a ver,\nsegundo compreendo, é quase aquilo que o modo de falar não filosófico\nchama de vontade forte: o essencial, aí, é precisamente não \"querer\",\né poder suspender a decisão. Toda falta de espiritualidade, toda\nvulgaridade, repousa sobre a incapacidade de resistir a um estímulo -\né preciso reagir, segue-se cada impulso. Em muitos casos, semelhante\ncoação já é patologia, declínio, sintoma de esgotamento - quase\ntudo que a rudeza não filosófica designa pelo nome \"vício\" é apenas\nessa incapacidade fisiológica de não resistir.\n\n\nÀs vezes, o valor de uma coisa não se encontra no que com ela se\nalcança, mas naquilo que por ela se paga - naquilo que ela nos custa.\nDou um exemplo. As instituições liberais deixam de ser liberais\ntão logo sejam alcançadas: não há, posteriormente, piores e mais\nradicais lesadores da liberdade do que instituições liberais. Sabemos,\nafinal, o que elas conseguem fazer: elas minam a vontade de poder, elas\nsão o nivelamento de montanhas e vales elevados a categoria moral,\nelas apequenam, acovardam e incitam à busca de prazeres - com elas\ntriunfa sempre o animal de rebanho... Liberalismo: em linguagem clara,\n*transformação em animais de rebanho*... Enquanto ainda se luta por\nelas, essas mesmas instituições produzem efeitos bem diferentes; elas\nrealmente promovem a liberdade de uma maneira impressionante. Olhando-se\ncom mais atenção, é a guerra que produz esses efeitos, a guerra por\ninstituições liberais, que, enquanto guerra, faz os instintos liberais\nperdurarem. E a guerra educa para a liberdade. Pois o que é liberdade?\nTer a vontade de ser responsável por si mesmo. Conservar a distância\nque nos separa. Tornar-se mais indiferente à fadiga, à dureza, à\nprivação, inclusive à vida. Estar pronto a sacrificar homens à sua\ncausa sem descontar de si próprio. Liberdade significa que os instintos\nviris, que se alegram com a guerra e com a vitória, possuem o domínio\nsobre os instintos da \"felicidade\". O homem liberto, e tanto mais o\nespírito liberto, pisoteia a espécie desprezível de bem-estar com\nque sonham merceeiros, cristãos, vacas, mulheres, ingleses e outros\ndemocratas. O homem livre é guerreiro.\n\n\nPrimeiro princípio: deve-se ter necessidade de ser forte - caso\ncontrário, nunca chegamos a sê-lo.\n\n\nO gênio - em obras, em ações - é necessariamente um esbanjador: sua\ngrandeza está no fato de se gastar... O instinto de autoconservação\né, por assim dizer, tirado dos gonzos; a pressão avassaladora das\nenergias transbordantes lhe proíbe qualquer proteção e cautela desse\ngênero. As pessoas chamam isso de \"sacrifício\"; elas enaltecem o seu\n\"heroísmo\", sua indiferença em relação ao próprio bem-estar, sua\ndedicação a uma ideia, a uma grande causa, a uma pátria: apenas\nmal-entendidos... Ele derrama, transborda, se gasta, não se preocupa\ncom fatalidade, de maneira funesta, involuntária, da mesma forma que\no transbordamento de um rio é involuntário. Mas porque as pessoas\ndevem muito a esses explosivos, também lhes deram muito em troca, por\nexemplo, uma espécie de *moral superior*... Este é, afinal, o modo de\nser da gratidão humana: ela entende mal seus benfeitores.\n\n\nAqui a vista é livre. - Pode ser elevação da alma quando um filósofo\nse cala; pode ser amor quando se contradiz; é possível, da parte do\nhomem dedicado ao conhecimento uma cortesia que minta. Não foi sem\nsutileza que se disse: \"Il est indigne des grands caeurs de répandre le\ntrouble, qu\'ils resentent\" - *É digno dos grandes corações manifestar\na perturbação que sentem*: apenas precisamos acrescentar que não ter\nmedo do mais indigno pode ser igualmente grandeza de alma. Uma mulher\nque ama sacrifica sua honra; um homem dedicado ao conhecimento, e que\n\"ama\", talvez sacrifique sua humanidade; um deus que amava se tornou\njudeu...\n\n\nImaginemos naturezas às quais, por alguma razão, falte a aprovação\npública, que saibam que não são consideradas benéficas, úteis -\naquele sentimento de chandala, o sentimento de não ser considerado como\nigual, mas como excluído, indigno, impurificador. Todas essas naturezas\npossuem a cor do subterrâneo em seus pensamentos e ações; nelas tudo\nse torna mais pálido do que naquelas sobre cuja existência repousa\na luz do dia. Porém quase todas as formas de existência que hoje\nrespeitamos viveram outrora nessa atmosfera meio sepulcral: o homem de\nciência, o artista, o gênio, o livre-pensador, o ator, o comerciante,\no grande descobridor... Enquanto o sacerdote foi considerado o tipo\nsupremo, toda espécie valiosa de homem foi desvalorizada. Aproxima-se\no tempo - eu garanto - em que o sacerdote será considerado como o\ntipo mais baixo, como nosso chandala, como a espécie de homem mais\nmentirosa, mais indecente... Chamo a atenção para o fato de que\nmesmo agora, sob o mais ameno regime de costumes que alguma vez já\nse tenha dominado na Terra, ao menos na Europa, toda a vida à parte,\ntodo prolongado, demasiado prolongado estar por baixo, toda forma\nde existência insólita, opaca, nos faz compreender aquele tipo de\ncriminoso leva à perfeição. Todos os inovadores de espírito levam\nna testa por algum tempo o signo pálido e fatalista do chandala: não\nporque sejam assim considerados, mas porque eles mesmos percebem o\nterrível abismo que os separa de tudo o que é tradicional e honrado.\nQuase todo gênio conhece a \"existência catilinária\" como um de\nseus desdobramentos, um sentimento de ódio, vingança e rebelião\ncontra tudo que já é, que não mais se torna... catilina - a forma de\npreexistência de todo César.\n\n\n\nAs coisas boas são deveras dispendiosas: e sempre vale a lei de quem\nas possui. Tudo o que é bom é herança: o que não é herdado é\nimperfeito, é começo...\n\n\nA rigorosa sustentação de gestos importantes e seletos, a\nobrigatoriedade de viver apenas com pessoas que não se \"deixam ir\" são\nperfeitamente suficientes para tornar uma pessoa importante e seleta:\nem duas ou três gerações já está tudo interiorizado. É decisivo\npara o destino dos povos e da humanidade que se comece a cultura pelo\nlugar certo - não pela \"alma\" (como era a funesta superstição dos\nsacerdotes e semi sacerdotes): o lugar certo é o corpo, o gesto, a\ndieta e a fisiologia, o resto é consequência... É por isso que\nos gregos são o primeiro acontecimento cultural da história -\neles sabiam, eles faziam o que era necessário; o cristianismo, que\ndesprezava o corpo, foi a pior desgraça da humanidade até agora.\n\n\nGoethe não foi um acontecimento alemão, mas europeu: uma tentativa\ngrandiosa de superar o século XVIII mediante um retorno à natureza,\nmediante uma ascensão à naturalidade da Renascença, uma espécie de\nauto superação por parte daquele século. Dele, tinha os instintos\nmais fortes: a sensibilidade, a idolatria da natureza, o caráter\nanti-histórico, idealista, irreal e revolucionário (este último é\napenas uma forma do irreal). Ele se serviu da história, da ciência\nnatural, da Antiguidade, bem como de Espinosa, sobretudo da atividade\nprática; ele se cercou apenas de horizontes cerrados; não se desligou\nda vida, mas se introduziu nela; não desanimou, e tomou a seu cargo,\nassumiu e assimilou tanto quanto foi possível. O que ele queria era\ntotalidade; ele combatia a separação entre razão, sensibilidade,\nsentimento e vontade (pregada por Kant, o antípoda de Goethe, numa\nescolástica das mais apavorantes), ele se disciplinou para o todo,\nele se criou... Em meio a uma época de inclinações irreais, Goethe\nfoi um realista convicto: ele disse sim a tudo que nessa época era\nlhe apresentado - ele não teve experiência maior que a daquele\n*ens uealissimum* chamado Napoleão. Goethe concebeu um homem forte,\nextremamente culto, hábil em toda a vida corporal, com autodomínio,\ncom respeito por si mesmo, que pode ter a ousadia de se permitir toda\na extensão e riqueza da naturalidade, que é forte o bastante para\nessa liberdade; o homem da tolerância, não da fraqueza, mas por\nforça, pois sabe usar em seu proveito mesmo aquilo que faria uma\nnatureza medíocre sucumbir; o homem para o qual nada mais existe de\nproibido a não ser a fraqueza, seja o seu nome vício ou virtude...\nSemelhante espírito liberto se encontra em meio ao universo com um\nfatalismo alegre e confiante, na crença de que apenas a parte isolada\né reprovável, de que tudo se redime e se afirma no todo - ele não\nnega mais... Mas semelhante crença é a mais elevada de todas as\ncrenças possíveis: eu a batizei com o nome de *Dioniso*.\n\n\nGoethe é o último alemão que respeito; ele teria sentido três coisas\nque sinto - e também nos entendemos acerca da \"cruz\"... Perguntam-me\ncom frequência para que exatamente escrevo em alemão: em parte alguma\neu seria mais lido do que em minha pátria. Mas quem sabe, afinal, se\ndesejo mesmo ser lido hoje? - Criar coisas nas quais o tempo gaste seus\ndentes em vão; esforçar-se por alcançar uma pequena eternidade na\nforma, na substância - nunca fui modesto o bastante para pedir menos de\nmim. O aforismo, a sentença, nos quais sou o primeiro a ser um mestre\nentre os alemães, são as formas da \"eternidade\"; minha ambição é\ndizer em dez frases o que qualquer outro diz num livro - o que qualquer\noutro não diz num livro..\n\nDei à humanidade o livro mais profundo que ela possui, o meu\nZaratustra: em breve lhe darei o mais independente.\n\n\nO meu gosto, que pode ser o contrário de um gosto tolerante, também\nnisso está longe de dizer sim em bloco: ele absolutamente não gosta de\ndizer sim, antes prefere dizer não e, mais do que tudo, prefere não\ndizer nada...\n\n\nMeu sentido de estilo, para o epigrama como estilo, despertou quase\ninstantaneamente no contato com Salústio. Não esqueci o espanto do\nmeu venerado professor Corssen quando teve de dar a nota mais alta\nao seu pior aluno de latim - num instante eu estava pronto. Conciso,\nsevero, com tanta substância quanto possível em seu fundamento, uma\nmaldade fria em relação à \"palavra bela\", também ao \"sentimento\nbelo\" - nisso me descobri. Será reconhecida em minhas obras, até em\nmeu Zaratustra, uma ambição muito séria pelo estilo romano, pelo aere\nperennius *mais duradouro que o bronze* no estilo. Não foi diferente no\nmeu primeiro contato com Horácio. Até hoje, poeta algum proporcionou\no mesmo encanto artístico que me foi dado desde o início por uma\node horaciana. Em certas línguas não se pode nem mesmo querer o que\nfoi alcançado aqui. Esse mosaico de palavras em que cada uma delas,\ncom som, com lugar, com conceito, derrama a sua força à direita e\nà esquerda e sobre o todo, esse minimum em extensão e número de\nsignos - tudo isso é romano e, se quiserem acreditar em mim, nobre\npar excellence. Toda a poesia restante, em comparação, se torna algo\npopular demais - mera tagarelice sentimental...\n\n\nNada melhor do que Tucídides para curar do deplorável tingimento\nidealista dos gregos que o jovem \"classicamente formado\" leva para sua\nvida como recompensa por seu adestramento ginasial.\n\n\n**FALA O MARTELO**\n\n\"Por que tão duro?\" - perguntou certa vez ao diamante o carvão de\ncozinha: \"Não somos parentes próximos?\"\n\nPor que tão moles? Oh, meus irmãos, essa é a pergunta que os faço:\nnão sois - meus irmãos?\n\nPor que tão moles, por que cedeis e condescendeis assim? Por que há\ntanta renegação em vossos corações? Tão pouco destino em vossos\nolhares?\n\nE se não quereis ser destinos e implacáveis: como podereis algum dia -\nvencer comigo?\n\nPois todos os criadores são duros. E deverá vos parecer\nbem-aventurança imprimir vossa mão nos milênios como se fossem cera.\n\nBem-aventurança, escrever na vontade de milênios como se fosse bronze\n- mais duros que o bronze - mais nobres que o bronze. Só o inteiramente\nduro é mais nobre.\n\nEsta nova tábua, oh meus irmãos, coloco acima de vós: tornai-vos duros!',1,'2015-01-22 00:00:00'),(59,'Archlinux wanderings: changing GUI\'s ','\nThis week I moved from LXDE to Openbox-only, and I\'m quite happy with it. For considerable time I\'ve been looking for a more decoupled way of \"desktopping\". I didn\'t realized that what was missing was a task launcher, just by accident I found [synapse](https://www.archlinux.org/packages/community/x86_64/synapse/) in a Archlinux group, and finally understood LXDE was redundant for me. I didn\'t have to learn anything new because I\'ve been using LXDE in a very hardcore way, dealing with config files directly, practically Openbox itself - which was installed under the hood.\n\nNow, going to the main point, I find out extremely easy to migrate (the installation) from one to another with Arch. With other Linux distributions, say: Ubuntu, it\'s extremely difficult to make a clean installation of a GUI differently of those the software vendors pre-installed; you will probably end up with redundancy and conflicting files. Arch is diffenrent, I took the most intuitive way possible - simply uninstalled LXDE and installed Openbox - and it simply worked, no conflicts, a clean installation. This is the magic of empowering the user, to let the users do wherever they want and to do not \"improve\" for the sake of the distribution third party sofware packages. This is the [Arch Way](https://wiki.archlinux.org/index.php/The_Arch_Way) in action, and I\'m quite happy with it.\n\nBeyond that I already have installed, on the same Arch, [Xmonad](http://www.google.com.br/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CB4QFjAA&url=http%3A%2F%2Fxmonad.org%2F&ei=TeNXVfDuO6bLsASVp4HwDg&usg=AFQjCNE0QNdZxNKScXML_mHNQKEO9yxfnw&bvm=bv.93564037,d.cWc). A tiling window manager that, one day, I intend to use as my main GUI.\n\nFor those interested on my setup, currently the software stack I\'m using for desktop is this:\n- Openbox;\n- Synapse (task laucher);\n- Nitrogen (wallpaper setting);\n- Tint2  (task bar);\n- Conky;\n- Thunar (file manager);\n- Vim;\n- urxvt (console);\n- netctl (network cofiguration);\n- cmus and Spotify\n- Firefox (beyond browser I use it as a pdf viewer too);\n\n\nThat\'s it, if you like, have any doubt, or piece of advice to give me, please don\'t hesitate in commenting!',1,'2015-05-16 00:00:00'),(66,'Porquê Archlinux','As pessoas com frequência me perguntam porquê eu utilizo Archlinux. Neste post vou...\n\nA partir de agora vou me referir ao Arch Linux como Arch para facilitar meu trabalho.\n\n##Descrevendo o Arch\n###A filosofia Arch\n\nSão cinco as regras que compõem *O caminho Arch*. São os direcionadores da comunidade do Arch em suas atividades. Ao invés de procurar influências externas, o time de desenvolvimento do Arch são resolutos em seu comprometimento com a filosofia Arch. Se você compartilha essas visões, sinta-se encorajado em usar Arch.\n\n####Simplicidade\nEste é o principal princípio por trás do desenvolvimento do Arch. No contexto do Arch Linux simplicidade é definida como a inexistência de modificações e adições desnecessárias. Provendo um sistema UNIX-like que possibilita que os usuários customizem de acordo com suas necessidades.\n\n##### Complexidade sem complicação\n\nO ArchLinux herda a inerente complexidade de um sistema GNU/Linux, enquanto mantém o sistema bem organizado e transparente. Os desenvolvedores do Arch Linux e seus usuários acreditam que a tentativa de esconder complexidade resulta em um sistema ainda mais complexo.\n\n####Código correto em detrimento de convenções\n\nO sistema Arch dá precedência à elegancia em design e código limpo, correto e simples em detrimento de *patches* desnecesários, automação, eye candy ou \"newbie-friendliness\". Atualizações são mantidas ao mínimo absoluto, idealmente nunca. Simplicidade no design sempre triunfará sobre simplicidade na interface do usuário.\n\n*Simplicidade de implementação, elegancia no código, e minimalismo sempre serão as mais altas prioridades por trás do desenvolvimento do Arch*\n\n####Centrado no usuário\n\nDiferentemente da maioria das distribuições que buscam ser *user-friendly*, Arch se cmpromete em ser *user-centric*.\n\n####Franqueza\n\n####Liberdade\n\n##Arch vs Outras distribuições\n\n##Resumindo\n\n\n##Razões\n\nArchlinux garante que não vai mexer nos arquivos de configuração dos seus programas.\nDocumentação excelente.\n- Você decide o que o seu sistema vai ser. Uma nova instalação do Archlinux contém somente os pacotes básicos.\n- O archlinux tem uma filosofia de desenvolvimento em praticamente todos os aspectos similar a minha filosofia de desenvolvimento\n- Funcionalidade sobre ideologia. O ArchLinux oferece tanto pacotes open-source quanto pacotes proprietários. É você quem escolhe o que vai ser.\n\nEu me esforço para manter poucos pacotes.\n##Fatores de exclusão\n\n\n##Fatores de inclusão\nVocê gosta de controle total\nFaça primeiro depois pergunte\n\n##Referências\n\n1. https://wiki.archlinux.org/index.php/The_Arch_Way\n2. https://wiki.archlinux.org/index.php/Arch_compared_to_other_distributions#Debian_GNU.2FLinux\n\n\n\n\n\nRule of Silence: When a program has nothing surprising to say, it should say nothing.\n\nOne of Unix\'s oldest and most persistent design rules is that when a program has nothing interesting or surprising to say, it should shut up. Well-behaved Unix programs do their jobs unobtrusively, with a minimum of fuss and bother. Silence is golden.\n\nThis silence is golden rule evolved originally because Unix predates video displays. On the slow printing terminals of 1969, each line of unnecessary output was a serious drain on the user\'s time. That constraint is gone, but excellent reasons for terseness remain.\n\nI think that the terseness of Unix programs is a central feature of the style. When your program\'s output becomes another\'s input, it should be easy to pick out the needed bits. And for people it is a human-factors necessity — important information should not be mixed in with verbosity about internal program behavior. If all displayed information is important, important information is easy to find.\n-- Ken Arnold\n\nWell-designed programs treat the user\'s attention and concentration as a precious and limited resource, only to be claimed when necessary.\n\n\n\nEven more often (at least in the commercial software world) excessive complexity comes from project requirements that are based on the marketing fad of the month rather than the reality of what customers want or software can actually deliver. Many a good design has been smothered under marketing\'s pile of “checklist features” — features that, often, no customer will ever use. And a vicious circle operates; the competition thinks it has to compete with chrome by adding more chrome. Pretty soon, massive bloat is the industry standard and everyone is using huge, buggy programs not even their developers can love.\n\n\nWe observed above that software is transparent when you can look at it and immediately see what is going on. It is simple when what is going on is uncomplicated enough for a human brain to reason about all the potential cases without strain. The more your programs have both of these qualities, the more robust they will be.\n\n\n\nHuman beings are notoriously bad at sweating the details. Accordingly, any kind of hand-hacking of programs is a rich source of delays and errors. The simpler and more abstracted your program specification can be, the more likely it is that the human designer will have gotten it right. Generated code (at every level) is almost always cheaper and more reliable than hand-hacked.\n\nWe all know this is true (it\'s why we have compilers and interpreters, after all) but we often don\'t think about the implications. High-level-language code that\'s repetitive and mind-numbing for humans to write is just as productive a target for a code generator as machine code. It pays to use code generators when they can raise the level of abstraction — that is, when the specification language for the generator is simpler than the generated code, and the code doesn\'t have to be hand-hacked afterwards.\n\nIn the Unix tradition, code generators are heavily used to automate error-prone detail work. Parser/lexer generators are the classic examples; makefile generators and GUI interface builders are newer ones.\n\n\n---\n\n\nEverything that can be a source- and destination-independent filter should be one.\n\nData streams should if at all possible be textual (so they can be viewed and filtered with standard tools).\n\nDatabase layouts and application protocols should if at all possible be textual (human-readable and human-editable).\n\nComplex front ends (user interfaces) should be cleanly separated from complex back ends.\n\nWhenever possible, prototype in an interpreted language before coding C.\n\nMixing languages is better than writing everything in one, if and only if using only that one is likely to overcomplicate the program.\n\nBe generous in what you accept, rigorous in what you emit.\n\nWhen filtering, never throw away information you don\'t need to.\n\nSmall is beautiful. Write programs that do as little as is consistent with getting the job done.\n\n---\n\nWhen you see the right thing, do it — this may look like more work in the short term, but it\'s the path of least effort in the long run. If you don\'t know what the right thing is, do the minimum necessary to get the job done, at least until you figure out what the right thing is.\n\nTo do the Unix philosophy right, you have to be loyal to excellence. You have to believe that software design is a craft worth all the intelligence, creativity, and passion you can muster. Otherwise you won\'t look past the easy, stereotyped ways of approaching design and implementation; you\'ll rush into coding when you should be thinking. You\'ll carelessly complicate when you should be relentlessly simplifying — and then you\'ll wonder why your code bloats and debugging is so hard.\n\nTo do the Unix philosophy right, you have to value your own time enough never to waste it. If someone has already solved a problem once, don\'t let pride or politics suck you into solving it a second time rather than re-using. And never work harder than you have to; work smarter instead, and save the extra effort for when you need it. Lean on your tools and automate everything you can.\n\nSoftware design and implementation should be a joyous art, a kind of high-level play. If this attitude seems preposterous or vaguely embarrassing to you, stop and think; ask yourself what you\'ve forgotten. Why do you design software instead of doing something else to make money or pass the time? You must have thought software was worthy of your passion once....\n\nTo do the Unix philosophy right, you need to have (or recover) that attitude. You need to care. You need to play. You need to be willing to explore.\n\nWe hope you\'ll bring this attitude to the rest of this book. Or, at least, that this book will help you rediscover it.\n\n---\n\n\n## Archlinux em um Macbook\n\nA bateria do macbook é fantásicamente boa. No meu ach eu consigo tranquilamente sustentar a bateria por 12horas. Sem o X por provavelmente o dobro.',0,'2015-01-24 00:00:00'),(62,'Compilando o PHP','Pretendo descrever aqui o processo de compilação do PHP em uma máquina *nix.\n\n\n#Compilando\nRequisitos:\n\n-autoconf\n-automake\n-libtool\n-re2c\n-flex\n-bison\n\n\n#Compilando a partir do master.\n\nPrimeiramente, utilizando os arquivos do git não há arquivo de configuração! É necessário criá-lo.\n\n```\n./buildconf\n```\nNo diretório raiz do projeto. Você terá que fazer isso toda a vez que trocar de versão do PHP no repositório.\n\n```\n    You have to have the GNU autoconf package installed so you can generate the configure script from configure.in. Just run ./buildconf in the top-level directory after getting the sources from the Git server. (Also, unless you run configure with the --enable-maintainer-mode option, the configure script will not automatically get rebuilt when the configure.in file is updated, so you should make sure to do that manually when you notice configure.in has changed. One symptom of this is finding things like @VARIABLE@ in your Makefile after configure or config.status is run.\n\n```\n\n#Configure\n\n#Compilando\nmake -j `nproc`\nmake test\nmake install\n\n#Configurando o php.ini\n\n##Configure o timezone\n\n#CGI\n*Common Gateway Interface* é um conjunto de convenções para delegar requisições de URL para scripts. CGI é mais lento!\n\n##PHP-FPM\n\nÉ um administrador de processos CGI para PHP.  \nFaz parte do fonte do PHP desde a versão 5.3.3\n\n##Configurando\n\nno comando configure adicione o parâmetro --enable-fpm\n\n```\nThis provides us with a new binary, called php-fpm, and a default configuration file called php-fpm.conf is installed in /etc. \n\n```\n\n#OBS\nSe você for compilar múltiplas versões do php, lembre-se de limpar a casa antes.\n```\nmake clean\n```\n\n#Compilando extensões\n\n\nn our example, i will tell you how can you add iconv php extension without recompiling PHP.\n\nA sample error for iconv php extension which was not installed\nFatal error: Call to undefined function iconv() in /some/path/file.php line 12\n\niconv php extension necessary configuration & compilation :\nView current php version\nphp -v\n\nOutput :\nPHP 5.2.13 (cli) (built: Jun 23 2010 04:49:30)\nCopyright (c) 1997-2010 The PHP Group\n\nDownloading the same php version source code from php.net\ncd /tmp/\nwget http://museum.php.net/php5/php-5.2.13.tar.bz2\ntar -jxf php-5.2.13.tar.bz2\ncd php-5.2.13/ext/iconv\n\nPrepare php extension to compile it.\nphpize\n\nOutput :\nConfiguring for:\nPHP Api Version: 20041225\nZend Module Api No: 20060613\nZend Extension Api No: 220060519\n\naclocal\n./configure\nmake\nmake install\n\nYou can can see iconv php extension is installed under php extensions directory:\nls /usr/local/lib/php/extensions/no-debug-non-zts-20060613/iconv.so\n\nEnable iconv PHP extension in php.ini\necho \"extension=iconv.so\" >> /usr/local/lib/php.ini\n\nVerify iconv :\nphp -i | grep -i \"iconv support\"\n\nOutput:\niconv support => enabled\n\n#Referências\n\n1. http://www.hackersgarage.com/iconv-php-extension-installation-without-recompiling-php.html2. ',0,'2015-01-24 00:00:00'),(63,'Mantendo meu Archlinux em 2015','Este ano pretendo utilizar somente UM sistema operacional durante todos os 365 dias.\nEste post é para criar um log sobre este empreendimento, e se ,no final das contas, eu consegui ou não.\n\n\n##Aumentando a estabilidade\n\nArch é uma distribuição estável devido à suas peculiares características. Compromentimento com simplicidade, utilização de pacotes sem \"patches\", etc. Exitem vários reports de administradores de sistemas utilizando o archlinux em sevidores de produção.\n\n\n###Manter os pacotes antigos guardados\n\nO pacman guarda os pacotes previamente instalados na pasta ``/var/cache/pacman/pkg``. Uns 8 GB são o suficiente para armazenar estes arquivos.\n\n\n###Utilizar configurações recomendadas\n\nO recomendado como padrão reflete as melhores práticas, escolhidas para maximizar a estabilidade.\n\n\n###Evitar pacotes não oficiais\n\nTenha cuidado com Helpers da AUR - simplificadores de instalação de pacotes AUR.\n\n####Faça uma revisão periódica dos pacotes da AUR que estão de fato em uso.\n\nSó utilize servidores de terceiros quando for estritamente necessário.\n\n###Evite pacotes de desenvolvimento\n\n###Utilize o kernel lts\n\nO pacote ``linux-lts`` contém o kernel estável. Mesmo se não utilzizado como kernel principal é recomendável utilizar este como fallback.\n\n###Utilize containers para software experimental\n\n\n###Utilize o pacman para instalar software\nCaso precise instalar algum software não provido pelo arch, é melhor criar um pacote do que instalar manualmente.\n\n###Utilize softwares bem testados\n\n###Escolha drivers open source\n\nNever run pacman -Sy, instead use pacman -Syu.\n\nAvoid using the --force option with pacman, especially in commands such as pacman -Syu --force involving more than one package. The --force option ignores file conflicts and can even cause file loss when files are relocated between different packages! In a properly maintained system, it should never need to be used.\n\nDo not use pacman -Rdd package. Using the -d flag skips dependency checks during package removal. As a result, a package providing a critical dependency could be removed, resulting in a broken system.\n\n---\n\nRevert package upgrades that cause instability\n\nIn the event that a particular package upgrade results in system instability, install the last known stable version of the package from the local pacman cache using the following command:\n\npacman -U /var/cache/pacman/pkg/Package-Name.pkg.tar.gz\n\nFor more detailed information on reverting to older packages, consult the Arch wikipage, Downgrading packages.\n\nOnce the package is reverted, temporarily add it to the IgnorePkg section of pacman.conf, until the difficulty with the updated package is resolved. Consult the Arch wiki and/or webforums for advice, and file a bug report if necessary.\n\n---\n\nAlways back up config files before editing\n\nBefore editing any configuration file, always back up a known working version of that config file. In the event that changes in the config file cause problems, one can revert to the previous stable config file. Do this from a text editor by first saving the file to a backup copy before making any alterations; or execute the following command:\n\ncp config config~\n\nUsing ~ will ensure there is a readily distinguishable human-made backup conf file if pacman creates a .pacnew, .pacsave, or .pacorig file using the active config file.\n\netckeeper can help dealing with config files. It keeps the whole /etc directory in a version control.\nPeriodically clean configuration files\n\nOld configuration files may conflict with newer software versions, or corrupt over time. Remove unneeded configurations periodically, particularly in your home folder and ~/.config. For similar reasons, take care in sharing home folders between installations.\n\n---\n\nWarning: Instead of immediately updating as soon as updates are available, users must recognize that due to the nature of Arch\'s rolling release approach, an update may have unforeseen consequences. This means that it is not wise to update if, for example, one is about to deliver an important presentation. Rather, update during free time and be prepared to deal with any problems that may arise.\n\n---\n\n Tip: Remember that pacman\'s output is logged in\n  \n Os reports tem que ser em ordem de ocorrência senão não vou conseguir dar track sem colocar data e piorar a legibilidade.\n \n #Bug da terceira hibernação\n \n !Maldito tempo verbal! (isso está acontecendo agora)\n \n Ao hibernar pela terceira vez o sistema se torna um pouco laggy. Demorei muito até conseguir diagnoisticar.',0,'2015-03-05 00:00:00'),(64,'Notes of the Book: How to win friends and influence people ','This is a collection of notes I extracted from this classical: *How to win friends and influence people*.\n\nAny fool can criticize, condemn and complain - and most fools do.\n\nIt takes character and self-control to be under-standing and forgiving.\n\n\"A great man show his greatness by the way he treats little men.\"\n\nA millionaire said \"I consider my ability to arouse enthusiasm among my people the greatest asset I possess. I am anxious to praise but loath to find fault. If I like anything, I am hearty in my approbation and lavish in my praise\".\n\nWhenever you go out-of-doors, draw the chin in, carry the crown of the head high, and fill the lungs to the utmost, drink in the sunshine; greet yours friends with a smile, and put soul into every handclasp. Do not fear being misunderstood and do not waste a minute thinking about your enemies. Try to fix firmly in your mind what you would like to do; an then, without veering off direction, you will move straight to the goal. Keep your mind on the great and splendid things you would like to do, and then, as days go gliding away, you will find yourself unconsciously seizing upon the opportunities that are required for the fulfillment of your desire, just as the coral insect takes from the running tide the element it needs. We became like that on which our hearts are fixed. Carry your chin in and the crown of your head high. We are gods in the chrysalis.\n\n\nRemember that a person\'s name is to that person the sweetest and most important sound in any language.\n\nThe policy of remembering and honoring the names of his friends and business associates was one of the secrets of Andrew Carnegies\'s leadership.\n\nEliot himself was a past master of the art of listening, Henry James, one of America\'s first great novelists recalled: \"Dr. Eliot\'s listening was no mere silence, but a form of activity. Sitting very erect on the end of his spine with hands joined in his lap, making no movement except that he revolved his thumbs around each other faster or slower, he faced his interlocutor and seemed to be hearing with his eyes and his ears. He listened with his mind and attentively consider what you had to say while you say it. ... At the end of an interview the person who talked to him felt that he had his say.\"\n\nOne of the greatest listeners of modern times was Sigmund Freud. A man who met Freud described his manner of listening: \"It struck me so forcibly that I shall never forget him. He had qualities which I had never seen in any other man. There was none of that piercing \'soul penetrating gaze\' business. His eyes where mild and genial. His voice was low and kind. His gestures were few. But the attention he gave me, his appreciation of what I said, event when I said it badly, was extraordinary, you have no idea what it mean to be listened like that.\"\n\n\nBe a good listener. Encourage others to talk about themselves.\n\nTalk in terms of other person\'s interests.\n\nLittle phrases such as \"I\'m sorry to trouble you,\" \"Would you be so kind as to --- ?\" \"Won\'t you please?\" \"Would you mind?\" \"Thank you\" - little courtesies like these oil the cogs of the monotonous grind of everyday life - and, incidentally, they are the hallmark of good breeding.\n\n\nIn a Nutshell - Six Ways to Make People Like You\n\n1. Become genuinely interested in other people.\n2. Smile.\n3. Remember that a person\'s name is to that person the sweetest and most important sound in any language.\n4. Be a good listener. Encourage others to talk about themselves.\n5. Talk in terms of the other person\'s interests.\n6. Make the other person feel important and do it sincerely.\n\n\nYou can measure the size of a person by what makes him or her angry.\n\nListen first. Give your opponents a chance to talk. Let them finish. Do not resist, defend or debate. This only rises barriers. Ty to build bridges of understanding. Don\'t build higher barriers of misunderstanding.\n\nWe sometimes find ourselves changing our minds without any resistance or heavy emotion, but if we are told we are wrong, we resent the imputation and harden our hearts. We are incredibly heedless in the formation of our beliefs, but find ourselves filled with an illicit passion for them when anyone proposes to rob us of their companionship. It is obviously not the ideas themselves that are dear to us, but our self-esteem which is threatened. The little word \"my\" is the most important one in human affairs, and properly to reckon with it is the beginning of wisdom. It has the same force whether it is \"my\" dinner, \"my\" dog, and \"my\" house, or \"my\" father, \"my\" country, and \"my\" God. We not only resent the imputation that our watch is wrong, or our car shabby, but that our conception of the canals of Mars, of the pronunciation of \"Epictetus,\" of the medicinal value of salicin, or the date of Sargon I is subject to revision. We like to continue to believe what we have been accustomed to accept as true and the resentment aroused when manner of excuse for clinging to it. The result is that most of our so-called reasoning consists in finding arguments for going on believing as we already do.\n\nI judge people by their own principles - not by my own.\n\nThere is a certain degree of satisfaction in having the courage to admit one\'s erros. It only clears the air of guilty and defensiveness, but often helps solve the problem created by the error.\n\nWhen we are right let\'s try to win people gently and tactfully to our way of thinking, and when we are wrong - and that will be surprisingly often, if we are hones with ourselves - let\'s admit our mistakes quickly and with enthusiasm. Not only will that technique product astonishing results; but, believe it or not, its a lot more fun, under the circumstances, than trying to defend oneself.\n\n\nPrinciple - If you are wrong, admit it quickly and emphatically.\n\nPrinciple - Let the other person do a great deal of the talking.\n\nPrinciple - Let the other person that the idea is his or hers.\n\nRemember that other people may be totally wrong. But they don\'t think so. Don\'t condemn them. Any fool can do that. Try to understand them. Only wise, tolerant, exceptional people even try to do that.\n\n\"I would rather walk the sidewalk in front of a person\'s office for two hours before an interview\", said Dean Donhan of the Harvard business school, \"than step into that office without a perfectly clear idea of what I was going to say and what that person - from my knowledge of his or hers interests and motives - was likely to answer.\"\n\n\nI don\'t blame your own iota for feeling as you do. If I were you I would undoubtedly feel just as you do.\n\nPrinciple - Be sympathetic with other person\'s ideas and desires.\n\nPrinciple - Dramatize your ideas.\n\nPrinciple - Talk about your own mistakes before criticizing the other person.\n\nPrinciple - Ask question instead of givin direct orders.\n\nEven if we are right and the other person is definitely wrong, we only destroy ego by cause someone to lose face. The legendary French aviation pioneer and author Anthoine de Saint wrote: \"I have no right to say or do anything that diminishes a man in his own eyes . What matters is not what I think of him, but what he thinks of himself. Hurting a man in his dignity is a crime.\"\n\nPrinciple - Let the other people save face.\n\nPraise the slightest improvement and praise every improvement. Be hearty in your approbation and lavish in your praise.\n\nIn short, if you want to improve a person in a certain aspect, act as thought that particular trait were already one of his or her outstanding characteristics. Shakespeare said \"Assume a virtue, if you have it not.\" And it might be well to assume and state openly that other people have the virtue you want them to develop. Give them a fine reputation to live up to, and they will make prodigious efforts rather than see you disillusioned.\n\nGive the other person a fine reputation to live up to.\n\nMany people begin their criticism with sincere praise followed by the word \"but\" and ending with a critical statement. The problem could be easily handled by changing the word but to and.\n\nPrinciple - Call attention to people\'s mistakes indirectly.\n\nMake the other person happy about doing the thing you suggest.\n\nThe first think to learn in intercourse with others is noninterference with their own peculiar ways of being happy.\n\n\nI shall pass this way but once; any good, therefore, that I can do or any kindness that I can show to any human being, let me do it now. Let me not defer or neglect it, for I shall not pass this way again.\n\n\nThat\'s it, I hope it will be useful for others as well it is for me.',1,'2015-06-21 20:00:00'),(65,'Dicas de escrita','Dicas que estou coletando com experiência e pesquisa.\n\n##Crie uma hierarquia de ideias\n\nCopie de suas fontes (não transcreva) as partes que você acha importante em sua pesquisa. Depois, quando você se deparar com elas novamente, você terá uma pensamento muito mais organizado sobre a passagem e certamente irá transcrevê-las de uma forma superior\n\n##Utilize o Vim\nO Vim é simplesmente genial para a escrita\n\n##Uso dos porquês\n\n- **por que**: usa-se para fazer perguntas, ou quando pode ser substituído por *motivo* ou *razão*\n    Ex: Por que fizeste isso? O aluno queria saber por que recebeu nota baixa.\n- **porque**: para respoder perguntas\n    Ex: Fiz isso porque era necessário.\n    Obs: É possível trocar o *porque* por *pois*\n\n- **por quê**: em final de frases\n    Ex: Sabemos que você não compareceu à reunião, por quê?\n\n- **porquê**: Utilizada quando o *porquê* tem função de substantivo.\n    Ex: gostaria de entender o porquê eu tenho de ir\n\n\n\n##Referências:\n\n1. http://www.infoescola.com/portugues/uso-dos-porques/',0,'2015-01-24 00:00:00'),(67,'Game development wandering','I\'ll enlist where some game experiments I made till now.\n\n##[Math Game](http://jeancarlomachado.com.br/game/math/index.html)\n\nThis is a experiment part of my graduation work. This is an HTML5 game intended to work in all platforms. I expect to improve it yet.\n\n##[3D RPG in Ogre 3D](https://github.com/jeanCarloMachado/rpg)\n\nThis is a side effect of some study I made in Ogre 3D abstraction. Ogre is really complex so this will probably no go long.\n\n##Console RPG in C++\n\nI worked too in a console RPG i took inspiration from [this](http://www.penguinprogrammer.co.uk/rpg-tutorial-2/) awesome tutorial. I tought I lost this job, nevertheless it\'s worth mentioning.\n\n##2D Mario like game in Quintus\n\nThis experiment is really cool, I\'ll look for it cause I\'m sure that I still posses it somewhere.\n\n---\n\nThis is it. Not a quite exhaustive list; anyway this little experience already gave-me some insights of how cool could  be a game development.',1,'2015-06-09 13:30:00'),(68,'Mantendo o foco','Estou tentando ser mais produtivo.\n\nPara tanto, tenho diversos estratagemas os quais desejo abordar neste post.\n\n#Manter uma rotina\n\nVárias pessoas notáveis formam extremamente rígidos em suas rotinas.\n\n- argumentos a favor da rotina\n\nSe não haver uma rotinha prè-estabelecida, você acaba trocando as atividades de ordem e, no final, algo sempre sai no prejuízo. Seja seu sono, o tempo de outra pessoa ou suas responsabilidades.',0,'2015-01-25 00:00:00'),(69,'Combos com o Vim','<!--\nUtilizar\nc/foo\n-->\n\nO vim é uma ferramenta muito poderosa. Este post é dedicado a exemplificar algumas das possibilidades desta ferramenta com casos \"reais\".  Este post é um *work-in-progress*, conforme eu  vou conhecendo mais o vim pretendo adicionar novos exemplos.\n\nOrientações iniciais:\n\n- Todos os caracteres especiais estão dentro de um grupo ``<comoeste>``;\n- Todo o combo é composto por 3 blocos: estado incial, comandos e estado final com comentários opcionais entre eles;\n\n---\n\n```\nfoo();\nbar();\nfoobar();\n```\n\nCom o cursor no ``f`` de ``foo`` pressione:\n\n```\nA<backspace>{<enter><enter>}<ESC>j.j.\n```\n\nResultado:\n\n```\nfoo(){\n\n}\nbar(){\n\n}\nfoobar(){\n\n}\n```\n\n---\n\n*Conceito \"inner\"*\n\n```\n$var = \'foo\';\n```\n\nPara trocar o valor de dentro de ``\'``, com o cursor no ``$`` de ``$var`` digite:\n```\nci\'bar\n```\n\nResultado:\n```\n$var = \'bar\';\n```\n---\n\nDeletar até ocorrência de algo\n\n```\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod\ntempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At\nvero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,\nno sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n```\n\nCom o cursor em no final de **dolor**\n```\nd/san<Enter>\n```\n\nResultado:\n```\nLorem ipsum dolorsanctus est Lorem ipsum dolor sit amet.\n\n```\n\n---\n\nQuando queremos adicionar um nível extra em todos os títulos de um arquivo markdown, levando em consideração que a tag de título ``#`` está sendo utilizada em outros contextos.\n\n```\n#This is a markdown file\n\nWith (#) this char in the middle of the text.\n\nBut we want to give a new level to all titles (beggining with #)\n\n##How to?\n\nUsing search and replace over the file.\n\n```\n\n```\n:%s/^\\zs#\\ze.*/##/g\n```\nOBS: ``\\zs`` e ``\\ze`` são delimitadores do que será substituído\n\n```\n##This is a markdown file\n\nWith (#) this char in the middle of the text.\n\nBut we want to give a new level to all titles (beggining with #)\n\n###How to?\n\nUsing search and replace over the file.\n\n```\n---\n\nSubstituir seletivamente várias ocorrências de uma palavra com a repetição.\n\n```\n<section class=\"bar\" >\n\n    <div class=\"bar\">\n        <ul class=\"foo\">\n            <li class=\"bar\"></li>\n        </ul>\n    </div>\n</section>\n```\n\n```\n/bar<enter>viwy/foo<enter>ciw<C-r>0nn.\n```\n\n```\n<section class=\"bar\" >\n\n    <div class=\"bar\">\n        <ul class=\"foo\">\n            <li class=\"bar\"></li>\n        </ul>\n    </div>\n</section>\n\n```\n---\n\n#Referências\n\n1. http://code.tutsplus.com/articles/top-10-pitfalls-when-switching-to-vim--net-18113\n\n\nFique á  vontade para sugerir novos combos.',1,'2015-01-27 00:00:00'),(70,'My Goals','“If you are not making the progress that you would like to make and are capable of making, it is simply because your goals are not clearly defined.”\n\nO objetivo deste post é esclarecer minhas metas de vida de modo que eu possa direcionar minhas ações coerentemente.\n\nMeu alvo é ser um reconhecido cientista da computação. Obviamente não é simplesmente o reconhecimento que eu almejo. Para chegar lá quero ter feito várias colaborações e inovações em computação - que colateralmente melhore a vida das pessoas.\n\nTambém seria importante que, no processo, eu me torne rico de modo que não tenha que me preocupar com detalhes mundanos da vida. É imprescindível que eu viva bastante de modo que aumente as chances de transferir minha consciência em uma máquina - possibilitando assim que eu viva para sempre.\n\nPara ser específico, quero trabalhar juntamente com a MIT, em computação, para ajudar a melhorar a vida humana e melhor pesquisar o universo. Meu objetivo não pode ser estudar em algum lugar, estudar eu estudo em qualquer lugar, o que eu devo ansiar é trabalhar com as melhores pessoas do mundo.\n\n#Resoluções\n\nAbaixo algumas resoluções feitas com o intuito de que eu alcance minhas metas.\n\n##Saúde\n\nPara que estes objetivos sejam alcançados é indispensável que eu tenha saúde;\n\n###Alimentação\n\n####Frutas\n\nPara saúde é absolutamente necessário que eu coma frutas.\n\n####Junk food\n\nTenho que evitar estas porcarias.\n\n####Café\n\nCafé faz bem e deve ser utilizado. O ideal é que eu não tome café até seis horas antes de ir dormir.\n\n####Condimentos\n\nTenho que parar de comer condimentos que fazem mal. Ketchup.\n\n##Felicidade\n\nÉ importante que eu seja razoavelmente feliz de modo a prevenir qualquer tipo de incursão em depressão ou falta de saúde.\n\n##Conforto\n\nDurante o processo, é importante que eu não me sinta confortável com nenhuma atividade que não corrobore para a obtenção destas metas. Principalmente, que eu não fique confortável com prazeres ordinários como comida ou vícios como bebidas, filmes, animes, jogos;\n\n##Solidão\n\nComo as metas são colossalmente grandes é indispensável que eu fique a grande maioria do tempo sozinho para pensar em inovações, nos meus trabalhos e no andamento da obtenção de minhas metas. É interessante que eu reserve em um tempo diariamente para revisar meu comportamento e otimizá-lo para com meus objetivos.\n\n##Social\n\nPara facilitar é necessário que eu tenha uma boa aparência, ande bem vestido e tenha bons modos. Para que eu tenha bons modos é imprescindível que eu conviva com pessoas seletas. Também é importante que eu entenda da psicologia humana, visto que grande parte do processo de ficar rico envolve ser bom socialmente. Outro argumento a favor da socialização é que seres humanos são mais felizes quando mais sociáveis.\n\n###Seleto\n\nPara ser seleto é importante que eu não fique à par das coisas escrotas desse mundo. Tipo, notícias escrotas, músicas escrotas, e que eu não converse sobre estes assuntos. De fato, que eu seja um ignorante quanto esta estirpe de conhecimento.\n\n###IRC\n\nUma ótima estratégia para socializar com pessoas melhores é utilizar o IRC. Lá a socialização é direcionada para fatores acadêmicos o que colabora para manter a mente focada e aprendendo coisas novas. Outrossim, possibilita que eu mantenha contato com as pessoas no *bleeding edge* da carreira de software - pessoas que eu quero ser semelhante.\n\n###Twitter\n\nO Twitter é uma boa ferramenta para ganhar credibilidade. Mas nem tão boa assim para consumo de notícias - tem muito lixo e opiniões no meio. Acho que a melhor forma de eu agir é utilizar o Feedly para pegar notícias e publicá-las no Twitter.\n\n###Facebook\n\nÉ importante eu pare de utilizar o *facebook* com tanta frequência. É imprescindível que eu pare de cuidar da vida alheia no Facebook.\n\nMotivos:\n- Lá eu encontro, na grande maioria, pessoas burras, comportamentos sociais babuínicos;\n- Eu utilizo o Facebook para saber como as outras pessoas estão indo (uma luxúria totalmente desnecessária e injustificável)\n- A imensa maioria dos desenvolvedores os quais eu tomo inspiração não utiliza Facebook.\n####O argumento do facebook como ferramenta\n\nReconheço que o Facebook é uma ferramenta importante para possibilitar contatar outras pessoas. Não obstante, essa é a única justificativa razoável para seu uso. Sendo assim, acessar uma vez por dia é mais do que o suficiente. Para minimizar esta necessidade, é importante que eu utilize o Pidgin no lugar do Facebok.\n\n#####Facebook como feed\nO facebook é genérico demais, aberto a extrapolações, superficial, leviano. Acho que o melhor caminho é eu visitar meus rss feed e feeds de navegador com bastante frequência. Dessa forma eu consigo informações mais especializadas e evito todos os outros desfavores que o facebook gera nas minhas metas.\n\n\n###Youtube\n\nO primeiro uso de dou para o Youtube é para entretenimento, levianidade - extremamente desalinhado com minhas metas. Mesmo com o argumento do Youtube como ferramenta instrutiva é meio fraco pois o meio de aprendizado via vídeo é um tando desalinhado com minha forma cientifica de estudar.\n\nSempre que eu abrir o youtube devo parar, refletir e pegar um livro, pode ser uma ficção se eu não estiver muito disposto por leitura científica.\n\nDevo demonizar o youtube, dele eu apenas ganho superficialidade, e aumento as fraquezas de meu espírito, devo lutar com todas forças e adicioar o maior nível de bloqueios possível para que eu consiga ver um vídeo no Youtube.\n\n\n###Popcorn Time\n\n\n###Meios de estudo\n\nPara que eu seja um gênio da computação preciso me habituar a estudar através de meios científicos. Vídeos na internet são pouco efetivos para que eu mantenha a postura científica correta.\n\n\n##Conformismo\nPara que eu não caia no conformismo é imprescindível que eu não ande com pessoas conformadas.\n\n##Open source\nPara ajudar a melhorar o mundo e aumentar minha credibilidade, é necessário que eu contribua para open-source.\n\n\n##Pesquisa\nTenho que ter pelo menos um projeto de pesquisa por ano.\n\n\n##Artigos cientificos\nPara ajudar a manter-me orientado segundo mas metas aqui estabelecidas e suas resoluções, é importante que eu leia Nietzsche com frequência.\n\n##Blog\nObter credibilidade.\n\n##Palestrar\nObter credibilidade.\n\n##Trabalho voluntário\nNetworking\n\n##Música\nÉ incrível como eu sou mais focado quando não estou ouvindo música. Quando estou em silêncio com meus pensamentos. Tenho que utilizar música apenas como uma ferramenta psicológica e como uma forma de abafar maiores barrulhos ao meu redor. Fora para estes intentos, música é expressamente contraproducente na minha vida.\n\nDevo pesquisar mais sobre o assunto música para fundamentar cientificamente esta minha tese. Apesar de eu já ter pesquisado previamente e estar convicto quanto a hipótese.\n\nÉ interessante que mesmo durante meus momentos de movimentação - trãnsito - eu evite ouvir música, pois a sensação da música me torna mais inclinado à ela o que pode me levar a cair em tentação de ouvi-la constantemente.\n\nÉ absolutamente necessário que em meu repertório de músicas - limitadas para os casos acima descritos - conste apenas músicas que acalmem ou produzam algum sentimento benéfico na minha pessoa.\n\n##Retórica\n\nDesnecessário dizer que retórica é um recuso importante para qualquer pessoa distinta. Sendo assim, tenho que procurar citar em voz alta algum livro o qual eu esteja lendo ou então utilizar algum que eu já tinha lido - como Fausto. Tenho a Eneida para ler em minha lista então acho uma boa priorizá-la em detrimento de Fausto.\n\n##Do something principle\n\nPara de fato fazer qualquer coisa eu tenho que começar, já percebi que é assim na minha vida. Sendo assim, à partir de agora vou me comprometer com a ação e não com o progresso. Não é produtivo eu colocar tarefas difíceis como retomada de uma atividade. O certo a fazer é colocar a tarefa mais fácil o possível no início, assim eu ganho confiança e o resto fluí naturalmente. É o caso do escritor que se comprometeu a escrever duzentas palavras por dia, não importando a qualidade, no final, pelo engajamento,  ele escrevia duas mil palavras.\n\n\n##Pessoas para se inspirar\n\n[John McCarty](http://en.wikipedia.org/wiki/John_McCarthy_%28computer_scientist%29)\n\n##Matemática\n\nTodo cientista de verdade tem na matemática como sua mais confiável companheira. Tenho que estudar mais este assunto.\n\n##Thoughts\nAs pessoas que se importam comigo tem altas expectativas quanto a minha pessoa, devido a meu modo singular de ser.\n\nPara que as pessoas não se decepcionem, por consequência eu sofra também, é necessário que eu me dedique para estar sempre acima das expectativas razoáveis.',0,'2015-01-28 00:00:00'),(71,'IRSSI','#IRSSI\n\n##Conectando\n``/server`` Conecta a um servidor na rede atual (dá replace da conexão atual)\n``/connect`` Abre uma nova coneção\n``/disconnect``\n\n``Cntrl+X`` para trocar de conexão de rede\n\n\n```\n(05:23:10) (ms[+abilorsuwxyz]) (1:NullIRC (change with ^X))\n```\n\n###Exemplos\n```\n\\server irc.freenode.net\n```\n\n```\n\\join #zftalk\n```\n\n###Trocando de salas\n\nPara trocar de salas utilize ``<Alt>->`` e ``<Alt><-`` (alt + setas).\n\n###Dicas\n``/help bind`` para trocar de salas de outras formas\n\n##Conversa privada\n\n\n\n##Aliases\n\n\n``\n/q <nick>\n``\n\n#Referências\n\n1. http://quadpoint.org/articles/irssi/',0,'2015-01-31 00:00:00'),(72,'Por um teclado mais produtivo','Aposto que não é somente comigo que grande parte das teclas de teclado ficam subutilizadas. Para não dizer mal utilizadas; em alguns casos como o *CapsLock*. Pensando nisso, fiz um conjunto de modificações em meu teclado facilmente replicáveis em sistemas Linux.\n\nMeu sistema operacional: o *Archlinux*, e qualquer outra distro que se preze, utiliza o XKB para gerenciar teclados no X. Os comandos descritos abaixo vão funcionar para esses casos e somente na sessão atual. Para fazer com que as alterações persistam as sessões basta salvar o(s) comando(s) desejado(s) no arquivo ``~/.xinitrc``.\n\n##Capslock\n\nDesde que comecei a utilizar o computador utilizei o *Capslock* para digitar qualquer coisa em CAIXA ALTA. Nunca gostei dessa prática, mas também nunca tive motivos o bastante para parar de fazê-la. Não obstante, desde que adotei o Vim como ambiente de desenvolvimento e escrita, o *Capslock* se torna um estorvo por inserir comandos indesejados - visto que V e v no vim são comandos totalmente distintos.\n\nLevando isso em consideração decidi desabilitar o *Capslock*:\n\n###Desabilitando\n\n```\nsetxkbmap -option caps:none\n```\n\n###Trocando *layouts*\nAté então, eu vinha trocando os *layouts* ``pt,en`` de meus teclados utilizando o ``alt+shift``, visto que o *Capslock* ficou livre de suas responsabilidades, resolvi utilizá-lo para trocar de *layout*.\n\n```\nsetxkbmap -layout \'us,br\' -option \'grp:caps_toggle,grp_led:caps\'\n```\n\nPara trocar com o ``alt+shift`` (modo antigo):\n\n```\nsetxkbmap -option grp:switch,grp:alt_shift_toggle,grp_led:scroll us,br\n```\n\n##Reiniciando o X\n\nAté então eu vinha sentindo falta do comando tradicional para reiniciar a sessão\n\n```\nsetxkbmap -option terminate:ctrl_alt_bksp\n```\n\n##Colando no terminal\n\nO comando para colar no terminal é ``shift+insert``, só que no teclado no macbook ``insert`` não existe. Abaixo segue uma solução de mapeamento do ``insert`` no lugar do ``command`` da direita. Dessa forma é possível colar no terminal utilizando as teclas ``shift`` da esquerda mais ``command`` da direita.\n\n```\nxmodmap -e \"keycode 134 = Insert NoSymbol Insert\"\n```\n\nEm teoria o ``xmodmap`` funciona se colar o comando no ``~/.xinitrc`` - só que não no meu caso.\n\nA melhor alternativa que encontrei para persistir este comando foi colocando-o da seguinte forma no meu ``~/.bashrc``\n\n```\nif [ -n \"$DESKTOP_SESSION\" ]; then\n    /usr/bin/xmodmap -e \"keycode 134 = Insert NoSymbol Insert\"\nfi\n```\n\n\nEspero que estas dicas lhe sejam úteis. Caso tenha alguma dica de como otimizar o teclado - por favor, deixe-me saber.',1,'2015-02-01 00:00:00'),(73,'Dicas Ack','Neste post quero abordar algumas das funcionalidades do Ack. Não obstante, muito do que aqui se encontra descrito se aplica igualmente para o grep. O Ack foi desenvolvido como uma versão melhorada do grep, focada para programadores.\n\nAck é escrito em Perl, herdando algumas características, como expressões regulares.\n\n##Filtrando por tipo de arquivo\n\nO ack tem um sistema de filtros inteligente. Utiliza-se ``--extension`` para filtrar por extensão, e ``--no-extension`` para filtrar por tudo menos a extensão especificada.\n\n**Exemplo**:\n\n```\nack ... --no-js --no-yaml\n```\n\nPara filtrar por tudo menos JavaScript e YAML.\n\n```\nack ... --php --js\n```\n\nPara filtrar por arquivos JavaScript e PHP.\n\n**Obs**: Por padrão o ack ignora arquivos de versionamento: .git, .svn.\n\n##Escape\n\nPara escapar um caractere em uma expressão\n\n```\nack \'\\$foo = \\$bar\'\n```\n\nPara escapar todos os caracteres de uma expressão\n\n```\nack -Q \'$foo = $bar\'\n```\n\n##Retornando apenas os nomes dos arquivos\n\nA opção -l é muito útil principalmente em conjunto com outros scripts como o sed para substituir o conteúdo.\n\n```\nack -l \"$USER\" /etc\n```\n\n##Pesquisando por palavras \"fechadas\"\n\n```\nack -w require\n```\n\nIgualmente possível\n\n```\nack \'\\brequire\\b\'\n```\n\n##Visualizando a vizinhança\nEm alguns casos é interessante ver além do conteúdo procurado. Dependendo de como ele foi disposto (indentado ou não), o que estamos procurando por vezes está uma ou duas linhas acima ou abaixo.\n\nPara esses casos existe a opção  ``-C num``, que permite especificar quantas linhas ao redor do conteúdo encontrado serão mostradas.\n\n\nPor exemplo, preciso saber quais entradas da classe product não setam o entity manager antes de rodar o build. Se a chamada de build for indentada pode ser que a informação que eu precise esteja algumas linhas abaixo:\n\n```\nack -C 3 \"Inventory\\Test\\Fixture\\Product\" module\n```\n\n###Apenas abaixo\n\n```\nack -A 3 \"Inventory\\Test\\Fixture\\Product\" module\n```\n\n###Apenas acima\n\n```\nack -B 3 \"Inventory\\Test\\Fixture\\Product\" module\n```\n\n##Find\n\nAck também pode ser usado no lugar do find para simplesmente encontrar arquivos por nome. O find é cheio de idiossincrasias que se devem a sua idade avançada, sendo assim eu acabo utilizando o ack no seu lugar, reciclando o conhecimento.\n\n```\nack -g \'Product*.php\' module/\n```\n\n##Ack com pipe\n\nO ack suporta a passagem dos arquivos que serão testados como argumento --files-from, quando setado para ``-`` o ack interpreta os valores da entrada padrão, o que permite utilizar o ack com o pipe.\n\nUtilizando em conjunto a opção -g é possível unir vários ack\'s, alguns para pegar por nomes de arquivos, outros para filtrar o conteúdo dentro destes arquivos.\n\n```\nack -g \"[^A-Za-z]tests\" module/ | ack --files-from=- \"Category\"\n```\n\n##Ack e Sed\n\nMuitas vezes filtrar não é o suficiente, desejamos mudar o conteúdo das entradas que encontramos. Para isso podemos utilizar o ack em conjunto com o sed.\n\nPara substituir todas as ocorrências de Gandalf por Saruman:\n```\ns1=\"gandalf\"\nack -Rl $s1 module/ | xargs sed -i \"s/$s1/saruman/g\"\n\n```\nGeralmente uso uma variável bash para não ter que escrever a busca mais de uma vez.\n\nPretendo adicionar mais dicas aqui conforme vou crescendo em experiência com o ack. Certamente é uma ferramenta muito poderosa para aqueles que adotam o [Unix Way](http://c2.com/cgi/wiki?UnixWay).\n\n##Vim\n\nO vim e o grep tem um forte relacionamento, tanto que o Vim traz consigo o vim-grep que é o grep utilizando as expressões regulares do Vim. Não obstante vim e ack também tem uma sinergia interessante, cheque [este script](https://github.com/mileszs/ack.vim) se quiser algo integrado.\n\n###Abrir resultado da busca no vim\n\nPara abrir os arquivos encontrados em uma busca com o ack no vim utilize:\n\n```\n $ vim -p $(!! -l)\n```\n\n\n##Links interessantes\n\n1. [https://github.com/djanowski/ack-tutorial](https://github.com/djanowski/ack-tutorial\n)\n2. [www.thelinuxdaily.com/2010/12/recursive-searchreplace-text-from-terminal](www.thelinuxdaily.com/2010/12/recursive-searchreplace-text-from-terminal)',1,'2015-06-08 11:10:00'),(74,'Sintomas de design podre','\n\nExistem quatro sintomas primários que nos ajudam a identificar quando nosso design está apodrecendo. São ortogonais, mas relacionados de formas óbvias. Os sintomas são: rigidez, fragilidade, imobilidade, e viscosidade.\n\n\n##Rigidez\nÉ a tendência do software ser difícil de mudar, mesmo que de maneira simples. Cada mudança causa uma cascata de mudanças subsequentes em módulos independentes. O que começa como uma simples mudança de dois dias em um módulo cresce em uma maratona de mudanças de várias semanas alterando módulo atrás de módulo.\n\nQuando o software se comporta dessa forma os gerentes temem deixar os engenheiros arrumar problemas não críticos. Essa relutância deriva do fato que eles não sabem, com segurança, quando os engenheiros terminarão. Se os gerentes liberarem os engenheiros para resolverem tais problemas eles podem ficar ocupados por longos períodos.\n\nQuando o temor dos gerentes é tão agudo que eles se recusam a permitir mudanças no software é que a rigidez se estabelece. Aquilo que começou como deficiência no design terminou como uma controversa política gerencial.\n\n##Fragilidade\n\nIntimamente relacionada com  a rigidez é a fragilidade. É a tendência do software quebrar em diversos lugares toda a vez que ele muda. Com frequência as quebras ocorrem em áreas que não tem relacionamento conceitual com a área que mudou. Esses erros vão encher os corações dos gerentes com mal pressentimentos. Toda a vez que eles autorizam uma mudança eles temem que o software irá quebrar de alguma forma inexplicável. Conforme a fragilidade vai aumentando, a probabilidade de quebra aumenta, assimptoticamente se aproximando de 1. Esse tipo de software é impossível de manter. Cada ajuste faz ele piorar, introduzindo novos problemas para serem resolvidos. Tal software faz os gerentes e clientes suspeitarem que os desenvolvedores perderam o controle. Desconfiança reina e a credibilidade é perdida.\n\n##Imobilidade\n\nImobilidade é a inabilidade de reusar software de outros projetos ou de outras partes do mesmo projeto. Geralmente acontece de um engenheiro descobrir que precisa de um módulo similar ao que outro engenheiro escreveu. Não obstante, também geralmente acontece que o módulo em questão tem muita bagagem desnecessária. Depois de muito trabalho, os engenheiros descobrem que o trabalho requerido para separar as partes desejadas é muito grande para ser tolerado. E o software é simplesmente reescrito ao invés de reusado.\n\n##Viscosidade\n\nViscosidade vem de duas formas: viscosidade de design, e viscosidade de ambiente. Quando em face a uma mudança, engenheiros geralmente encontram mais de uma maneira de efetuá-la . Algumas das formas preservam o design, outras não (os \"hacks\"). Quando os métodos preservados do design são mais difíceis de usar do que os \"hacks\" a viscosidade do design está alta. É mais fácil fazer a coisa errada do que a certa.\n\nViscosidade de ambiente acontece quando o ambiente de desenvolvimento é lento e ineficiente. Por exemplo, se os tempos de compilação são muito longos os engenheiros vão ser tentados a fazer mudanças que não forcem grandes recompilações, mesmo que essas alterações não sejam as melhores do ponto de vista de design. Se o controle de versão requer horas para checar apenas uns poucos arquivos os engenheiros serão tentados a fazer modificações que requeiram o menor número de arquivos possível, ignorando se o design é preservado ou não.\n\n---\n\nEsses quatro sintomas são sinais de arquitetura degradada. Qualquer aplicação que exiba-os está sofrendo de design apodrecido.\n\nEsta é uma parte que extraí do livro: *Design Principles and Design Patterns* de *Robert C. Martins*. Espero este *post* de alguma forma colabore para a constante luta contra o design ruim.',1,'2015-02-03 00:00:00'),(75,'Como se tornar um bom programador','Tenha muita vontade.\nTenha muita paciência. Se você se estressa fácil e logo decide fazer outra coisa, ou você muda ou programação não é para você.\nk\n\n##Utilize Bash\n\n###Argumentos:\nApertadores de botão são fáceis de encontrar, crie suas próprias ferramentas.\n\nMecanismos duram muito tempo, políticas não.\n\nNenhuma ferramenta é grande o suficiente para administrar todos os casos.\n\nNão confunda fácil de usar com eficiente.\n\nSistemas operacionais de pedestres adquirem seu brilho prendendo os usuários em um interface polida. É apertado, rígido e funciona bem para um conjunto limitado de casos. Mas tarefas não antecipadas são quase impossíveis e muito dolorosas.\n\nOne good test for whether an API is well designed is this one: if you try to write a description of it in purely human language (with no source-code extracts allowed), does it make sense? It is a very good idea to get into the habit of writing informal descriptions of your APIs before you code them. Indeed, some of the most able developers start by defining their interfaces, writing brief comments to describe them, and then writing the code — since the process of writing the comment clarifies what the code must do. Such descriptions help you organize your thoughts, they make useful module comments, and eventually you might want to turn them into a roadmap document for future readers of the code.\n\n---\n\nIt is possible, however, to push this kind of decomposition too hard and make your modules too small. There is evidence [Hatton97] that when one plots defect density versus module size, the curve is U-shaped and concave upwards (see Figure 4.1). Very small and very large modules are associated with more bugs than those of intermediate size. A different way of viewing the same data is to plot lines of code per module versus total bugs. The curve looks roughly logarithmic up to a ‘sweet spot’ where it flattens (corresponding to the minimum in the defect density curve), after which it goes up as the square of the number of the lines of code (which is what one might intuitively expect for the whole curve, following Brooks\'s Law[41]).\n\nFigure 4.1. Qualitative plot of defect count and density vs. module size.\nQualitative plot of defect count and density vs. module size.\n\nThis unexpectedly increasing incidence of bugs at small module sizes holds across a wide variety of systems implemented in different languages. Hatton has proposed a model relating this nonlinearity to the chunk size of human short-term memory.[42] Another way to interpret the nonlinearity is that at small module grain sizes, the increasing complexity of the interfaces becomes the dominating term; it\'s difficult to read the code because you have to understand everything before you can understand anything. In Chapter 7 we\'ll examine more advanced forms of program partitioning; there, too, the complexity of interface protocols comes to dominate the total complexity of the system as the component processes get smaller.\n\nIn nonmathematical terms, Hatton\'s empirical results imply a sweet spot between 200 and 400 logical lines of code that minimizes probable defect density, all other factors (such as programmer skill) being equal. This size is independent of the language being used — an observation which strongly reinforces the advice given elsewhere in this book to program with the most powerful languages and tools you can. Beware of taking these numbers too literally however. Methods for counting lines of code vary considerably according to what the analyst considers a logical line, and other biases (such as whether comments are stripped). Hatton himself suggests as a rule of thumb a 2x conversion between logical and physical lines, suggesting an optimal range of 400–800 physical lines.\n\n\n\n\nThe ‘fun’ factor is not trivial from a design point of view, either. The kind of people who become programmers and developers have ‘fun’ when the effort they have to put out to do a task challenges them, but is just within their capabilities. ‘Fun’ is therefore a sign of peak efficiency. Painful development environments waste labor and creativity; they extract huge hidden costs in time, money, and opportunity.\n\n\nRob Pike, who became one of the great masters of C, offers a slightly different angle in Notes on C Programming [Pike]:\n\n    Rule 1. You can\'t tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don\'t try to second guess and put in a speed hack until you\'ve proven that\'s where the bottleneck is.\n\n    Rule 2. Measure. Don\'t tune for speed until you\'ve measured, and even then don\'t unless one part of the code overwhelms the rest.\n\n    Rule 3. Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, don\'t get fancy. (Even if n does get big, use Rule 2 first.)\n\n    Rule 4. Fancy algorithms are buggier than simple ones, and they\'re much harder to implement. Use simple algorithms as well as simple data structures.\n\n    Rule 5. Data dominates. If you\'ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.[9]\n\n    Rule 6. There is no Rule 6.\n\n\nMore of the Unix philosophy was implied not by what these elders said but by what they did and the example Unix itself set. Looking at the whole, we can abstract the following ideas:\n\n    Rule of Modularity: Write simple parts connected by clean interfaces.\n\n    Rule of Clarity: Clarity is better than cleverness.\n\n    Rule of Composition: Design programs to be connected to other programs.\n\n    Rule of Separation: Separate policy from mechanism; separate interfaces from engines.\n\n    Rule of Simplicity: Design for simplicity; add complexity only where you must.\n\n    Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.\n\n    Rule of Transparency: Design for visibility to make inspection and debugging easier.\n\n    Rule of Robustness: Robustness is the child of transparency and simplicity.\n\n    Rule of Representation: Fold knowledge into data so program logic can be stupid and robust.\n\n    Rule of Least Surprise: In interface design, always do the least surprising thing.\n\n    Rule of Silence: When a program has nothing surprising to say, it should say nothing.\n\n    Rule of Repair: When you must fail, fail noisily and as soon as possible.\n\n    Rule of Economy: Programmer time is expensive; conserve it in preference to machine time.\n\n    Rule of Generation: Avoid hand-hacking; write programs to write programs when you can.\n\n    Rule of Optimization: Prototype before polishing. Get it working before you optimize it.\n\n    Rule of Diversity: Distrust all claims for “one true way”.\n\n    Rule of Extensibility: Design for the future, because it will be here sooner than you think.\n\n\n    Another way is to separate your application into cooperating front-end and back-end processes communicating through a specialized application protocol over sockets; we discuss this kind of design in Chapter 5 and Chapter 7. The front end implements policy; the back end, mechanism. The global complexity of the pair will often be far lower than that of a single-process monolith implementing the same functions, reducing your vulnerability to bugs and lowering life-cycle costs.\n\n---\n\n    How many global variables does it have? Global variables are modularity poison, an easy way for components to leak information to each other in careless and promiscuous ways.\n\n    Is the size of your individual modules in Hatton\'s sweet spot? If your answer is “No, many are larger”, you may have a long-term maintenance problem. Do you know what your own sweet spot is? Do you know what it is for other programmers you are cooperating with? If not, best be conservative and stick to sizes near the low end of Hatton\'s range.\n\n    Are the individual functions in your modules too large? This is not so much a matter of line count as it is of internal complexity. If you can\'t informally describe a function\'s contract with its callers in one line, the function is probably too large.\n\n\n    Personally I tend to break up a subprogram when there are too many local variables. Another clue is too many levels of indentation. I rarely look at length.\n\n    -- Ken Thompson\n\n    Does your code have internal APIs — that is, collections of function calls and data structures that you can describe to others as units, each sealing off some layer of function from the rest of the code? A good API makes sense and is understandable without looking at the implementation behind it. The classic test is this: Try to describe it to another programmer over the phone. If you fail, it is very probably too complex, and poorly designed.\n\n    Do any of your APIs have more than seven entry points? Do any of your classes have more than seven methods each? Do your data structures have more than seven members?\n\n    What is the distribution of the number of entry points per module across the project? Does it seem uneven? Do the modules with lots of entry points really need that many? Module complexity tends to rise as the square of the number of entry points, too — yet another reason simple APIs are better than complicated ones.\n\n##Referências\n\nhttp://web.engr.oregonstate.edu/~traylor/ece474/lecture_verilog/beamer/linux_philosophy.pdf\nhttp://www.catb.org/~esr/writings/taoup/html/ch01s05.html\nhttp://efytimes.com/e1/fullnews.asp?edid=119212',0,'2015-02-03 00:00:00'),(76,'Tutorial de Docker','#Brainstorm\n\nO id do container é longo, para facilitar você pode utilizar somente a parte inicial única para distinguí-lo.\n\nDocker é escrito em GO\n\nNote: By default, the docker ps command only shows information about running containers. If you want to see stopped containers too use the -a flag.\n\nboot2docker\n\nLastly, we can take a low-level dive into our Docker container using the docker inspect command. It returns a JSON hash of useful configuration and status information about Docker containers.\n\nYour colleague has let you know that they\'ve now finished with the container and won\'t need it again. So let\'s remove it using the docker rm command.\n\nNote: Always remember that deleting a container is final!\n\nÉ possível trafegar dados de um container para outro.\n\n##Intro\n\nDocker é uma ferramenta incrível, possibilita rodar distribuições linux em \"máquinas virtuais\". Esta na verdade é a segunda vez que eu me dedico para dominá-la. O motivo de eu escrever este post sobre docker é que me deparei com a necessidade de instalar o Zend Server em meu computador (Archlinux).\n\nAs configurações do docker são feitas em JSON.\n\n##Instalação\n\n##Utilização\n<!-- Seria bom extressar muito o run antes de ir em outros detalhes sujos -->\n\nO comando ``docker`` é um macro comando, assim como o comando ``git`` para os familiarizados. Assim como o git, se você rodar somente o comando docker vai ser a mesma coisa que rodar docker --help. Os subcomandos também retornam ajuda quando rodados sem argumentos.\n\n\nSegue o exemplo clássico\n```\n$ sudo docker run ubuntu:14.04 /bin/echo \'Hello world\'\nHello world\n```\n\nQuando você especifica uma imagem ``ubuntu:14.04`` no caso, o docker procura primeiramente pela imagem na suma máquina. Caso ele não consiga encontrar, ele baixa a imagem especificada do registro público: [Docker Hub](https://hub.docker.com/).\n\nÉ importante notar que o docker roda apenas um comando e sai. Podemos contornar isso da mesma forma que o X faz no Linux: rodando um bash.\n\n```\n$ sudo docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\nVocê pode rodar qualquer comando que você rodaria em uma instalação do ubuntu tradicional. Com exeção de que você não tem interface gráfica.\n\nUtilize o comando ``exit`` para sair.\n\n##Parametros do run\n\nThe -t flag assigns a pseudo-tty or terminal inside our new container and the -i flag allows us to make an interactive connection by grabbing the standard in (STDIN) of the container.\nThe -d flag tells Docker to run the container and put it in the background, to daemonize it.\nThe -P flag is new and tells Docker to map any required network ports inside our container to our host. This lets us view our web application.\n\n\n##Stop\n\nNow we\'ve established we can create our own containers let\'s tidy up after ourselves and stop our daemonized container. To do this we use the docker stop command.\n\n$ sudo docker stop insane_babbage\ninsane_babbage\nThe docker stop command tells Docker to politely stop the running container. If it succeeds it will return the name of the container it has just stopped.\n\nLet\'s check it worked with the docker ps command.\n\n##Docker ps\n\n```\n$ sudo docker ps\nCONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES\n1e5535038e28  ubuntu:14.04  /bin/sh -c \'while tr  2 minutes ago  Up 1 minute        insane_babbage\n\n```\n\nNeste ponto acho que é importante conceitualizar algumas coisas.\nImagem: ubuntu:14.04 é uma imagem\nContainer: 1e5535038e28 é o container, os containers podem estar rodando ou não, podem ser vistos como processose.\n```\n\n##Logs\n\n\nOkay, so we now know it\'s running. But is it doing what we asked it to do? To see this we\'re going to look inside the container using the docker logs command. Let\'s use the container name Docker assigned.\n\n$ sudo docker logs insane_babbage\nhello world\nhello world\nhello world\n. . .\nThe docker logs command looks inside the container and returns its standard output: in this case the output of our command hello world.\n\nAwesome! Our daemon is working and we\'ve just created our first Dockerized application!\n\n\n##Data volumes\n\nEsta é a forma de compartilhar dados entre o host e o container.\n\n```\n\n$ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py\n\nThis will mount the host directory, /src/webapp, into the container at /opt/webapp.\n\n    Note: If the path /opt/webapp already exists inside the container\'s image, it\'s contents will be replaced by the contents of /src/webapp on the host to stay consistent with the expected behavior of mount\n\n```\n\n##Commit\n\nPara salvar as alterações feitas em um container existe o comando commit\n\nO commit basicamente substitui a imagem que o container foi carregado por uma nova com o nome especificado.\n\ndocker commit <containerid> <toimage>\n\n##Referências\n\n1. https://docs.docker.com/userguide/\n2. https://www.docker.com/tryit/',0,'2015-02-07 00:00:00'),(77,'Network tools','<p>#Nmap</p>\n<p> </p>\n<h3><span id=\"Specifying_the_target\" class=\"mw-headline\">Specifying the target</span></h3>\n<div><strong>Tip: </strong>To print every packet that Nmap sends and receives, use the <code>--packet-trace</code> option.</div>\n<p>There are a number of ways to tell Nmap the list of IP addresses to scan. The simplest form is to just pass the address or domain name:</p>\n<pre>$ nmap scanme.nmap.org\n$ nmap 74.207.244.221\n</pre>\n<h4><span id=\"Specifying_multiple_targets\" class=\"mw-headline\">Specifying multiple targets</span></h4>\n<p>Using <a class=\"extiw\" title=\"wikipedia:CIDR\" href=\"http://en.wikipedia.org/wiki/CIDR\">CIDR</a> notation, for example to scan all 256 addresses beginning with <code>10.1.1</code>:</p>\n<pre>$ nmap 10.1.1.0/24\n</pre>\n<div><strong>Note: </strong>The ending <code>0</code> in the above example does not have an effect: <code>nmap 10.1.1.0/24</code> and for example <code>nmap 10.1.1.134/24</code> commands are the same.</div>\n<p>Using the dash, for example to scan <code>10.1.50.1</code>, <code>10.1.51.1</code> and <code>10.1.52.1</code>:</p>\n<pre>$ nmap 10.1.50-52.1\n</pre>\n<p>Using commas (does what you expect):</p>\n<pre>$ nmap 10.1.50,51,52,57,59.1\n</pre>\n<p>All combined:</p>\n<pre>$ nmap 10.1,2.50-52.1/30 10.1.1.1 10.1.1.2\n</pre>\n<h3><span id=\"List_scan\" class=\"mw-headline\">List scan</span></h3>\n<p>The list scan option (<code>-sL</code>) is useful for making sure that correct addresses are specified before doing the real scan:</p>\n<pre>$ nmap -sL 10.1,2.50-52.1/30 10.1.1.1 10.1.1.2\n</pre>\n<p>List scan simply prints the specified addresses without sending a single packet to the target.</p>\n<h3><span id=\"Default_options\" class=\"mw-headline\">Default options</span></h3>\n<p>If you specify only an IP address or damain name and no other options:</p>\n<pre>$ nmap 74.207.244.221\n</pre>\n<p>Nmap will do the following:</p>\n<ol>\n<li>The IP address is reverse-DNS resolved to domain name, or vice-versa in case a domain name is specified (to disable, pass <code>-n</code>)</li>\n<li>Ping scanning using TCP ACK:80 and ICMP. This is equivalent to <code>-PA -PE</code> (to disable, pass <code>-PN</code>)</li>\n<li>Scans the host(s)\'s top 1000 most popular ports. When running as root, SYN stealth scan is used. When running as user, connect scan is used.</li>\n</ol>',0,'2015-02-12 00:00:00'),(79,'Alta performance com Bash','Este post é composto por um conjunto de dicas sobre bash que podem lhe ajudar a melhorar a performance com a ferramenta. Parte do material encontrei nas referências; não obstante, a grande maioria do conteúdo coletei de forma gradual conforme fui adquirindo experiência. O Bash, por default, utiliza com frequência os mesmos comandos que o Emacs, futuramente farei um post sobre como tornar o Bash mais parecido com o Vim.\n\n##Último comando\nO fato deste grupo de funcionalidades não ser altamente conhecido por mais de uma vez me impressionou. Foi ele também o motivador da criação deste post.\n\n###Reaproveitando o último argumento do último comando\n``ESC .`` para repetir em seu bash o último argumento do último comando.\n\n###Reaproveitando o último comando\nUtilize o comando ``!!`` para rodar o último comando e ``!com`` para rodar o último comando começando com ``com``.\n\n###Reaproveitando a saída do último comando\nSe a saída do último comando foi de acordo com o esperado, você pode utilizá-la em outro comando utilizando ``$(!!)``.\n\n##Histórico\n- ``Ctrl-r``: Procurar no histórico (Enter quando encontrar o comando desejado para executá-lo).\n- ``Ctrl-r`` duas vezes: procura no histórico o último item pesquisado.\n- ``Ctrl-g``: cancela a busca e retorna o comando antigo.\n\n##Movimentações\n\n``Ctrl-Left|Right``: Navega palavra à palavra.\n\n###Estilo Emacs\n\n- ``Ctrl a``: Move o cursor para o início da linha;\n\n- ``Ctrl e``: Move o cursor para o final da linha;\n\n- ``Ctrl f``: Move o cursor um caractere para a frente;\n\n- ``Ctrl b``: Move o cursor um caractere para trás;\n\n- ``Alt f``: Move o cursor uma palavra para a frente;\n\n- ``Alt b``: Move o cursor uma palavra para trás.\n\n##Modificação de strings\n\n- ``Ctrl-w``: Deleta toda a palavra à esquerda do cursor;\n\n- ``Ctrl-k``: Deleta até o final da linha;\n\n- ``Ctrl-u``: Deleta até o início da linha.\n\n##Scroll e buffers\n\n- ``Shift-PageUp|PageDown``:  Faz scroll para cima;\n\n- ``Ctrl-s``: Pausa a saída do terminal (o programa continua rodando);\n\n- ``Ctrl-q``: Libera a saída do terminal (depois de ter sido pausada);\n\n- ``Ctrl-l``: Limpa a tela.\n\n##Controle de processos\n\n- ``Ctrl-d``: *SIGKILL*;\n\n- ``Ctrl-c``: mata o processo atual;\n\n- ``Ctrl-z``: coloca o processo atual em background (``fg`` para retornar).\n\n##Bloqueando e desbloqueando o terminal\n\n- ``Ctrl-s`` Bloqueia o terminal\n\n- ``Ctrl-q`` Desbloqueia o terminal\n\n##Ranges\n\n###Facilitando o Backup\n\n```\ncp /etc/http/conf.d/httpd.conf{,~}\n```\né equivalente à\n\n```\ncp /etc/http/conf.d/httpd.conf /etc/http/conf.d/httpd.conf~\n\n```\n\n###Para restaurar\n\n```\ncp /etc/http/conf.d/httpd.conf{~,}\n```\n\n###Ranges em meio à strings\n\nGeralmente não lembro desta funcionalidade nos raros casos que necessito dela mas algumas opções são:\n\n```\nmkdir -p /squashed/{usr,opt}/{rw,ro}\n```\n\nequivalente à\n\n```\n mkdir -p /squashed/usr/rw \\\n /squashed/usr/ro \\\n /squashed/opt/rw \\\n /squashed/opt/ro\n```\n\n###Expansão de padrões\n```\necho {0..9}{A..Z}\n```\nImprime 260 combinações!\n\n\n**Novas dicas são extremamente bem vindas.**\n\n##Referências\n1. http://feedproxy.google.com/~r/TheLinuxDaily/~3/kr-KdtCdank/\n2. http://blog.falconindy.com/articles/savings-keystrokes-with-bash.html\n3. http://teohm.com/blog/2012/01/04/shortcuts-to-move-faster-in-bash-command-line/',1,'2015-04-12 00:00:00'),(80,'People I admire and Why','This post aims to be an list of very interesting people that I admire following with the reasons that justify it. You could benefit from this list by getting nice links of Blogs, profiles, posts, etc. It\'s beneficial for me because I can see more clearly what kinds of things I want to achieve in my life and good inspirational examples of that.\n\n\n##[Julia Evans](http://jvns.ca/)\n\n\nThis girl, Evans, is simply an awesome person with an magnificent intellect.  She\'s like a mad scientist, a inspired programmer, and a proactive professional, always looking for new tools and profound knowledge of her skill set. I saw some papers of her about computer and math! I think she has a degree in math. I get to know her in a talk she was giving about how to became a kernel hacker and I must say that her interest inspires me a lot!  She has a blog that you can find [here](http://jvns.ca/blog).\n\n##Why she is cool?\n\n\nI appreciate her style of writing down with no discomfort to say  \" - Here I don\'t know, yet this is one thing that I\'ll research\". I\'m currently on a group of people that can only write in a extremely formal way, only when I\'m comfortable with my current knowledge. In resume, only when I can look like I\'m a bad ass of software development. Her way of approaching writing is more human, more inspiring.\n\nShe uses VIM! :P\n\nHer journaling style of blogging is just super cool.\n\nShe does a good job evangelizing `strace` command. This is kinda a nice think to do, to specialize in a tool, I\'m thinking in doing the same with the `curl` utility - thats is saving me a big time currently.\n\nBut probably the thing that I admire the most on her is her excitement with her professional life. I love this in people, and I think I\'m more or less this way too, but I\'m just too shy to show the majority of times. It\'s boring to hear people saying: \"- oh.. Why I choose CS? I should had studied Y instead, much more money, much less trouble!\".\n\n\nI want to be more like you Evans!\n\n\n\nFor now that\'s it. As time goes on I intent do grow this list with more interesting people.',1,'2015-05-16 00:00:00'),(82,'Dicas de Socialização','Falar palavrão é uma boa forma de descontrair.\n\nMe sentir o presidente dos EUA é uma boa forma de manter uma postura digna.\n\nManter a voz rouca é uma boa forma de parecer prepotente.\n\nParar e pensar antes de cada frase é uma boa estratégia para parecer sábio e inteligente.\n\nXingar muito e ficar aborrecido com tudo, nos homens, é tomado como sinal de competência.\n\n#Para palestras\n\nDar micro palestras nos artesões de software.\n',0,'2015-03-05 00:00:00'),(83,'Archlinux wanderings: Power Settings','For a quite a long time I\'ve been wanting to write something about my Archlinux experience on a Macbook Air hardware. Yesterday I spent a long time tweaking my system, so, to help-me to persist this lore, I took the decision to  write down something finally. This post will be about power saving, a long concern of mine, mainly because of the sense of loss that I feel when my Archlinux has a inferior battery duration than the OSX installation.\n\nWhy to bother? People say that I\'m crazy, that I\'m under using my hardware with Linux, and maybe they are right. But I\'m yet to defend my position, in my Wunderlist there is a task to write a post about that. Anyway if you share this interest of mine, for having a really nice hardware bellow the much loved open-source operational system, maybe you will find this post interesting too.\n\nI do not intend to make *yet* another Archlinux installation tutorial there\'s plenty of that on the Internet. My intention here is to register some quite not usual experiences I had during my time on this platform regarding power management, specially power saving.\n\n\n###Battery endurance\n\nWhen I first installed Archlinux on my Macbook I had a default battery life of about six ours, after simply installing [powerdown](https://wiki.archlinux.org/index.php/Powerdown) I could reach the OSX equivalent of eleven ours, quite good IMO. But after few months I realized that my battery duration fell down to approximately four ours. So I spent a long time researching and trying to improve my battery life thinking that was something I made that created that quite big difference. Turned out that was nothing made by myself that caused that difference, anyway, now I know quite interesting ways to improve my battery life on Linux that I\'ll explore bellow.\n\n###Kernel\n\nI find out that the latest kernels are much more battery consumers, specially on Macbook hardware, than those below version tree point eighteen. I\'m yet to discover what caused it on Kernel 3.18 and I\'m quite sure that I\'ll find that out soon. To solve this issue, I moved  back to the LTS version of Linux Kernel, currently 3.14.38, now I have my eleven ours back. To install the LTS kernel on Archlinux [here](https://www.archlinux.org/packages/core/x86_64/linux-lts/) is the package.\n\n\n###TLP\n\nI started with Powerdown as my power configuration tool, then I follow to laptop-tools, now I end up with TLP. Mainly because the last give much more control back to the user, something I value much on my Archlinux.\n\nThe main configurations in my opinion are the following:\n\n```\nCPU_SCALING_GOVERNOR_ON_BAT=powersave\nCPU_BOOST_ON_BAT=0\n```\n\n###Thermald\n\nThis is for intel CPU\'s only. This daemon prevent over heating by enabling cooling methods when they are necessary. [This](https://aur.archlinux.org/packages/thermald/) is the package you must install.\n\nEnable the daemon as usual.\n\n```\n# systemctl enable thermald\n```\n\n###Microcode\nSomething I didn\'t know before this research was about [microcode](http://en.wikipedia.org/wiki/Microcode) on processors, software moved till there! Knowing that, every software engineer should instantly want to upgrade it\'s version in their computers. I made that, and I cannot say which improvements occur on my system, but certainly not  discrete ones. To  upgrade yours, you could follow the [Archwiki tutorial](https://wiki.archlinux.org/index.php/Microcode) but no need to worry writing kernel parameters, the latest versions of grub do it *automagically* so its only about to install and checkout after reboot.\n\n```\ndmesg | grep microcode\n```\n\n\n###Grub submenu entries\n\nBelieve me or not, I saw a decrease of about tree degrees on the system temperature only by removing useless submenus grub entries. If you are lazy like myself, you could achieve that simply by using the [grub-customizer](https://aur.archlinux.org/packages/grub-customizer/).\n\n\n##Conclusion\nA low system temperature should be a major concern for those looking for increase overall system performance. These new processors change its internal frequency based on temperature to avoid melting down. In the initial point of my research my system used to maintain a average of sixty degrees on the common tasks (firefox, spotify, urxvt), now I reached about fifty degrees with the same software running. But I\'m not done yet, my goal is to reach a forty degree average on low usage, my intent is to keep this document fresh with my latest discoveries.\n\n##References\n\n1. [Manjaro Linux Power settings tips](https://wiki.manjaro.org/index.php?title=Optimized_power_settings)\n2. [Archwiki Maximizing Performance](https://wiki.archlinux.org/index.php/Maximizing_performance)\n3. [CPU Scaling](https://wiki.archlinux.org/index.php/CPU_frequency_scaling)\n\nAs always, comments, critics and suggestions are totally welcome.',1,'2015-04-19 00:00:00'),(85,'Gettings Things Done','Na maioria das vezes a razão de algo estar \"na sua mente\" é porque você deseja que esta coisa fique de uma forma diferente do que ela está agora.\nE também:\n\n- Você não clarificou qual é o objetivo desejado desta coisa;\n- você ainda não decidiu qual o próximo passo a ser feito;\n- você não colocou lembretes do objetivoe e passo requerido no seu sistema de confiança;\n\nCada ato de decisão é uma escolha intuitiva. O desafio é migrar da esperança de ser a escolha certa para a confiança de ser a escolha certa.\n\n\nPlanejando\n\n1- Definindo um propósito e seus princípios\n\n2- Visualizando os resultados\n\n3- Discutir e encontrar uma solução (Brimstorming)\n\n4- Organizando\n\n5- Indentificando as próximas ações',0,'2015-03-14 00:00:00'),(84,'The mythical man month','Este documento é uma compilação das ideias centrais do livro: The mythical man month.\n\nWe need to develop adn publicize productivity figures, bug-incidence figures, estimating rules, and so on. The whole profession can only profit from sharing such data.\n\nUntil estimating is on a sounder basis, individual maangers will need  to stiffend their backbones and  defend their estimates with the assurance that their poor hunces are better than whish derived estimates.\n\nAfter the first overdue take no small slips. That is, allow enough time in the new schedule to ensure that the work can be carefully and thoroughly done, and that rescheduling will not have to be done again.\n\n\nLei de brook\nAdding manpower to a late software project makes it later.\n\nMore software projects have gone awry for lack of calendar time than for all other causes combined.\n\nSackman, Erikson and Grant were measuring performances of a group of experienced programmers. Within just this group the radios between the best and the worst performances averaged about 10:1 on productivity measurements and an amazing 5:1 on program speed and space measurements.\n\nMost programming systems reflect coceptual disunity far worse than that of cathedrals. Usually this arises no from a serial succession of master disigners, but from the separation of design int many tasts done by many man.\n\nIll contend that conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have on thatcontains many good bu independent and uncoordinated ideias.\n\nIf a system is to have conceptual integrity, someone must control the concepts.\n\nThe cost-performance ration of the product will depend most heavily on the implementer, just as ease of use depends most heavily on the architect.\n\n\nExternal provision of an architecture enhances, not cramps, the creative style of an implementing group. They focus at once on the part of the problem no one has addressed, and inventions begin to flow. In an unconstrained implementing group, most thought and debate goes into architectural deciions and implementation proper gest short shrift.\n\nThe opportunity to be creative and inventive in implementation is not significantly diminished by working within a given external specification, and the order of creativity may even be enhanced by that discipline. The total product will surely be.\n\nThe architect has two possible answers when confronted with an estimate that is too high: cut the design or callenge the estimate by suggesting cheaper implementations.This latter is inherently an emotion-generating activity. The architect is now challenging the builders way of doing the builders job. For it to be successful, the architect must\n\n- remember that the builder has the inventive and creative responsability for the implementation/ so the architect suggests not dictates;\n\n- always be prepared to suggest a way implementing anything he specifies, and be prepared to accept any other way that meets the objectives as well\n\n- deal queityle and privately in such suggestions;\n\n- be ready to forego credit for suggested improvements.',0,'2015-03-09 00:00:00'),(86,'Review: The miracle of mindfulness','This book is a collection of letters from a Viatnamese monk about how to meditate and live a mindful life. It\'s a small one (130 pages) - ideal for starters, like myself. Hopefully it does not contain a single word about Buddhism *mambo jambo*, so you could delight from it even being a skeptical on spiritual affairs.\n\nOn this post I collect nice passages found in the book; that, I suspect, would be valuable for anyone trying to live a more meaningful life.\n\n\n##A day of mindfulness\nHe recommends that, once a week, we take a day for mindfulness.\n\n> Do only such simple work as house cleaning, cooking, washing clothes, and dusting.\n> ... Afterwards, take a walk to practice breathing.\n> ... Sit in meditation for an hour before you go to bed.\n\nEvery movement during this day should be at least two times slower than the usual.\n\n---\n\n##The miracle is to walk on Earth\n\n> When you are walking along a path leading to a village, you can practice mindfulness. Walking along a dirt path, surrounded by patches of green grass, if you practice mindfulness you will experience that path, the path leading into the village. You practice by keeping this one thought alive; \"I\'m walking along the path leading into the village.\". Whether is sunny or rainy, whether the path is dry or wet, you keep that one thought, but not just repeating it like a machine, over and over again. Machine thinking is the opposite of mindfulness. If we are really engaged in mindfulness while walking along the path to the village, than we will consider the act of each step we make as an infinite wonder, and joy will open our hearts like a flower, enabling us to enter the world of reality.\n\n> I like to walk alone in country paths, rice plants and wild grasses on both sides, putting each foot down on the earth of mindfulness, knowing that I walk on the wondrous earth. In such moments, existence is a miraculous and mysterious reality. People usually consider walk either on water or in thin air to be a miracle. But I think the real miracle is not to walk either on water or in thin air, but to walk on earth. Every day we are engaged in a miracle in which we don\'t even recognize: a blue sky, white clouds, green leaves, the black, curious eyes of a child - our own two eyes. All is a miracle.\n\n---\n\n##Quiet Breathing\n\n> Your breath should be light, even, and flowing like a thin flow of water running through the sand. Your breath should be very quiet, so quiet that a person sitting next you cannot hear it. Your breath should flow gracefully, like a river, like a water snake crossing the water, and not like a chain of rugged mountains or the gallop of a horse. To master our breath is to be in control of our bodies and minds. Each time we find ourselves dispersed and find it difficult to gain control of ourselves by different means, the method of watching the breath should always be used.\n\n---\n\n##Meditation Reveals and Heals\n\n> Sitting in mindfulness, both our bodies and minds can be at peace nd totally relaxed. But this state of peace and relaxation differ fundamentally from the lazy, semi-conscious state of mind that one gets while resting and dozing. Sitting in such lazy semi-consciousness, far from being mindfulness, is like setting in a dark cave. In mindfulness one is not only restful and happy, but alert and awake. Meditation is not evasion; is a serene encounter with reality. The person who practice mindfulness should be no less awake than a driver of a car; if the practitioner isn\'t awake he will be possessed by dispersion and forgetfulness, just as the drowsy driver is likely to cause a grave accident. Be as awake as a person walking on high stilts - any mis-step could cause the walker to fall. Be like a medieval knight walking weaponless in a forest of swords. Be like a lion going forward with slow, gentle and firm steps. Only with this kind of vigilance you can realize total awakening.\n\n---\n\nIn resume, the main point of all the text - as in all mindfulness activities - is to be aware of the self, thought mediation. Beyond awareness, there\'s lot of research pointing meditation as beneficial for many of the human interest. To do not waste the here and now with useless thoughts, I cannot wonder a more important matter to master, so I\'m forced to recommend this book.\n\nOne last quote: \"You don\'t dish the washes to get them clean, you dish the washes to dish the washes\".\n\nIf you like the text I invite you to see [this](https://www.youtube.com/watch?v=GM8fDHXXSIs) talk of Sam Harris about mindfulness too.',1,'2015-05-30 18:00:00'),(87,'My opinions about TDD','TDD this is my post about TDD\n\nThe first step when you are debugging your code is to write a new test pinpointing the bug. While it is not always possible to do, those bug catching tests are among the most valuable pieces of code in your project.\n\n##References\n\nhttp://docs.python-guide.org/en/latest/writing/tests/',0,'2015-06-04 00:00:00'),(88,'Reformas na casa','Aqueles que me conhecem sabe que eu não tenho lar :P, dessa forma o título não pode ser lido literalmente. Estou começando uma série de reformas no meu blog.\n\nO primeiro passo foi tirar o botão do Facebook. Uma porque o Facebook quer controlar o mundo. Sem ressentimentos, eu também quero; mas o Facebook consegue isso de umas formas meio [grotescas](https://stallman.org/facebook.html). Também não quero ligar para avaliações superficiais como likes, se meu post foi bom ou ruim quero saber o porquê ou não saber nada.\n\nPretendo mudar um pouco o conteúdo também, aos poucos pretendo adicionar *micro* posts mais opinativos, além dos já presentes tutoriais e *tech-advices*. Afinal de contas quem acessa esse domínio quer saber a minha opinião sobre as coisas.\n\n**Deep on the rabbit hole..**\n\nArquiteturalmente, pretendo deixar o frontend mais *HTML5 native*, mais semantico (web 3.0) e com menos *plugins*. No Backend, quero mudar minha arquitetura *fullstack* ZF2 para um sistema orientado a mensagens, possivelmente utilizando várias linguagens de servidor distintas. Desnecessário mas legal :D.\n\nEssas modificações refletem minha nova perspectiva em relação ao desenvolvimento WEB e meu interesse em experimentar as novas tendências.\n\nEsqueci de mencionar, também pretendo internacionalizar, mas isso vai demorar ainda; não obstante, pretendo começar a escrever os novos posts em inglês.',1,'2015-03-29 00:00:00'),(89,'Como aprender PHP','Recebi um pedido de dicas de como aprender PHP, vou tentar expor aqui minhas opiniões à respeito. Preferi me expressar através de um post pois posso refiná-lo com o tempo, e talvez outras pessoas também venham a se beneficiar.\n\nTentei dispor as dicas por importância de ordem linear descendente, você não precisa considerar as dicas do final do arquivo se for um absoluto iniciante. Conforme for adquirindo experiência elas se tornarão mais relevantes.\n\n##Coloque a mão na massa\n\nA forma mais eficiente que encontrei para aprender qualquer linguagem de programação é de fato criando algo com ela.  O primeiro passo é o mais difícil, se você está aprendendo sozinho recomendo que pegue um tutorial na internet que produza algo palpável. Depois que você começar produzir algo, você rompe a inércia e seu interesse fluí naturalmente.\n\n###Tutoriais\n\nAlguns tutorias que me parecem interessantes:\n\n* [PHP For the Absolute Beginner](http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/)\n\nEste é um trabalho hospedado na própria Zend - mantedora do PHP - certamente vale à pena dar uma olhada;\n\nPHP é uma linguagem bem estabelecida, chances são que você nunca vai aprender tudo sobre ela, o importante é começar a mexer. Ninguém vai muito longe se quiser sair desde o início utilizando TDD, ORM, Framework, PSR\'s e por aí vai.\n\nMeu primeiro projeto em PHP foi um sistema de blog para a faculdade. Totalmente escravo, com PHP embebido no meio do HTML, várias escolhas ruins de design, e todas as más práticas de programação imagináveis. Mesmo assim, me empolguei tanto que virou uma \'rede social\' com amigos, grupos e mais umas coisas *Orkut-like*.\n\n###Dicas\n\nSe você não quer começar totalmente torto como eu fiz recomento o [PHP The Right Way](http://www.phptherightway.com/), com dicas do iniciante ao avançado. Mesmo assim não abuse, o melhor é começar torto mesmo e ir lapidando suas habilidades conforme adquire experiência.\n\n##Aprenda a linguagem não seus frameworks\n\nPHP tem inúmeros frameworks, alguns deles são de fato muito bons, mas só aprende PHP quem utiliza PHP. Comece sem utilizar nenhuma ferramenta de terceiro, nem *Composer*, assim, conforme você vai evoluindo, você vai sentir a necessidade por determinadas ferramentas e em suas pesquisas encontrará soluções elegantes cada problema.\n\n##Orientação à objetos\n\nAprender orientação à objetos não é uma opção. Desde o PHP5, a grande maioria dos esforços de desenvolvimento foi para fazer do PHP uma linguagem orientada à objetos bem estabelecida.\n\n##Faça sua biblioteca de objetos\n\nReaproveite seu trabalho de um projeto para outro. Pode chegar um tempo que você não mais utilizará essas classes. Mas aprender como manter uma coleção de objetos reusáveis certamente faz parte do processo! [Aqui](https://github.com/jeanCarloMachado/system_framework) consta a minha biblioteca - não à utilizo mais - mas serve bem como histórico de meu aprendizado.\n\n##Utilize um sistema Unix\nEu ainda estou para conhecer um programador PHP decente que programe utilizando Windows. Seja MacOS ou Linux você está bem servido.\n\n##Não utilize IDE\'s Java\nEsqueça o Eclipse e o *Netbeans*. Esses caras são feitos para programadores preguiçosos e linguagens mal feitas como Java. Com PHP sinto que o quão mais próximo dos arquivos reais você estiver melhor. Editores como o Sublime ou o Sublime são boas opções para iniciantes, intermediários e avançados.\n\n##Acostume-se com o terminal\nSe puder utilizar *BASH* em seu dia-a-dia melhor, combina muito bem com PHP. Mas o importante aqui é saber rodar os comandos básicos, absorvê-los. São muitos os casos que você precisará ou estará melhor servido utilizando terminal: rodando testes unitários, *composer*, *Git*  ,etc.\n\n##Aprenda Git\nGit já é parte essencial de ser programador, independentemente da linguagem. Mas se você está só começando, isso pode esperar. Crie seu primeiro projeto antes de entrar nos detalhes de controle de versão, assim você já terá experienciado o porquê da necessidade/demanda de algo como o Git.\n\n##Aprenda HTTP\nO único lugar que PHP deu de fato certo foi como uma linguagem do lado do servidor. E ela está se especializando cada vez mais nisso.\n\n##Comunidade\n\nMinha experiência é que grupos de Facebook são sempre falhos quando para aprender algo. Se quiser falar de fato com os melhores do PHP recomendo que utilize o IRC, em canais como o #ZFtalk e, apensar cheio de ruído, o ##PHP.\n\n##Inspire-se nos grandes players\nRecomendo seguir pessoas como o Ocramious, Mattew da Zend, Rob Allen entre tantos outros.\nEminetto e Galvão, para citar alguns *players* importantes nacionalmente.\n\n#Conclusão\n\nNinguém se torna um mestre de uma hora para outra, não obstante, com interesse, se chega à qualquer lugar. Espero que essas dicas ajudem os interessados à começar com PHP. Todos precisamos começar com uma linguagem eu comecei com C, mas PHP é uma ótima opção; é fácil e ao mesmo tempo profunda. Entretanto, recomendo que quem está iniciando que não fique preso ao PHP ou à linguagem que for. Só aprendendo como outras linguagens solucionam o mesmo problema é que de fato nos tornamos excelentes na sua solução. Ruby e NodeJS são ótimas alternativas à PHP que todo o bom programador PHP deve conhecer, pelo menos superficialmente.\n\n\nDúvidas, críticas e sugestões são sempre bem vindas.',1,'2015-03-31 00:00:00'),(90,'Porque escolhi o Vim?','Compreendo que, a primeira vista, pode parecer estranho um programador da Web desejar utilizar um programa de mais de 15 anos - 30 no caso do Vi puro. Não obstante, o *Vi* e derivados ainda tem seu apelo - não é coisa de *hipster*.\n\nAbaixo vão alguns motivos porquê alguém poderia vir a interessar-se pelo *Vim*:\n\n###Combos\n\nOs comandos no *Vim* são feitos para serem combinados em grandes expressões com efeitos especializados.\nPara alguns exemplos das possibilidades do vim veja [aqui](http://www.jeancarlomachado.com.br/post/visualizar/00069/combos-com-o-vim).\n\n####\"Linguagem\" Vim\nO *Vim* se comporta como uma linguagem, você vai utilizando partes que sabe com conceitos novos e criando as mais variadas combinações. Em algum senso é como programar a escrita. Para mais detalhes, veja este post [aqui](http://www.jeancarlomachado.com.br/post/visualizar/00025/vim-e-sublime-o-melhor-de-ambos).\n\n###Portabilidade\n\nPelo menos a versão mais básica do *Vi* é certo que estará presente em qualquer sistema operacional decente no planeta.\n\nVários programas utilizam - adaptam - suas interfaces ao modo de trabalhar do *Vim*. Principalmente se você for um cara do Linux. Vários outros programas que não suportam a notação do *Vim* nativamente implementam a via *plugin*.\n\n  Alguns exemplos são:\n  1. Firefox: via plugin;\n  2. Chrome: via plugin;\n  3. Cmus: player de música;\n  4. GnuScreen: terminal virtual;\n  5. SkippyXd: task switcher;\n  6. Copyq: gerenciador de clippboard\n  entre muitos muitos outros.\n\n\n###Performance\nDiferente das IDE\'s convencionais como Eclipse e similares, meu *Vim* inicia em menos de um segundo;\n\n###UnixWay\nO *Vim* adota o UnixWay, resumidamente ele responsabiliza-se por fazer uma única coisa, e fazê-la bem.\n###Investimento à longo prazo\n\nSegundo a Archwiki utilizar *Vim* é um [investimento para a vida toda](https://wiki.archlinux.org/index.php/Vim). Demora tempo para você se habituar e uma vida para você se tornar um mestre!  Você vai ficar escrevendo pelo menos 8 horas do seu dia certo? Acho que é um investimento que vale à pena, talvez o melhor de todos os investimento\n\n###Open Source\nDiferentemente do Sublime, o Vim é e sempre será Open-Source. E não pense que por ser tão velho o *Vim* está morto, à pouco foi migrado para o [Github](https://github.com/vim/vim).\n\n##Conclusão\n\nA impressão que tenho é que cada um tem que utilizar o que se sente razoavelmente desafiado e razoavelmente confortável. Depois de muito tempo tentando migrar, na data da publicação deste post posso dizer que me encontro nesta *zona* com o *Vim*. Mas para chegar lá foi um esforço e tanto, entretanto, para quem quer ser o melhor programador do mundo - como eu quero -  acho que vale *gota de frustração*.\n\nBem, essas são minhas razões.',1,'2015-04-02 00:00:00'),(92,'Trabalhos Científicos - Semana 1','Tive essa ideia, de falar brevemente sobre os trabalhos acadêmicos que entro em contato durante semanalmente. Essa é a primeira semana, espero que gostem.\n\n##O Desenvolvimento de um Motor Multiplataforma para Jogos 3D\n*Bessa, Souza et al*.\n\nEste artigo é basicamente um feedback sobre a construção de um Motor 3D que os autores estão desenvolvendo. Se você tem pouco conhecimento de jogos 3D e quer uns *insights* de alto nível de como um jogo 3D funciona, esse artigo é para você.',1,'2015-04-12 00:00:00'),(91,'What reuse REALLY means.','It\'s a bit hard to make a SOLID approach in PHP. In this post I wanna talk about reuse.\n\nDifferently as some might think reuse is not about to write less code. Reuse is about to have less problem. It\'s about to save from trouble not from typing.\n\n\nThere\'s at leas two kinds of reuse vertical an horizontal.\n\nVertical you acheive from extending\n\n\n\nHorizontal you acheive, at least from now, with the trait api.\n\nSometimes the namespace tells the operation about to execute, when you use to give a Operation Type of namespace like Notification',0,'2015-05-15 00:00:00'),(93,'Lecture on Clean Code','Yesterday I gave a lecture on clean code on Coderockr\'s Jam.\n\nYou can find it [here](http://www.slideshare.net/jeancarlomachado/clean-code-51677135).\n\nMy intend is to go further on this matter and maybe to present it on the\nfuture again - so the content will probably be updated as well.',1,'2015-08-16 21:00:00'),(94,'Notas: Humano demasiado Humano','Mais umas notas do meu filósofo favorito. Dessa vez do livro\n*Humano demasiado humano*. Confira as notas do livro [Crepúsculo do\nídolos](http://jeancarlomachado.com.br/#/post/61) também.\n\nÉ marca de uma cultura superior estimar as pequenas verdades\ndespretensiosas achadas com método rigoroso, mais do que os erros\nque nos ofuscam e alegram, oriundos de tempos e homens metafísicos e\nartísticos. No início as primeiras são vistas com escárnio, como se\nnão pudesse haver comparação: umas tão modestas, simples, sóbrias,\naparentemente desanimadoras, as outras tão belas, esplêndidas\nencantadoras, talvez extasiantes. Mas o que foi arduamente conquistado,\no certo, duradouro e por isso relevante para todo o conhecimento\nposterior, é afinal superior; apegar-se a ele é viril e demostra\ncoragem, simplicidade, moderação.\n\n---\n\nIgualmente possível em naturezas individuais, mediante o qual surgiria\numa vida muito mais simples e mais pura de paixões que a atual: de\nmodo que inicialmente os velhos motivos do cobiçar violento ainda\nteriam força, em consequência do velho costume herdado, mas aos\npoucos se tornariam mais fracos, sob influência do conhecimento\npurificador. Afinal, se viveria, entre os homens e consigo, tal como na\nnatureza, sem louvor, censura ou exaltação, deleitando-se com muitas\ncoisas, como um espetáculo do qual até então se tinha apenas medo.\nEstaríamos livres da ênfase, e não mais seríamos aguilhoados pelo\npensamento de ser apenas natureza ou mais que natureza. Certamente, isto\nexigiria um temperamento bom, uma alma segura, branda e no fundo alegre,\numa disposição que não precisasse estar alerta contra perfídias\ne erupções repentinas, e em cujas manifestações não houvesse\ntraço de resmungo e teimosia - essas características notórias e\ndesagradáveis de cães e homens velhos que ficariam muito tempo\nacorrentados. Um homem do qual caíram os costumeiros grilhões da vida,\na tal ponto de que ele só continua a viver para conhecer sempre mais,\ndeve poder renunciar, sem inveja e desgosto, a muita coisa, a quase\ntudo o que tem valor para os outros homens; deve-lhe bastar, como a\ncondição mais desejável, pairar livre e destemido sobre os homens,\ncostumes, leis e avaliações tradicionais das coisas. Com prazer ele\ncomunica a alegria dessa condição, e talvez não tenha outra coisa\na comunicar - o que certamente envolve uma privação, uma renúncia\na mais. Se não obstante quisermos mais dele, meneando a cabeça com\nindulgência ele indicará seu irmão, o livre homem de ação, nele se\nocultará talvez um pouco de ironia: pois a \"liberdade\" deste é um caso\nà parte.\n\n---\n\nNem o espírito mais refinado é capaz de apreciar devidamente a arte de\npolir sentenças, se não foi educado para ela, se nela não competiu.\nSem tal instrução prática, consideramos esse criar e formar algo\nmais fácil do que é na verdade, não sentimos com suficiente agudeza\no que nele é bem realizado e atraente. Por isso os atuais leitores\nde sentenças têm com elas um prazer relativamente insignificante,\nmal chegam a saboreá-las; de modo que lhes sucede o mesmo que às\npessoas que examinam camafeus: as quais elogiam porque não sabem amar,\ne prontamente se dispõem a admirar, e ainda mais prontamente a se\nesquivar.\n\n---\n*La Rochefoucald* acerta no alvo quando, na passagem mais notável de\nseu auto retrato, previne contra a compaixão todos os que possuem\nrazão, quando aconselha a deixá-la para as pessoas do povo, que\nnecessitam das paixões (não sendo guiadas pela razão) para chegarem\nao ponto de ajudar os que sofrem e de intervir energicamente em caso de\ninfortúnio; enquanto a compaixão, no seu julgamento (e no de Platão),\nenfraquece a alma. Deveríamos, sem dúvida, manifestar compaixão, mas\nguardamo-nos de tê-la: pois, sendo os infelizes tão tolos, demostrar\ncompaixão é para eles o maior bem do mundo. - Talvez possamos alertar\nmais ainda contra a compaixão, se entendermos tal necessidade dos\ninfelizes não exatamente como tolice e deficiência intelectual,\ncomo uma espécie de perturbação mental que a infelicidade ocasiona\n(assim parece entendê-la *La Rochenfocauld*), mas como algo totalmente\ndiverso e mais digno de reflexão. Observemos as crianças que choram e\ngritam a fim de inspirar compaixão, e por isso aguardam o momento em\nque seu estado pode ser visto; tenhamos contato com doentes e pessoas\nmentalmente afligidas, e perguntemos a nós mesmos se os eloquentes\ngemidos e queixumes, se a ostentação da infelicidade não tem o\nobjetivo, no fundo, de causar dor nos espectadores: a compaixão que\neles então expressam é um consolo para os fracos e sofredores, na\nmedida em que estes percebem ter ao menos um poder ainda, apesar de toda\na sua fraqueza: o poder de causar dor.\n\n---\n\nExistem noções mais elevadas e mais profundas de bem e mal, moral e\nimoral. Quem não deseja das coisas senão conhecê-las, facilmente\natinge a paz com sua alma e erra (ou peca, como diz o mundo) no máximo\npor ignorância, dificilmente por avidez. Esse alguém já não quer\nexcomungar ou extirpar os desejos; o único objetivo que o domina por\ncompleto, o de sempre conhecer tanto quanto for possível, o tornará\nfrio e abrandará toda selvageria de sua natureza. Além disso, terá\nse libertado de muitas concepções tormentosas, nada mais sentirá, ao\nouvir palavras como castigo do inferno, pecaminosidade, incapacidade\npara o bem: nelas reconhecerá apenas as sombras evanescentes de\nconsiderações erradas sobre o mundo e a vida.\n\n---\n\nQuem promete a alguém amá-lo para sempre, ou sempre odiá-lo ou\nser-lhe sempre fiel, promete algo que não está em seu poder; mas ele\npode prometer aqueles atos que normalmente são consequência do amor,\ndo ódio, da fidelidade, mas também podem nascer de outros motivos:\npois caminhos e motivos diversos conduzem a um ato. A promessa de sempre\namar alguém significa, portanto: enquanto eu te amar, demonstrarei com\natos o meu amor; se eu não mais te amar, continuarei praticando esses\nmesmos atos, ainda que por outros motivos: de modo que na cabeça de\nnossos semelhantes permanece a ilusão de que o amor é imutável e\nsempre o mesmo. Portanto, prometemos a continuidade da aparência no\namor quando, sem cegar a nós mesmo, juramos a alguém amor eterno.\n\n---\n\nRaramente se erra, quando se liga as ações extremas à vaidade, as\nmedíocres ao costume e as mesquinhas ao medo.\n\n---\n\nElogiamos ou censuramos, a depender de qual nos dá mais oportunidade de\nfazer brilhar nosso julgamento.\n\n---\n\nSócrates e Platão estão certos: o que quer que o homem faça, ele\nsempre faz o bem, isto é: o que lhe parece bom (útil) segundo o grau\nde seu intelecto, segundo a eventual medida de sua racionalidade.\n\n---\n\nPode continuar a nos reger o hábito que herdamos de avaliar, amar,\nodiar erradamente, mas sob o influxo do conhecimento crescente ele se\ntornará mais fraco: um novo hábito, o de compreender, não amar,\nnão odiar, abranger com o olhar, pouco a pouco se implanta em nós no\nmesmo chão, e daqui a milhares de anos talvez seja poderoso o bastante\npara dar à humanidade a força de criar o homem sábio e inocente\n(consciente da ignorância), da mesma forma regular como hoje produz o\nhomem tolo, injusto consciente da culpa - que é, não o oposto, mas o\nprecursor necessário daquele.\n\n---\n\nSe o cristianismo tivesse razão em suas teses acerca de um Deus\nvingador, da pecaminosidade universal, da predestinação e do perigo\nde uma danação eterna, seria um indício de imbecilidade e falta de\ncaráter não se tornar padre, apóstolo ou eremita e trabalhar, com\ntemor e tremor, unicamente pela própria salvação; pois seria absurdo\nperder assim o benefício eterno, em troca da comodidade temporal.\nSupondo que se creia realmente nessas coisas, o cristão é uma figura\ndeplorável, um ser que não sabe contar até três, e que, justamente\npor sua incapacidade mental, não mereceria ser punido tão duramente\nquanto promete o cristianismo.\n\n---\n\nPor mais que alguém creia ter se desabituado da religião, isso não\nsucedeu a ponto de não ter alegria em experimentar sentimentos e\ndisposições religiosas sem conteúdo intelectual, como na música,\npor exemplo; e quando uma filosofia procura justificar as esperanças\nmetafísicas e a profunda paz de espírito que delas se pode obter, e\nquando nos fala, por exemplo, de \"todo o Evangelho seguro que há no\nolhar das Madonas de Rafael\", acolhemos tais sentenças e explicações\ncom uma disposição particularmente efusiva: aqui é mais fácil\npara o filósofo demonstrar; o que ele quer dar encontra um coração\nque tem prazer em aceitar. Nisto se percebe que os espíritos livres\nmenos ponderados se chocam apenas com os dogmas, na realidade, e\nconhecem bem o encanto do sentimento religioso; é doloroso para\neles perder este por causa daqueles. - A filosofia científica deve\nestar alerta para não introduzir erros com base em tal necessidade\n- uma necessidade adquirida e, portanto, também passageira - mesmo\nos lógicos falam de \"intuições\" da verdade na moral e na arte (por\nexemplo, da intuição de que \"a essência das coisas é uma\"): o que\nlhes deveria ser proibido. Entre as verdades diligentemente deduzidas\ne semelhantes coisas \"intuídas\" permanece o abismo intransponível\nde que devemos aquelas ao intelecto e estas à necessidade. A fome\nnão demonstra que existe um alimento para saciá-la; ela deseja esse\nalimento. \"Intuir\" não significa reconhecer num grau qualquer a\nexistência de uma coisa, mas sim tê-la como possível, na medida em\nque por ela ansiamos ou a ela tememos; a \"intuição\" não faz avançar\num passo na terra da certeza. - Acreditamos naturalmente que as partes\nde uma filosofia tingidas pela religião estão mais bem demonstradas\nque outras, mas no fundo é o contrário, temos apenas o desejo íntimo\nde que possa ser assim - isto é, de que o que torna feliz seja também\nverdadeiro. Este desejo nos faz ver como bons motivos ruins.\n\n---\n\nA facilidade e frivolidade da imaginação homérica era necessária,\npara suavizar e temporariamente suprimir o animo desmedidamente\napaixonado e o intelecto extremamente agudo dos gregos. Como a vida\nparece amarga e cruel, quando fala esse intelecto! Eles não se iludem,\nmas deliberadamente cercam e embelezam a vida com mentiras. Simônides\naconselhava seus patrícios a tomarem a vida como um jogo; a seriedade\nlhes era bem conhecida na forma de dor (pois a miséria humana é o tema\nque os deuses mais gostam de ver cantado) e sabiam que apenas através\nda arte a própria miséria pode ser tornar deleite. Mas, como castigo\npor tal percepção, foram tão atormentados pelo prazer de fabular, que\nna vida quotidiana tornou-se difícil para eles livrar-se da mentira e\nda ilusão, como todos os povos poetas, que têm igual prazer na mentira\ne não experimentam nisso nenhuma culpa. Provavelmente isso levava ao\ndesespero os povos vizinhos.\n\n---\n\nOs artistas têm interesse em que se creia nas intuições repentinas,\nnas chamadas inspirações; como se a ideia da obra de arte, do poema,\no pensamento fundamental de uma filosofia, caísse do céu como um\nraio de graça. Na verdade, a fantasia do bom artista ou pensador\nproduz continuamente, sejam coisas boas, medíocres ou ruins, mas o\nseu julgamento altamente aguçado e exercitado, rejeita, seleciona,\ncombina; como vemos hoje nas anotações de Beethoven, que aos poucos\njuntou as mais esplêndidas melodias e de certo modo as retirou de\nmúltiplos esboços. Quem separa menos rigorosamente e confia de bom\ngrado na memória imitativa pode se tornar, em certas condições, um\ngrande improvisador; mas a improvisação artística se encontra muito\nabaixo do pensamento artístico selecionado com seriedade e empenho.\nTodos os grandes foram grandes trabalhadores, incansáveis não apenas\nno inventar, mas também no rejeitar, eleger, remodelar e ordenar.\n\n---\n\nSó não falem de dons e talentos inatos! Podemos nomear grandes\nhomens de toda espécie que foram pouco dotados. Mas adquiriram\ngrandeza, tornaram-se \"gênios\" (como se diz) por qualidades cuja\nausência ninguém que dela esteja cônscio gosta de falar: todos\ntiveram a diligente seriedade do artesão, que primeiro aprende a\nconstruir perfeitamente as partes, antes de ousar fazer um grande todo;\npermitiram-se tempo para isso, porque tinham mais prazer em fazer bem\no pequeno e secundário do que no efeito de um todo deslumbrante. É\nfácil dar a receita, por exemplo, de como se tornar um bom novelista,\nmas a realização pressupõe qualidades que geralmente se ignora,\nao dizer \"eu não tenho talento bastante\". Que alguém faça dezenas\nde esboços de novelas, nenhum com mais de duas páginas, mas de\ntal clareza que todas as palavras sejam necessárias; que registre\ndiariamente anedotas, até aprender a lhes dar a forma mais precisa e\neficaz; que seja infatigável em juntar e refratar tipos e caracteres\nhumanos; que sobretudo conte histórias com a maior frequência\npossível e escute histórias, com olhos e ouvidos atentos ao efeito\nprovocado nos demais ouvintes; que viaje como um paisagista e pintor\nde costumes; que extraia de cada ciência tudo aquilo que, sendo bem\nexposto, produz efeitos artísticos; que reflita, afinal, sobre os\nmotivos das ações humanas, sem desdenhar nenhuma indicação que\ninstrua nesse campo, e reunindo tais coisas dia e noite. Nesse variado\nexercício deixe-se passar uns dez anos: então o que foi criado na\noficina poderá também aparecer em público. - Mas como faz a maioria?\nNão começa com as partes, mas com o todo. Um dia podem acertar um bom\nlance e despertar a atenção, mas depois fazem lances cada vez piores,\npor boas razões, por razões naturais. - Às vezes, quando faltam\no caráter e a inteligência para dar forma a um tal plano de vida\nartística, o destino e a necessidade lhes tomam o lugar e conduzem o\nfuturo mestre, passo a passo, através de todas as exigências de seu\nofício.\n\n---\n\nA crença em espíritos grandes, superiores, fecundos, ainda está\n- não necessariamente, mas com muita frequência - ligada à\nsuperstição, total ou parcialmente religiosa, de que esses espíritos\nsão de origem sobre-humana e têm certas faculdades maravilhosas,\nmediante as quais chegariam a seus conhecimentos, de maneira\ncompletamente distinta da dos outros homens. Atribui-se a eles uma\nvisão imediata da essência do mundo, como que através de um buraco\nno manto da aparência, e acredita-se que, graças a esse maravilhoso\nolhar vidente, sem a fadiga e o rigor da ciência, eles possam comunicar\nalgo definitivo e decisivo acerca do homem e do mundo. Enquanto o\nmilagre no campo do conhecimento ainda tiver crentes, talvez se possa\nadmitir que daí resulta alguma vantagem para os crentes, na medida em\nque estes, por sua subordinação incondicional aos grandes espíritos,\nproporcionam a seu próprio espírito, durante o desenvolvimento, a\nmelhor escola e disciplina. Por outro lado, é no mínimo questionável\nque a superstição relativa ao gênio, a suas prerrogativas e poderes\nespeciais, seja proveitosa para o próprio gênio, quando nele se\nenraíza. Em todo o caso, é um indício perigoso que o temor de si\nmesmo assalte o homem, seja o célebre temor dos césares ou o temor do\ngênio que aqui consideramos; que o aroma do sacrifício, justamente\noferecido apenas a um deus, penetre no cérebro do gênio e ele comece\na hesitar e se ver como sobre-humano. As consequências a longo prazo\nsão: o sentimento de irresponsabilidade, de direitos excepcionais, a\ncrença de estar nos agraciando com seu trato, uma raiva insana frente\nà tentativa de compará-lo a outros, ou de estimá-lo inferior e trazer\nà luz as falhas de sua obra. Como deixa de criticar a si mesmo, caem\numa após a outra as rêmiges de sua plumagem: tal superstição mina\nas raízes de sua força e talvez o torne mesmo um hipócrita, quando\nsua força o tiver abandonado. Portanto, para os grandes espíritos é\nprovavelmente mais útil que eles se deem conta de sua sua força e da\norigem desta, que apreendam as qualidades puramente humanas que neles\nconfluíram, as felizes circunstancias que ali se juntaram: energia\nincessante, dedicação resoluta a certos fins, grande coragem pessoal;\ne também a fortuna de uma educação que logo ofereceu os melhores\nmestres, modelos e métodos. É claro que, se têm por objetivo provocar\no maior efeito possível, a falta de clareza sobre si mesmos e aquela\nsemi loucura extra sempre ajudaram muito; pois em todos os tempos o que\nse admirou e se invejou neles foi justamente a força mediante a qual\nanulam a vontade dos homens e os arrastam à ilusão de que à frente\nestão líderes sobrenaturais. Sim, acreditar que alguém possui poderes\nsobrenaturais é algo que eleva e entusiasma os homens: neste sentido a\nloucura, como diz Platão, trouxe as maiores bênçãos para os homens.\n- Em alguns casos raros, essa porção de loucura pode também ter sido\no meio pelo qual se conservou inteira uma natureza excessiva em todos\nos aspectos: também na vida dos indivíduos as alucinações têm com\nfrequência o valor de remédios que em si são venenos, mas em todo\n\"gênio\" que acredita na própria divindade o veneno se mostra afinal,\nà medida que o \"gênio\" envelhece: recordemos Napoleão, por exemplo,\ncujo ser cresceu e se tornou unidade poderosa que o distingue entre os\nhomens modernos, sem dúvida graças à fé em si mesmo e em sua estrela\ne ao desprezo pelos homens dela decorrente, até que enfim sua mesma\nfé se transformou num fatalismo quase louco, despojando-o da rapidez e\nagudeza de visão e vindo a ser a causa de sua ruína.\n\n---\n\nOs artistas gregos, os trágicos, por exemplo, criavam para vencer; toda\na sua arte é impensável sem a competição: a boa Éris de Hesíodo,\na ambição, dava asas ao seu gênio. Esta ambição exigia, antes de\ntudo, que sua obra mantivesse a excelência máxima aos seus próprios\nolhos, tal como eles compreendiam a excelência, sem consideração\npor um gosto reinante e pela opinião geral sobre o que é excelente\nnuma obra de arte; e assim Ésquilo e Eurípedes permaneceram muito\ntempo sem sucesso, até que, enfim, educaram-se juízes de arte que\navaliaram suas obras conforme critérios por eles mesmos estabelecidos.\nDesse modo procuraram a vitória sobre os rivais segundo sua própria\navaliação, a confirmação do seu julgamento. Lutar pela glória\nsignifica \"fazer-se superior e desejar que isso também apareça\npublicamente\". Se falta a primeira coisa, e a segunda é mesmo assim\ndesejada, fala-se de vaidade. Quando falta a segunda, e esta ausência\nnão é sentida, fala-se de orgulho.\n\n---\n\nEscritores que em geral não sabem dar clareza a suas ideias\npreferirão, em casos particulares, os termos e superlativos mais\nfortes, mais exagerados: o que produz um efeito semelhante à luz de\narchotes em emaranhados caminhos da floresta.\n\n---\n\nO pensador ou artista que guardou o melhor de si em suas obras sente\numa alegria quase maldosa, ao olhar seu corpo e seu espírito sendo\nalquebrados e destruídos pelo tempo, como se de um canto observasse\num ladrão a arrombar seu cofre, sabendo que ele está vazio e que os\ntesouros estão salvos.\n\n---\n\nOs aristocratas natos de espírito não são muito zelosos; suas\ncriações aparecem e caem da árvore numa tranquila tarde de outono,\nsem que sejam impacientemente desejadas, encorajadas, pressionadas pelo\nnovo. O desejo incessante de criar é vulgar, demonstra fervor, inveja,\nambição. Quando se é alguma coisa, não é preciso fazer nada - e\ncontudo se faz muito. Acima do homem \"produtivo\" há uma espécie mais\nelevada.\n\n---\n\nGraças ao extraordinário exercício imposto ao intelecto pela\nevolução artística da nova música, nossos ouvidos se tornaram\ncada vez mais intelectuais. Por isso hoje suportamos um volume de som\nbem maior, muito mais \"barulho\", porque estamos bem mais treinados\ndo que nossos predecessores para escutar a razão que existe nele.\nPois pelo fato de agora buscarem imediatamente a razão, ou seja,\n\"o que significa\", e não mais \"o que é\", nossos sentidos ficaram\nalgo embotados: embotamento que se revela, por exemplo, no domínio\nincondicional do sistema temperado; pois constituem exceção os ouvidos\nque ainda fazem distinção sutis, como entre o dó sustenido e ré\nbemol. Neste ponto nosso ouvido ficou mais grosseiro. E depois o lado\nfeio do mundo, originalmente hostil aos sentidos, foi conquistado pela\nmúsica; sua esfera de poder, sobretudo para a expressão do sublime,\ndo terrível, do misterioso, aumentou espantosamente com isso; agora\nnossa música dá a palavra a coisas que antes não tinham linguagem.\nDe modo semelhante, alguns pintores tornaram o olho mais intelectual\ne ultrapassaram em muito aquilo que antes se chamava prazer das cores\ne das formas. Também aqui o lado do mundo que era tido como feio foi\nconquistado pela inteligência artística. - Qual a consequência de\ntudo isso? Quanto mais capazes de pensar se tornam o olho e o ouvido,\ntanto mais se aproximam da fronteira em que se tornam insensíveis:\no prazer é transferido para o cérebro, os próprios órgãos dos\nsentidos se tornam embotados e débeis, o simbólico toma cada vez mais\no lugar daquilo que é - e assim chegamos à barbárie por esse caminho,\ntão seguramente como por qualquer outro. No momento ainda se diz: o\nmundo é mais feio que nunca, mas significa um mundo mais belo do que\njamais foi. Mas quanto mais se dispersa e volatiliza a fragrância do\nsignificado, tanto mais raros se tornam aqueles que ainda a percebem: os\nrestantes se detêm enfim no que é feio e tentem fruí-lo diretamente,\no que jamais conseguem. De modo que há na Alemanha uma dupla corrente\nde evolução musical: de um lado um grupo de dez mil pessoas, com\nexigências cada vez mais elevadas e delicadas, e cada vez mais atentas\npara o \"isso significa\", e de outro lado a imensa maioria, que a cada\nano se torna mais incapaz de entender o significativo também na forma\nda feiura sensorial, e por isso aprende a buscar na música o feio e\nrepugnante em si, isto é, o baixamente sensual, como satisfação cada\nvez maior.\n\n---\n\nNão é sem profundo pesar que admitiremos que os artistas de todos\nos tempos, em seus mais altos voos, levaram a uma transfiguração\ncelestial exatamente as concepções que hoje reconhecemos como falsas:\neles glorificam os erros religiosos e filosóficos da humanidade, e não\npoderiam fazê-lo sem acreditar na verdade absoluta desses erros. Se a\ncrença em tal verdade diminui, empalidecem as cores do arco-íris nos\nextremos do conhecer e do imaginar humanos: então nunca mais poderá\nflorescer o gênero da arte que, como a Divina comédia, os quadros de\nRafael, os afrescos de Michelangelo, as catedrais góticas, pressupõe\num significado não apenas cósmico, mas também metafísico nos objetos\nda arte. Um dia, uma lenda comovente contará que existiu certa vez uma\ntal arte, uma tal crença de artista.\n\n---\n\nCom os gregos tudo avança rapidamente, mas também declina rapidamente;\no movimento da máquina é tão intensificado, que uma única pedra\njogada nas engrenagens a faz explodir. Uma tal pedra foi Sócrates,\npor exemplo; numa só noite a evolução da ciência filosófica, até\nentão maravilhosamente regular, mas sem dúvida acelerada demais,\nfoi destruída. Não é uma questão ociosa imaginar se Platão,\npermanecendo livre do encanto socrático, não teria encontrado um tipo\nainda superior de homem filosófico, para nós perdido para sempre.\nContemplar os tempos anteriores a ele é como examinar a oficina onde\nse esculpem tais tipos. No entanto, os séculos VI e V parecem prometer\nalguma coisa mais, maior e superior ao que foi produzido; mas ficaram na\npromessa e no anúncio. E dificilmente haverá perda mais grave que a de\num tipo, de uma nova e suprema possibilidade de vida filosófica, não\ndescoberta até então.\n\n---\n\nNuma humanidade altamente desenvolvida como a de hoje, cada um tem da\nnatureza a possibilidade de alcançar vários talentos. Cada qual possui\ntalento nato, mas em poucos é inato ou inculcado o grau de tenacidade,\nperseverança, energia, para que alguém se torne de fato um talento,\nisto é, se torne aquilo que é, ou seja, o descarregue em obras e\nações.\n\n---\n\nGeralmente não enxergamos o valor do ginásio nas coisas que nele\naprendemos de fato e que nele sempre conservamos, mas naquelas que são\nensinadas e que o aluno assimila a contragosto, para delas se livrar o\nmais rapidamente que possa. A leitura dos clássicos - toda a pessoa\neducada há de convir - é, do modo como se realiza em toda parte, um\nprocedimento monstruoso: feita para jovens que de maneira alguma estão\nmaduros para ela, e por professores que com toda palavra, às vezes com\na própria figura, já cobrem de mofo qualquer bom autor. Mas nisso\nestá o valor que normalmente não é reconhecido - esses professores\nfalam a língua abstrata da cultura superior, pesada e difícil de\ncompreender, mas uma elevada ginástica da mente; em sua linguagem\naparecem continuamente conceitos, termos especiais, métodos, alusões\nque os jovens quase nunca ouvem na conversa com familiares ou na rua.\nSe os alunos apenas ouvirem, seu intelecto será involuntariamente\npreparado para um modo de ver científico. Não é possível que alguém\nsaia dessa disciplina totalmente intocado pela abstração, como puro\nfilho da natureza.\n\n---\n\nQuem hoje ainda começa o seu desenvolvimento com sentimentos religiosos\ne depois continua, talvez por muito tempo, a viver na metafísica e na\narte, recuou certamente um bom pedaço e inicia a disputa com outros\nhomens modernos em condições desfavoráveis: aparentemente ele perde\ntempo e terreno. Mas, por haver se detido em regiões onde o calor e a\nenergia são desencadeados, e onde continuamente o poder flui de fonte\ninesgotável, como uma torrente vulcânica, ao deixar no momento certo\nessas regiões ele avança mais rapidamente, seu pé adquire asas,\nseu peito aprende a respirar de maneira mais calma, mais profunda e\nconstante. - Ele apenas recuou, para ter terreno bastante para seu\nsalto: então pode até haver algo de terrível, de ameaçador, nesse\nrecuo.\n\n---\n\nA visão do ambiente de nossa infância nos comove: a casa com jardim,\na igreja com túmulos, o lago e o bosque - essas coisas sempre revemos\ncomo sofredores. A compaixão para conosco nos assalta, pois quanto\nsofremos desde então! E ali tudo permanece tão sereno, tão eterno:\napenas nós somos tão diferentes, tão agitados; e reencontramos\nalgumas pessoas em que o tempo não cravou seus dentes mais do que\nnum carvalho: camponeses, pescadores, moradores da floresta - são os\nmesmos. - Comoção, autocompaixão face à cultura inferior é a marca\nda cultura superior; o que mostra que a felicidade, em todo o caso, não\nfoi aumentada por ela. Quem quiser colher felicidade e satisfação na\nvida, que evite sempre a cultura superior.\n\n---\n\nUm dos principais meios de aliviar a vida é idealizar todos os seus\neventos; mas é preciso obtermos da pintura uma noção clara do que\né idealizar. O pintor solicita que o espectador não olhe de maneira\ndemasiado aguda e precisa, ele o obriga a recuar uma certa distancia\npara olhar; ele tem de pressupor um afastamento bem determinado do\nobservador em relação ao quadro; deve até mesmo presumir, em seu\nespectador, um grau igualmente determinado de agudeza do olhar; em\ntais coisas ele não pode absolutamente hesitar. Portanto, quem quiser\nidealizar sua vida não deve querer vê-la com demasiada precisão,\ndeve sempre remeter o olhar para uma certa distancia. Desse artifício\nentendia Goethe, por exemplo.\n\n---\n\nOs homens ativos rolam tal como pedra, conforme a estupidez da\nmecânica. - Todos os homens se dividem, em todos os tempos e também\nhoje, em escravos e livres; pois aquele que não tem dois terços do dia\npara si é escravo, não importa o que seja: estadista, comerciante,\nfuncionário ou erudito.\n\n---\n\nQuem deseja seriamente se tornar livre perderá a inclinação para\nerros e vícios, sem que nada o obrigue a isso; também a raiva e o\ndesgosto o assaltarão cada vez menos. Pois sua vontade não deseja nada\nmais instantemente do que o conhecimento e o meio de alcançá-lo, ou\nseja: a condição duradoura em que ele está mais apto para o conhecer.\n\n---\n\nA fim de conquistar pessoas inteligentes para uma determinada tese, às\nvezes basta apresentá-la na forma de um tremendo paradoxo.\n\n---\n\n\nAs naturezas compassivas, sempre dispostas a auxiliar na desgraça,\nraramente são as mesmas que se alegram juntamente com as demais: na\nfelicidade alheia elas não têm o que fazer, são supérfluas, não\nse sentem na posse de sua superioridade, e por isso facilmente se\ndesgostam.\n\n---\n\nPessoas muito respeitadas distribuem mesmo a sua repreensão como se\nnos distinguissem com ela. Esperam que atentemos para a solicitude com\nque se ocupam de nós. Nós as compreendemos de modo totalmente errado,\nao tomar sua repreensão objetivamente e nos defendemos dela; assim as\nirritamos e as afastamos de nós.\n\n---\n\nViverão acompanhados os espíritos livres?\n\nCreio que em geral, como as aves proféticas da Antiguidade, sendo\naqueles que hoje pensam verdadeiramente e dizem a verdade, eles\npreferirão voar sozinhos.\n\n---\n\nVivam sempre com homens superiores e realizem continuamente os atos\nda cultura superior - e tudo o que nela está vivo reconhecerá o seu\ndireito, e a ordem social de que vocês são o topo estará imune a todo\no gole e todo olhar perverso.\n\n---\n\nQuem quer dar um bom exemplo deve acrescentar à sua virtude um grão\nde tolice; então os outros imitam e também se elevam acima daquele\nimitado - algo que as pessoas adoram.\n\n---\n\nQuem pensa muito não é apto para ser homem de partido: seu pensamento\natravessa e ultrapassa o partido rapidamente.\n\n---\n\nOs jovens amam o que é interessante e peculiar, não importa até\nonde seja verdadeiro ou falso. Espíritos mais maduros amam na verdade\naquilo que nela é interessante e peculiar. Por fim, cabeças totalmente\namadurecidas amam a verdade também onde ela parece ingênua e simples\ne é enfadonha para o homem comum, porque notaram que a verdade costuma\ndizer com ar de simplicidade o que tem de mais alto em espírito.\n\n---\n\nOs homens de senso livre, que vivem apenas para o conhecimento,\nalcançarão logo o objetivo exterior de sua vida, sua posição\ndefinitiva ante a sociedade e o Estado, e se darão por satisfeitos,\npor exemplo, com um pequeno emprego ou fortuna que baste justamente\npara viver; pois se organizarão de modo tal que uma grande reviravolta\nnas condições externas, ou mesmo subversão da ordem política, não\ntranstorne também a sua vida. Em todas as coisas empregam o mínimo\nde energia, para, com toda a força acumulada e com grande fôlego,\npor assim dizer, mergulhar no conhecer. Assim podem ter a esperança\nde descer profundamente e talvez enxergar o fundo. - Um tal espírito\ngosta de tomar apenas a borda de uma experiência, não ama as coisas\nem toda a largueza e abundancia de suas dobras: pois não quer se\nemaranhar nelas. - Ele também conhece os dias da semana de cativeiro,\nde dependência, de serviço. Mas de quando em quando deverá ter um\ndomingo de liberdade, de outro modo não terá como suportar a vida.\n- É provável que mesmo o seu amor aos homens seja cauteloso e de\nfôlego curto, pois ele não que se envolver com o mundo das propensões\ne da cegueira mais do que o necessário para os fins do conhecimento.\nPrecisa confiar em que o gênio da justiça terá algo a dizer em favor\ndo seu discípulo e protegido, se vozes acusadoras o qualificarem de\npobre em amor. Em seu modo de viver e pensar há um heroísmo refinado,\nque desdenha se oferecer à adoração das massas, como faz seu irmão\nmais rude, e anda em silêncio através do mundo e para fora dele. Não\nimporta por quais labirintos vagueie, sob que rochas tenha se espremido\nsua torrente - chegando à luz ele segue o caminho, claro leve, quase\nsem ruído, e deixa que o brilho do sol brinque no seu fundo.\n\n---\n\nQuem alcançou em alguma medida a liberdade da razão, não pode se\nsentir mais que um andarilho sobre a Terra - e não um viajante que\nse dirige a uma meta final: pois esta não existe. Mas ele observará\ne terá olhos abertos para tudo quanto realmente sucede no mundo;\npor isso não pode atrelar o coração com muita firmeza a nada em\nparticular; nele deve existir algo de errante, que tenha alegria na\nmudança e na passagem. Sem dúvida esse homem conhecerá noites ruins,\nem que estará cansado e encontrará fechado o portão da cidade que\nlhe deveria oferecer repouso; além disso, talvez o deserto, como no\nOriente, chegue até o portão, animais de rapina uivem ao longe e\ntambém perto, um vento forte se levante, bandidos lhe roubem os animais\nde carga. Sentirá então cair a noite terrível, como um segundo\ndeserto sobre o deserto, e o seu coração se cansará de andar. Quando\nsurgir então para ele o sol matinal, ardente como uma divindade da ira,\nquando para ele se abrir a cidade, verá talvez, nos rostos que nela\nvivem, ainda mais deserto, sujeira, ilusão, insegurança do que no\noutro lado do portão - e o dia será quase pior do que a noite. Isso\nbem pode acontecer ao andarilho; mas depois virão, como recompensa,\nas venturosas manhãs de outras paragens e outros dias, quando já no\nalvorecer verá, na neblina dos montes, os bandos de musas passarem\ndançando ao seu lado, quando mais tarde, no equilíbrio de sua alma\nmatutina, em quieto passeio entre as árvore, das copas e das folhagens\nlhe cairão somente coisas boas e claras, presentes daqueles espíritos\nlivres que estão em casa na montanha, na floresta, na solidão, e que,\ncomo ele, em sua maneira ora feliz ora meditativa, são andarilhos e\nfilósofos. Nascidos dos mistérios da alvorada, eles ponderam como\né possível que o dia, entre o décimo e o décimo segundo toque do\nsino, tenha um semblante assim puro, assim tão luminoso, tão sereno,\ntransfigurado: eles buscam a filosofia da manhã.\n\n---\n\nAssim, avante no caminho da sabedoria, com um bom passo, com\nfirme confiança! Seja você como for, seja sua própria fonte de\nexperiência! Livre-se do desgosto com seu ser, perdoe o seu próprio\nEu, pois toda forma de você tem em si uma escada com cem degraus, pelos\nquais pode ascender ao conhecimento. A época na qual, com tristeza,\nvocê se sente lançado, considera-te feliz por essa fortuna; ela lhe\ndiz que atualmente você partilha experiências de que homens de uma\népoca futura talvez tenham de se privar. Não menospreze ter sido\nreligioso; investigue plenamente como teve um genuíno acesso à arte.\nNão é possível, exatamente com ajuda de tais experiências, explorar\ncom maior compreensão enormes trechos do passado humano? Não foi\nprecisamente neste chão que às vezes tanto lhe desagrada, no chão\ndo pensamento impuro, que medraram muitos dos esplêndidos frutos da\ncultura antiga? É preciso poder olhar além delas, crescer além delas;\npermanecendo sob o seu encanto não as compreendemos. Igualmente você\ndeve familiarizar-se com a história e o cauteloso jogo dos pratos\nda balança: \"de um lado - de outro lado\". Faça o caminho de volta,\npisando nos rastros que a humanidade fez em sua longa e penosa marcha\npelo deserto do passado: assim aprenderá, da maneira mais segura,\naonde a humanidade futura não pode ou não deve retornar. E, ao\ndesejar ver antecipadamente, com todas as forças, como será atado o\nnó do futuro, sua própria vida adquirirá o valor de instrumento e\nmeio para o crescimento. Está em suas mãos fazer com que tudo o que\nviveu - tentativas, falsos começos, equívocos, ilusões, paixões,\nseu amor e esperança - reduza-se inteiramente a seu objetivo. Este\nobjetivo é tornar-se você mesmo na cadeia necessária de anéis\nda cultura, e desta necessidade inferir a necessidade da marcha da\ncultura em geral. Quando o seu olhar tiver se tornado forte o bastante\npara ver o fundo, na escura fonte de seu ser e de seus conhecimentos,\ntalvez também se tornem visíveis para você, no espelho dela, as\ndistantes constelações das culturas vindoura. Você acha que uma vida\ncomo essa, com tal objetivo, seria árdua demais, despida de coisas\nagradáveis? Então não aprendeu ainda que não há mel mais doce que\no do conhecimento, e que as nuvens de aflição que pairam acima lhe\nservirão de úberes, dos quais você há de extrair o leite para seu\nbálsamo. Apenas ao chegar à velhice você nota como deu ouvidos à\nvoz da natureza, dessa natureza que governa o mundo inteiro mediante\no prazer: a mesma vida que tem seu auge na velhice tem seu auge na\nsabedoria, no suave fulgor solar de uma constante alegria de espírito;\nambas, a velhice e a sabedoria, você as encontra na mesma encosta da\nvida, assim quis a natureza. Então é chegado o momento, e não há por\nque se enraivecer de que a névoa da morte se aproxime. Em direção à\nluz - o seu último movimento; um grito jubiloso de conhecimento - o seu\núltimo som.',1,'2015-04-13 00:00:00'),(95,'Trabalhos científicos edição 4','\n##Graphical Potential Games - Ortiz',0,'0000-00-00 00:00:00'),(99,'curl, Bash and Firefox mutualism','As my career directs me to an API First way of working I start to\nlooking for ways to improve my development processes related to HTTP\nrequests.\n\nOne really nice work flow for debugging services is through\nCURL Bash Firefox \'mutualism\'. I\'ll describe the precess I usually take\nbelow.\n\n##The Request\n\nWhen I need to test a request there\'s two common cases. First, I never\nused the request before so I have to write one from stratch with CURL.\nWhen the service is already being used I can simply [get a copy of the\nCURL request made by the browser](http://i.imgur.com/hb1d23Z.png).\n\nAny way, I usually end up with a request like this.\n\n```\ncurl -X POST -H \"Authorization: token\" \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\nhttp://clipp.dev/report/v1/finance.get_revenue.html  -d \"filters[]\"\n```\n\n##Automating the parts\n\nThe next step I take is to update dynamic parts of the request through scripts.\n\n```\ncurl -X POST -H \"Authorization: $(clipp-get-token)\" \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\nhttp://clipp.dev/report/v1/finance.get_revenue.html  -d \"filters[]\"\n```\nIn this case I created a Bash script called *clipp-get-token*, it\'s\npurpose is to return me a properly formatted and valid authentication\ntoken so I don\'t have to bother with token timeouts.\n\nThe relevant part of the script is as it follows.\n```\nresult=`curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"login=$user',1,'2015-04-19 00:00:00'),(119,'Code Complete Notes','This is a work in progress, I didn\'t finished the reading yet, anyway\nthe book is so good that I can\'t help not publishing it.\n\nSoftware construction typically makes up 65 percent of the effort on\nsmall projects and 50 percent on medium projects. Construction accounts\nfor about 75 percent of the errors on small projects and 50 to 75 on\nmedium and large ones.\n\nRequirements and architecture are done before construction so that you\ncan do construction effectively. Construction is at the center of the\nsoftware-development process.\n\nIn many projects, the only documentation available to programmers is the\ncode itself. Requirements specifications and design documents can go out\nof date, but the source code is always up to date. Consequently, it\'s\nimperative that the source code be of the highest possible quality.\n\n*Construction is the only activity guaranteed to be done.*\n\nThe main activities in the construction are detailed design, coding,\ndebugging, integration, and developer testing (unit and integration\ntesting)\n\nIn the final analysis, your understanding of how to do construction\ndetermines how good a programmer you are.\n\nA good metaphor is simple, relates well to other relevant metaphors, and\nexplains much of the evidence and other observed phenomena.',1,'2015-09-12 15:55:19'),(120,'Reflections Service Layer','',0,'0000-00-00 00:00:00'),(121,'Reflections on Service layer','I\'m used to opportunistic refactoring, and developing using TDD\nopportunities are always presenting itself.\n\nOn Compufácil we have a service layer, it\'s like a \"put almost\neverything inside\" term (excluding data structures).\nThe merits of this approach apart, I\'m seeing a pattern to repeat \nitself when I\'m refactoring services.\n\nThere\'s usually a service that\'s responsible for one aspect of the\nbusiness logic. As the system grows, the services aspects grows,\nand the services responsibilities as well.\n\nWhen I detect two related responsibilities on a service that\nare distinct from the rest of class I usually refactor, removing\nthe related responsibilities from a class of it\'s own.\n\nThe problem is, beyond the separation of classes, the choices\nbecame less\nobvious. Sometimes this new class already uses some of the logic\nfrom it\'s originator class, so I have to call the more generic,\noriginator class, from inside the more specific (refactored) one.\nBut the logic also inverts, there are times when I need the\nspecialized from inside the generic.\n\nIn these cases the sense of smelling design emerges. When you have\na cyclic dependency is like you should not have two classes at\nall.\n\nThe problem is that the separated classes are not so distinct to\nelaborate a perfect one way relationship between them.\n\nI feel like, the more specialized should depend upon\nthe more abstract and not the other way around. But sometimes the\n\"more generic one\'s\" are not more generic in the strict sense.\nUsing a service layer concept the term generic seems to accept a\nsecond meaning: uncategorized messy functions.\nThe services layer seems to blur the direction of reuse.\n\nBut maybe it\'s a futile concern, maybe the only factor I\'m missing\nis a little bit of refactoring on the new class to specify it\'s\nrelationship with the more generic one.\n\nAnyway, I feel a room for improvement, could it be that what is\nmissing is\na way to day implicitly which class depend of which. Maybe through\ndiagrams, maybe through a dependency inversion system, maybe\nthrough annotations. The maybe persists.\n\nI\'ll research more on the topic soon, if I find a \"better\napproach\" I\'ll certainly  register it here.',1,'2015-09-16 08:47:14'),(100,'Trabalhos Científicos: Semana 2','Semana dois na série de *review* de trabalhos científicos.\n\n###Games independentes - LEMES, David Oliveira\nEste é um trabalho meio extenso, 159 páginas para ser exato. Apesar do nome um tanto genérico, o conteúdo dirige-se mais para a criação de games com \"ambientes virtuais\", tipo simulação, rpg. Não obstante, sempre que possível, o autor tenta tangenciar com o assunto \"indie\".\n\nA coisa que achei mais legal sobre o trabalho é sua numerosa quantidade de listas legais. Desde a definição das categorias dos jogos até os formatos de áudio e seus codecs.\n\nExemplo:\n>O que os jogadores querem?\n- Desafio\n- Socializar\n- Experiência solitária\n- Respeito (ranking)\n- Fantasia\n\n\nO trabalho também contém uma grande quantidade de dicas sobre vários aspectos da criação de jogos.\n\nPara exemplificar, o autor fala que a criação de enigmas por nível é algo importante (no level-design), e indica que estes enigmas: não tenham resultados booleanos (vitória ou derrota), que não contem tempo, e que não matem o jogador, entre outras dicas.\n\nOutra dica válida, sobre programação:\n\n>Começar a desenvolver um game ao mesmo tempo que aprender uma linguagem não é recomendado em nenhum momento por um simples motivo: a medida que se aprende a desenvolver em determinada linguagem, o conhecimento torna a resolução de problemas mais fácil e por consequência, evita-se o retrabalho.\n\nO autor ressalta também a importância da gerência do jogo. Sublinhando a necessidade imprescindível de um documento de design.\n\nA conclusão contém umas definições interessantes com o intuito de \"reforçar\" o que foi dito esparsamente.\nEx:\n>Organizar as ideias é o primeiro passo para começar a produção de um game. Esta ideia se enquadrará em um gênero de game. É interessante notar que por trás de cada gênero de jogo exite uma mecânica e um gênero narrativo que faz com que o game funcione como tal. A mecânica de um jogo é seu conjunto de regras, possibilidades de ações e decisões, e variedade de respostas do sistema no game.\n\n\nO trabalho no geral disponibiliza um bom conteúdo teórico sobre aspectos gerais dos jogos, não adentrando especificamente em qualquer assunto - como programação ou design. No geral, me parece ser uma boa referência para trabalhos interessados em jogos.\n\n###Building a Cross-Platform Mobile Game with HTML5 - BARNETT, Joshua\n\nBasicamente o autor explora os prós e contras da construção de jogos multiplataforma em HTML5 indo ao encontro de suas tecnologias chave com uma boa revisão e construção de um protótipo.\nAborda precisamente o processo de construção do jogo, do ponto de vista do desenvolvedor, chegando a detalhes bem específicos. Como por exemplo qual a IDE utilizada, por quais motivos. Quais os passos tomados durante o desenvolvimento, suas mudanças de opinião que quanto à tecnologias, etc.\n\n\nAlguns aspectos especiais deste trabalho constam abaixo.\n\n####Aborda pontos vitais na construção de experiências gratificantes em Jogos\n\nSublinha que o *feedback* é a chave dos jogos multiplataforma. O *feedback* não contínuo e randômico tem melhor efeito que o oposto.\n\n> O processo  de design deve ser um meio de combinar lógica e informação, para criar uma forma satisfatória em que basear as características jogo.\n\n>O processo de o jogador entender por si a mecânica do jogo é um componente vital para a sua satisfação. Se ele não entender as regras do jogo quase que instantaneamente muitas pessoas vão perder o interesse e desistir rapidamente.\n\n>Quando repetidamente testando, os desenvolvedores ficam acostumados com o jogo. Isso leva-os a subestimar os problemas de acessibilidade do jogo enfrentados pelos novos jogadores.\n\n####Conta com boas definições técnicas sobre o HTML\n\nExemplo:\n> Essencialmente, Gulp trabalha com *streams* de arquivos para dentro e fora dos módulos do node possibilitando que a aplicação se transforme em uma variedade de combinações. Uma vez que a transformação é completa, a saída pode ser escrita em um arquivo no sistema. Essa forma de trabalhar com *streams* é possibilitada pelo Node.js, sendo altamente eficiente comparado com a maioria dos sistemas de *build*, visto que não existem arquivos temporários para serem escritos em disco (tudo é feito em tempo de execução utilizando objetos de virtuais).\n\n####Alguns detalhes interessantes da história do HTML\n\n> A API de áudio web parece ser uma melhor alternativa à *tag* de áudio. Não obstante, essas tecnologia é muito mas nova que o elemento ``<audio>`` e ainda precisa ser implementados na maioria dos navegadores comerciais, com exceção do Safari do iOS versão 6.0-7.0.\n\n####Algumas conclusões bacanas\n\n> O processo de desenvolvimento de aplicações HTML5 está em constante fluxo de aperfeiçoamento e novos métodos, técnicas, e ferramentas estão aparecendo todo o tempo. Desenvolvedores precisam escolher um conjunto de ferramentas que os possibilite expressar sua criatividade, possibilitando-os a trabalhar com produtividade e eficiência. Isso é sem dúvida algo fortemente influenciado pelas preferências pessoais, experiência e opiniões à respeito de boas práticas.\n\n\nEm geral, minha opinião é que este trabalho é um bom exemplo do que se atinge com empenho. Está bem escrito, aborda os pontos certos e é profundo o suficiente para sustentar trabalhos futuros.',1,'2015-04-21 00:00:00'),(101,'Somos todos cientistas','Um texto extraordinário de Thomas Huxley, meu trabalho aqui foi\ntraduzir; o texto necessita de uma segunda revisão - que eu farei em\nbreve - de qualquer forma seu objetivo já fica claramente exposto.\n\nO método científico é nada mais que a expressão do necessário\nmodo de trabalhar da mente humana. É simplesmente o modo em que todo\no fenômeno é raciocinado, desenvolvido. Não há diferença, entre\nas operações mentais de um homem de ciência e aquelas de uma pessoa\nnormal. Entre as operações e métodos de um padeiro ou açougueiro\nmedindo seus bens nas escalas comuns, e as operações de um químico\nao fazer uma difícil e complexa análise pelos meios de sua balança\nde alta precisão. Não é o caso que as escalas e a balança diferem\nnos princípios de sua construção ou na maneira de trabalhar; mas\no feijão em um caso é pesado em um eixo infinitamente menor que no\noutro.\n\nVocê provavelmente entenderá melhor se eu lhe der um exemplo familiar.\nVocês todos já ouviram, ouso pensar, que os homens de ciência\ntrabalham pelos meios da indução e dedução, e que com ajuda destas\noperações, eles, em certo senso, espremem da Natureza certas coisas,\nque são chamadas de leis naturais, e causas, e disso, por certa\nhabilidade da sua parte, eles constroem hipóteses e teorias. E é\nimaginado por muitos que as operações da mente normal não podem\n- de nenhuma forma - serem comparadas a estes processos, e que eles\nprecisam ser adquiridos através uma certa perícia no ofício. Por\nouvir todas estas grandes palavras você pode pensar que a mente de um\nhomem de ciência deve ser constituída de uma maneira diferenciada\ndaquela do homem normal; mas se você não se assustar pelos termos, vai\ndescobrir isso é uma falácia, que todos estes terríveis aparatos são\nutilizados por vocês cada dia e em cada hora de suas vidas.\n\nExiste um incidente bem conhecido em uma das peças de Moliere, que o\nautor faz o herói expressar grande prazer quando lhe é dito que o\nmesmo vinha praticando prosa por toda sua vida. No mesmo sentido eu\nconfio que você se confortará, e se deliciará com você mesmo, na\ndescoberta que você tem agido de acordo com os princípios da filosofia\nindutiva e dedutiva durante o mesmo período. Provavelmente não há\nnenhum aqui que não tenha, no curso de seu dia, tido a ocasião de\ncolocar em movimento um complexo treinamento de raciocínio, do mesmo\ntipo, apenas diferenciando o grau, em que o homem científico vai em\nbusca de desvendar os fenômenos naturais.\n\nUma circunstancia muito trivial serve para exemplificar isso. Suponha\nque você entre numa fruteira procurando por uma maçã - você pega\numa, dá uma mordida nela, você nota que ela está azeda; você a\ninspeciona e percebe que ela é verde e dura. Você pega outra, aquela\ntambém é verde e dura, e azeda. O vendedor oferece-lhe uma terceira;\nmas, antes de mordê-la, você examina-a, e descobre e ela é dura e\nverde, e imediatamente diz que você não a levará, ela deve ser azeda,\ncomo aquelas que você já testou.\n\nNada pode ser mais simples que isso, você pensa; mas se você se der o\ntrabalho de analisar e traçar os elementos lógicos que foram feitos\npela sua mente você ficará surpreso. Em primeiro lugar, você fez uma\noperação de indução. Você descobriu que, em duas experiências, ser\nverde e dura implica em uma maçã azeda. Foi assim na primeira maçã,\ne foi confirmado na segunda. Verdade, é uma base muito pequena, mas já\né o suficiente para elaborar uma indução. Você generalizou os fatos\ne esperou encontrar azedas as maçãs que também são verdes e duras.\nSobre isso, você elaborou uma lei geral, que todas as maçãs que são\nverdes e duras são azedas; e isso é uma perfeita indução. Bem, tendo\nem mãos sua lei natural quando é oferecido para você uma maçã verde\ne dura , você diz, \"Todas as maças verdes e duras são azedas; essa\nmaçã é verde e dura; sendo assim essa maça é azeda\". Esse treino\nde raciocínio é o que os lógicos chamam de silogismo, e tem todas\nsuas varias partes e termos - sua premissa maior, sua premissas menor e\nsua conclusão. E pela ajuda de um pouco mais de raciocínio, que, se\ndescritos, seriam exibidos em dois ou três outros silogismo, você\nchega a sua conclusão final \"Eu não levarei essa maçã\". Então,\nveja bem, você estabeleceu uma lei por indução e sobre aquilo você\nfundou uma dedução, e raciocinou a conclusão do caso particular.\nBem, agora suponha, em mãos de sua lei, que depois de um tempo você\nestá discutindo as qualidades das maçãs com um amigo: você dirá\na ele, \"É uma coisa curiosa, eu descobri que todas as maçãs verdes\ne duras são azedas!\" Seu amigo lhe responde, \"Mas como você sabe\nisso?\" Você prontamente responde, \"Ah, porque eu as experimentei\nvariadas vezes e em todos os casos elas se mostraram assim.\". Bem,\nse nós estivéssemos falando de ciência ao invés de senso comum,\nchamaríamos aquilo de uma verificação experimental. E, se ainda\nconfrontado por oposição, você vai além e diz, \"Eu ouvi um pessoal\nem Somersetshire e Devonshire, onde um grande número de maçãs cresce,\nque eles observaram o mesmo. Também é o caso em Normandia, e na\nAmérica do Norte. Em resumo, eu descobri que essa é uma experiência\nuniversal sempre que alguém se dedica ao assunto.\". Nesse ponto, seu\namigo, a menos que ele é uma pessoa muito pouco racional, concorda\ncom você e está convencido que você está certo da conclusão que\ndesenhou. Ele acredita, embora talvez não saiba que acredita, que quão\nmaior a quantidade de verificações - quanto mais experimentos foram\nfeitos, e os mesmos resultados obtidos - que quão maior a variedade de\ncondições que os mesmos resultados são encontrados, mais está certa\na conclusão, e ele evita perguntar mais. Ele percebe que o experimento\nfoi tentado sobre diversas circunstancias, tempo, lugares e pessoas, com\no mesmo resultado; e ele acredita que a lei que você compôs deve ser\nrazoável, e provavelmente acreditará nela.\n\nEm ciência nós fazemos o mesmo; o filósofo exercita precisamente\nas mesmas faculdades, apenas de uma maneira muito mais delicada. No\ninquérito científico se torna uma questão de obrigação expor uma\npossível lei para todo o tipo de verificação, e cuidar, mais ainda,\nque seja feito intencionalmente, e não por mero acidente, como no caso\ndas maçãs. E em ciência, como na vida comum, nossa confiança em uma\nlei é a exata proporção da ausência de variação nos resultados\nda verificação experimental. Por instancia, se você soltar o artigo\nque você provavelmente tem em sua mão, ele vai imediatamente cair\nno chão. Esta é uma verificação muito comum de uma das melhores\nestabelecidas leis da natureza - a gravitação. O método pelos quais\nhomens de ciência estabeleceram a existência dessa lei é exatamente\na mesma que aquela pela qual nós estabelecemos a proposição trivial\nsobre o fato de todas as maçãs verdes e duras serem azedas. Mas\nnós acreditamos de uma maneira direta porque toda a experiência da\nhumanidade a verifica, e nós podemos verificar por nós mesmos a\nqualquer momento; essa é a fundação mais profunda que uma lei natural\npode descansar.\n\nCom o intento de provar que o método de estabelecer leis na ciência\né exatamente o mesmo utilizado na vida comum. Vamos agora nos dedicar\na outro assunto (na verdade é apenas outra face da mesma questão), e\nesse é o método que, através da relação entre certos fenômenos,\nnós provamos que alguns são causa de outros.\n\nEu pretendo colocar o caso claramente para você, e eu vou mostrar o\nque significo por outro caso familiar. Vou supor que você, ao descer\nde manhã para sala de estar de sua casa, descobre que sua chaleira e\nalgumas colheres que foram deixadas no quarto na tarde anterior não\nestão mais lá - a janela está aberta, e você observa a marca de uma\nmão suja na abertura da janela, e talvez, em adição aquilo, você\nnota a marca de um sapato no jardim lá fora. Todos esses fenômenos\nchamaram sua atenção instantaneamente, e antes que dois segundos\ntenham passado você diz, \"Oh, alguém forçou a janela, entrou no\nquarto e levou minhas colheres e bule!\" Essa frase sai de sua boca em\num momento. E você vai provavelmente adicionar \"Eu sei que alguém o\nfez, estou certo disso!\" Você tenta dizer exatamente o que você sabe;\nmas na realidade você está dando a impressão do que viu, em todos os\ndetalhes essenciais, uma hipótese. Você não sabe de tudo isso; não\né nada mais do que uma hipótese rapidamente formada em sua mente. E\numa hipótese fundada em um longo treino de induções e deduções.\n\n\nO que são essas induções e deduções e como você chegou nessa\nhipótese? Você observou, em primeiro lugar, que a janela estava\naberta; mas por um trem de raciocínio envolvendo muitas indicações\ne deduções, você provavelmente já tenha chegado a conclusão que -\njanelas não se abrem por elas mesmas; então você conclui que algo\nabriu a janela. Uma segunda lei geral que você chegou da mesma forma\né que bules e colheres não saem de seu lugar espontaneamente, e você\nconstatou que eles não estão onde você os deixou, que eles foram\nremovidos. Em terceiro lugar, você olha para as marcas nas janela e a\nmarca de calçado lá fora, e você pensa que em toda sua experiência\nanterior que aquela forma nunca foi produzida por nada além da mão\nde um ser humano; a mesma experiência mostra que nenhum outro animal\na não ser um ser humano veste sapatos com taxas neles como as que\nproduzem aquelas marcas no cascalho. Eu não sei, mesmo se eu pudesse\ndescobrir todos aquelas \'dicas perdidas\' que foram descritas, que elas\nnos apontariam para qualquer outra conclusão! De qualquer fora as\nleis que definem nossa presente experiência são fortes o suficiente\npara o propósito presente. Você depois chega a conclusão que esse\ntipo de marcas não são deixadas por nenhum outro tipo de animal a\nnão ser o homem, ou são encontradas em algum outro lugar além\nnas mãos e sapatos de homens. Você tem, em frente, uma lei geral,\nfundada em observação e experiencia, e essa - lamento dizer - é uma\nmuito universal - que alguns homens são ladroes; e você assume de\nvez à partir de todas essas premissas - e isso é o que constitui uma\nhipótese - que o homem que fez as marcas fora e na janela também,\nabriu a janela, foi dentro da sala, e roubou o bule e colheres. Você\nchegou na *vera causa*; você assumiu uma causa, ela é clara, é\ncompetente em produzir todo o fenômeno observado. Você pode explicar\nodos os fenômenos apenas pela hipótese de um ladrão. Mas essa é uma\nconclusão hipotética, na justiça que você não tem nenhuma prova, é\napenas altamente provável por uma série de raciocínios indutivos e\ndedutivos.\n\nSuponho que sua primeira ação, assumindo que você é uma pessoa de\nsenso comum ordinário, e você estabeleceu essas hipóteses para sua\nprópria satisfação, vai muito provavelmente procurar a polícia,\ne enviá-los a procura do ladrão, com o objetivo de recuperar sua\npropriedade. Mas justamente quando você está pensando nesse objetivo,\numa pessoa entra na sala, e ao saber seu intento replica, \"Meu bom\namigo, você está tomando resoluções abruptamente. Como você\nsabe que o homem que realmente fez essas marcas também levou suas\ncolheres? Pode ter sido um macaco que as tomou e o homem poderia\napenas estar a procura do animal.\" Você provavelmente responderia,\n\"Bem, isso é possível, mas você não percebe que isso é contra\ntoda a experiência da forma que bules e colheres são subtraídos;\nsendo assim, sua hipótese é menos provável que a minha.\" Enquanto\nvocês estão conversando desta forma, outro amigo chega, um daquele\nbom tipo que havíamos falado anteriormente. E ele pode dizer, \"Oh\nmeu querido senhor, você certamente está sendo precipitado. Você\né muito presunçoso. Você admite que todas essas ocorrências\naconteceram quando você estava dormindo e não pode saber de nada sobre\no que de fato aconteceu. Como você sabe que as leis da Natureza não\nforam suspendidas durante a noite? Pode ser que houve alguma forma de\ninterferência sobrenatural nesse caso.\" Ele declara que sua hipótese\né uma que não pode ser demonstrada na realidade, e que por nenhum meio\nvocê pode estar certo que as leis da Natureza são as mesmas quando\nvocê está dormindo assim como quando você está acordado.\n\nVocê é incapaz de responder esse tipo de raciocínio instantaneamente.\nVocê sente que seu valioso amigo colocou você sob alguma desvantagem.\nNão obstante, você se sente convencido de que você está certo, e\nvocê fala para ele, \"Meu caro amigo, eu posso apenas ser guiado pelas\npossibilidades naturais neste caso, e se você for gentil o suficiente\npara ir para o lado e me permitir passar, eu vou procurar a polícia\".\nBem, vamos supor que sua jornada foi um sucesso, e que por sorte você\nencontrou um policial; que eventualmente o ladrão foi encontrado com\nsua propriedade em mãos, e que as marcas correspondem a suas mãos\ne botas. Provavelmente qualquer juri vai considerar esses fatos uma\nótima verificação experimental de suas hipóteses, tocando a causa do\nfenômeno observado em sua sala de estar, e irá agir de acordo.\n\nAgora, neste caso suposto, eu utilizei um fenômeno comum, para que\nvocê pudesse observar quais são os diferentes passos em um ordinário\nprocesso de raciocínio, se você se der o trabalho de analisar\ncuidadosamente. Todas as operações que eu descrevi, você verá,\nestão envolvidas na mente de qualquer pessoa racional, direcionando-o\nà conclusão da atitude necessária culminando na obtenção dos itens\nfurtados. Eu disse que você é levado, neste caso, para a conclusão\npele exato mesmo trem de pensamentos que um homem de ciência usa\nquando ele está buscando descobrir a origem e as leis dos mais ocultos\nfenômenos. O processo é, e sempre deverá ser, o mesmo; e precisamente\no mesmo modo de pensar foi utilizado por Newton e Laplace em seus\ntrabalhos para descobrir e definir as causas dos movimentos dos corpos,\ncomo você, com seu próprio senso comum, poderia utilizar para detectar\num ladrão. A única diferença é a natureza do inquérito ser mais\nobscuro, cada passo precisa ser cuidadosamente observado, para que não\nhaja um único problema nas hipóteses. Uma falha nas muitas premissas\ndo dia a dia pode ter pequeno ou nenhum efeito na correta conclusão\nnossas hipóteses; mas, na busca científica, uma falácia, pequena ou\ngrande, é sempre de importância, e à longo prazo, produtora de erros\nperniciosos, senão fatais.\n\nNão permita se a ser enganado pela noção comum que uma hipótese não\né confiável simplesmente porque é uma hipótese. É muitas vezes\nargumentado, à respeito de alguma conclusão científica, que, apesar\nde tudo, é apenas uma hipótese. Mas o que temos para guiarmo-nos\nem nove décimos das coisas mais importantes de nossas vidas senão\nhipóteses, e geralmente mal embasadas? Então na ciência onde as\nevidências das hipóteses são sujeitas à mais rígida avaliação,\nnós devemos certamente buscar o mesmo curso. Você pode ter hipóteses\ne hipóteses. Um homem pode dizer, se ele quiser, que a lua é feita de\nqueijo: isso é uma hipótese. Mas outro homem, que devotou grande tempo\ne atenção ao assunto, e se equipou dos mais poderosos telescópios e\nresultados de observações de outros, declara que na sua opinião ela\né provavelmente composta de materiais muito similares àqueles que a\nTerra é composta: e isso também é apenas uma hipótese. Mas eu não\npreciso lhe dizer que existe uma enorme diferença no valor dessas\nhipóteses. Essa última é baseada em sólido conhecimento científico\né certamente valiosa; e aquela que é meramente uma adivinhação\naleatória é provável que tenha pouco valor. Cada grande passo em\nnosso progresso para descobrir causa foi feito exatamente da mesma forma\nque eu lhes descrevi. Uma pessoa observando a ocorrência de certos\nfatos e fenômenos pergunta, naturalmente, que processo, que tipo de\noperação sabida que ocorre na Natureza aplicada a este caso particular\nvai resolver o mistério? Uma vez que você tenha uma hipótese; seu\nvalor vai ser proporcional ao cuidado e completude que ela foi testada\ne verificada. É assim nestes assuntos como é nos problemas comuns da\nvida prática: a suposição do tolo será tola, enquanto a suposição\ndo sábio será sábia. Em todos os casos, você percebe que o valor\ndo resultado depende da paciência e fidelidade em que o investigador\naplica suas hipóteses a cada possível tipo de verificação.\n\nO original se encontra [aqui](http://www.is.wayne.edu/MNISSANI/A',1,'2015-04-26 00:00:00'),(103,'Prototyping with Calc','Yesterday I had to work on an very hard task related to the payment\nsystem of Compufácil. I was struggling with some scenarios so it was suggested\nfor we to prototype the values with Calc.\n\nI thought it was strange at first. Imagine prototyping in Calc!\n\nThe old school wizardry is used to use interpreted language for this\npurpose. New times, today I develop the final application on an\ninterpreted language and use an office suite for prototyping!\n\nBut after some time working on it I became to consider Calc as valuable\nprototyping asset.\n\nBut now I desire better tools, I hate suites. The need: prototyping in a really\nfast manner, where is possible to build simple GUI\'s with simple logic in int.\nBut it has to be as fast as Calc.',1,'2015-08-25 00:00:00'),(104,'','',0,'0000-00-00 00:00:00'),(105,'Micro posts','This post is a notice about the frequency of my posts.\n\nMy new intent is to established a micro-posts format so I sometimes I\'ll come where\nand write about wherever I think - tech only - on a almost daily base.\n\nThe posts in general will be shorter but frequent. Nevertheless I will\ncontinue with large ones sporadically.\n\nOne bigger that I wanna to make soon is about the architecture I build on my blog\nthat enables me to create posts easily - and in a way that makes Unix\nhackers proud.',1,'2015-08-25 09:25:46'),(106,'Things you\'ll never be capable of doing in your IDE','This list is not an esoteric one. All the examples here contained are real ones what I faced on everyday experience developing software.\n\n#Delete all empty files\n\nI was scripting and some curl and the result of the request where the name of a file I intended to create.\nBut I hadn\'t yet captured error messages and treated accordingly, so when an error came I end up with multiple files created. All empty. So the thought was: I need to remove all empty files created in this folder.\n\nTo do so:\n\n```\nfind . -size 0 | xargs rm -rf\n```\n\n\nThat\'s it for now.',1,'2015-08-25 09:38:45'),(102,'Trabalhos científicos Edição 3','A terceira edição de reviews de trabalhos científicos.\n\n##DEVELOPING EFFECT OF HTML5 THECHNOLOGY IN WEB GAME - Yu Zhang, 2012\n\nPelo enunciado, o trabalho busca discutir meios de melhorar a\narquitetura dos jogos aplicando as tecnologias do HTML5. Mas no final de\ncontas, trata-se muito mais de uma breve revisão de alguns componentes\nchave do HTML5. Não há nenhuma menção durante o desenvolvimento do\ntrabalho da construção de algo prático.\n\nAlguns pontos interessantes:\n\nZhang declara que os maiores problemas dos jogos são o conteúdo,\nexperiência e operação.\n\n> Jogo web é a combinação de um site com um jogo.\n\n\nO autor comenta que são poucos os trabalhos científicos aplicando o\nHTML5, a grande maioria trata apenas de aspectos mercadológicos do\nHTML5.\n\n\n> Desenvolvedores de jogos web podem rapidamente satisfazer as\nnecessidades de seus jogadores, mantendo-os leais a tecnologia HTML5.\n\n\nReferenciado o iRsearch, aponta que mais de 450 milhões de usuários\ntem capacidade de aceleração de gráficos 3D.\n\n\n> Devido ao nível de suporte em cada navegador ser inconsistente, a\npopularização do HTML5 para jogos ainda vai tomar um grande tempo.\n\n\nPara resumir, achei este trabalho carente de cientificidade; não\nobstante, algumas declarações são interessantes e dignas de nota.\n\n---\n\n##Smart Phones Application development using HTML5 and related technologies: A tradeoff between cost and quality - Hasan et al, 2012\n\nOs autores avaliam aplicações em HTML5 através dos fatores de\nqualidade da ISO9126 (funcionalidade, usabilidade, eficiência,\nmanutenibilidade, confiabilidade e portabilidade) e os possíveis custos\nem comparação com desenvolvimento nativo.\n\n\n> A maior dificuldade em capturar uma base de usuários é que o mercado\nde dispositivos móveis é muito fragmentado e não existe uma única\nplataforma popular.\n\n\nContém boas especificações técnicas das tecnlogias estudadas.\n\n> Uma das grades limitações do HTML era a ausência de capacidade\nde armazenamento de dados. Armazenamento no lado do cliente é um\nrequerimento básico para qualquer aplicação moderna. Essa área\nera onde as aplicações nativas detinham grande vantagem sobre as\naplicações web. O HTML5 solucionou este problema introduzindo várias\nformas de armazenamento de dados.\n\n> O maior problema com as API\'s de áudio e de vídeo do HTML5 é\na disputa entre os codecs dos navegadores. Por exemplo, Mozilla e\nOpera suportam Theora, já o Safari suporta H.264 que também é\nsuportado pelo IE9. Ambos, Iphone e Android suportam H.264 em seus\nnavegadores. A W3C recomenda OggVorbis e OggTheora para áudio e vídeo\nrespectivamente.\n\n\n> CSS3 é dividido em vários módulos. Cada módulo é independente e\nexistem cerca de 50 deles.\n\n\n> Apesar da grande maioria dos recursos dos dispositivos estar presente\nem HTML5 ainda existem muitas funcionalidades faltando para este tipo\nde aplicação. Por exemplo, não podemos mudar a imagem de fundo do\ndispositivo, ou adicionar toques etc. Similarmente, existem muitas\nAPIs de nuvem como os serviços de impressão do ICloud ou Google\ncloud que estão disponíveis para aplicações nativas mas não para\nHTML5. Outros serviços utilitários como o C2DM do Google que está\ndisponível para desenvolvedores Android para utilizar serviços de\n*push* também não estão disponíveis para o HTML5.\n\n\n\nExplora bem os aspectos de qualidade relevantes para aplicações em\nHTML5, baseando-se na ISO9126.\n\n> De acordo com uma pesquisa, para um usuário uma tarefa é\ninstantânea se ele leva até 0.1 segundos para ser executada. Se a\ntarefa toma aproximadamente um segundo então a demora será notada mas\no usuário não se incomodará com ela. Entretanto, se a tarefa leva\naproximadamente 10 segundos para terminar o usuário então começa a\nficar aborrecido e esse é o limite que algum feedback deve ser dado\npara um usuário.\n\nConta com uns comparativos de performance por navegador interessantes os\nquais foram aplicados ao protótipo desenvolvido na pesquisa.\n\n> A flexibilidade de manutenção de código em JavaScript é muito\ndependente do expertise da pessoa que está escrevendo o código.\nEscrever código \"sustentável\" em JavaScript é mais difícil se\ncomparado com Java ou C# mas, aplicando bons padrões de design, é bem\npossível escrever bom JavaScript.\n\n\nPor fim, conlui prevendo um bom futuro para as tecnologias e quantifica\no custo efetivo encontrado na pesquisa do HTML5 em relação a\nalternativas nativas.\n\n\n> Conforme JavaScript vai ganhando importância rápido progresso é\nfeito por diferentes empresas a fim de prover boas ferramentas de debug\ne inspecionamento para JavaScript.\n\n\n> O tempo de desenvolvimento de uma aplicação em HTML5 é 67% menor\nque aplicações nativas. Isso mostra o custo efetivo de aplicações\nbaseadas em HTML5. A real vantagem de aplicações em HTML5 é o suporte\nhorizontal entre as plataformas - que é a maior razão por trás do\ncusto efetivo.\n\nMinha opinião é que é um ótimo trabalho é bem instrutivo, aborda os\ntemas de maneira sensata e racional. Recomendo a leitura!\n\n\n## Viability of developing cross-platform mobile business applications\nusing HTML5 mobile framework - Morony Joshua\n\nEstuda um caso real para a construção de aplicações de negócio em\nHTML5 como solução de base de código única.\n\nExiste uma noção muito enraizada de que portabilidade e funcionalidade\nsão uma dicotomia entre web e nativo.\n\nDetermina a viabilidade se a aplicação puder ser desenvolvida sem\nnenhuma outra tecnologia além de JavaScript CSS e HTML.\n\nJavaScript já é capaz de competir com código compilado.\n\n <!-- Conta com um gráfico interessante sobre as estratégias de\ndesenvolvimento mobile. -->\n\nLista as vantagens da web segundo a pesquisa:\n\n- Única base de código com grande percentual de reúso, não requer\nmanter SDK\'s;\n\n- Evolução constante com grande número crescente de API\'s de\ndispositivos inteligentes sendo disponibilizado para JavaScript;\n\n- Tem potencial de diminuir o tempo e custo de desenvolvimento;\n\n- A opinião comum tende a favorecer aplicações nativas.\n\nCaracterísticas nativas: Grande funcionalidade, melhor performance e\nexperiência de usuário.\n\nCaracterística da web: suporte através das plataformas\n\nAborda muitos frameworks nativos multiplataforma.\n\nAponta que uma das militações do JavaScript é a falta de tipagem o\nque dificulta no debug.\n\n\nLista as estratégias ao desenvolver multiplataforma para mobile:\n\n- Frameworks que utilizam tecnologias e renderizam a aplicação\n- Frameworks que através de um navegador interpretam código\n- Frameworks que dinamicamente oferencem um sdk e convertem diretamente\n- Frameworks que para código nativo\n\nExistem vários elementos de aplicações mobile que os usuários\nconsideram padrão, recriar esses itens com HTML5 é complexo. Abstrair\natravés de frameworks torna esse processo muito mais fácil.\n\nFrameworks mobile:\n\nSench touch; jQuery mobile jQT Intel App Framework PhoneGap Build\nAppcelerator Titanium Xamarin Corona Unity 3D\n\nElabora uma lista de funcionalidades comuns em aplicações mobile:\n\nCaptura de foto Captura de vídeo Captura de áudio Vibração Acesso  ;\na lista de contatos Persistência de dados Banco de dados relacional   ;\nAcesso a fotos Geolocation Aceleração Orientação Toque Compara de  ;\ndentro da aplicação Integração com Facebook                        ;\n\nCompara o que foi determinado disponível para as plataformas alvo\n(Android e IOS).\n\nO autor foca muito na solução sencha, a ponto de deixar a solução\nweb em segundo lugar.\n\n###Conclui Conclui que HTML5 não é viável em geral para aplicações\nde negócios - por uma perspectiva de funcionalidades.',1,'2015-05-13 00:00:00'),(107,'The only responsable moment is the last possible moment','',0,'0000-00-00 00:00:00'),(108,'For a setup of tests entities','',0,'0000-00-00 00:00:00'),(109,'Decoupling strategies for Zend Framework 2 applications','I\'m recently reflecting on ways do reduce coupling on ZF2 applications.\n\nI started writing a Payment module for Compufácil, some of the struggling I found are the reason for this post.\n\n#Strategies of Decoupling\n\n##Communicating only through interfaces\n\nAt first I like this idea and I tried to implement this.\n\n###Strengths\n - Adheres to the interface segregation principle\n - Allows full decoupling\n\n###Weaknesses\n - Is too hard to write too much interfaces\n\n##Using Event Manager\n\n###Strengths\n\n###Weaknesses\n - Performance problems\n - Zend event manager is ugly\n\n##Using Services Aliases\n\n###Strengths\n\n###Weaknesses\n - Performance problems\n - Zend event manager is ugly',0,'0000-00-00 00:00:00'),(110,'Review your assumptions as soon as possible','When debugging one must detach from what he things is certain - it\'s\npremises.\n\nToday we where seeing a inexplicable error on Ci. An integration test\nwas failing because it could not find a method that we renamed\npreviously. All it\'s occurrences we\'re removed as well.\nSo there was not way how it could be looking for it.\nLooking for the called method on the source returned nothing, as expected.\n\nAfter much debugging, we reached a point in debugging that the only\nremaining option was restarting the server. When we did it, it turns out\nthat the problem vanished.\n\n(My hypothesis is that there were some cache related to the **/tmp** folder that we are not\naware of yet.)\n\nBut what matters is: it always make sense, don\'t buy the inexplicable, your tools are right\nas well, interchanging them will not help. Review your premises.\n\nThe sooner you realize some of your premises are wrong the less stressed you will be.\n\nI follow a rule of thumb: if I can\'t find an error reviewing the same part for more than tree times I must review my premises.',1,'2015-08-26 17:22:15'),(111,'Clarifying about API\'s','Today I need to clarify some things about API\'S.\n\n##What REST is NOT\n- Is not about using HTTP methods\n\n##What REST is\n- REST is about dealing with resources.\n- About treating a URL as a resource.\n\n##What RPC is NOT\n- RPC is not about serving HTML;\n- It\'s not about generating specific services that matches 1:1 the frontend needs;\n\n##What is RPC\n- Is about much of the remaining aways of implementing not REST API\'s.\n\n##Conclusion\n\nRPC and REST are both ways of delivering an API.\nAn web API being REST or RPC has to carry in it\'s essence the premise that it should be generic.\nRPC is not excuse for bad design, performance might be, not RPC.\n\nThat\'s it :).',1,'2015-08-28 16:00:04'),(112,'The best alias you will ever have','I said it would be the best alias you would ever had but I was lying.\n\nBut it\'s not because it isn\'t the best, it\'s because it\'s not an alias, it\'s an function. But you can create an alias for it anyway.\n\n\n*What is it?* Well it\'s an function to create aliases.\n\n\nWith it you can type:\n\n```\nali g git\n\n```\nand it will create an new alias called *g* that points to git.\n\n\nYou can also:\n\n```\nali gcm \"git commmit -m\"\n```\n\nIn these case for commands that has arguments or other commands together.\n\n\n*Why it\'s great?*\n\nBecause it allows you to create aliases for each command you use frequently.\n\nTo clarify, it\'s not my own idea, I find an equivalent code someplace on Reddit on a golden day.\n\n\n*The function*\n\nWhere it goes, place it where your command interpreter can find. In my case on the ``.zsh_rc`` file.\n\n```\nfunction ali() {\n    echo \"alias $1=\'${@:2}\'\" >> ~/.zsh_aliases\n    echo \"made alias:\"\n    echo \"alias $1=\'${@:2}\'\"\n    source ~/.zsh_aliases\n}\n```\n\n*Note*: If you use bash, you can switch all *zsh_* for *bash*.\n\n\nSo, I use lots of shell to earn a living, being quick using commands is essential for me.\n\nIn my experience 3 chars is the ideal amount of letters for the frequent commands so I create aliases for many of them.\n\nIn the end of the day you might end up with a bit list with almost two hundred aliases like [myself](https://github.com/jeanCarloMachado/dotfiles/blob/master/aliases.sh).\n\nSure some of them I don\'t use anymore, but the majority of them are essential in my performance. From time to time you can clean the ones you don\'t use anymore. Maybe till creating an alias for editing and sourcing the aliases file.\n\nLike this one:\n\n```\nali vialias \'vim ~/projects/dotfiles/aliases.sh; source ~/projects/dotfiles/aliases.sh\'\n```\n\nThanks for your attention.',1,'2015-08-28 17:04:01'),(113,'Things to remember from the book: Ready Player One','This weekend I read the book: Ready player one. And I should say it\'s a MUST for every geeky person on the planet.\n\nNo spoilers, but the history happens inside a RPG! It\'s like an book version of Sword Art Online. But it\'s even better IMHO.\nAnyway the book is full of geeky eighties references and for the nineties, like myself, is a treasure.\n\nHere go some pieces of fun that I not yet checked out but after reading the book I think I SHOULD.\nThis is some kind of reminder for myself - for those moments when I need a good spare time.\n\n##Movies\n\n- [Real Genius](http://www.imdb.com/title/tt0089886/)\n- [Better of Dead](http://www.imdb.com/title/tt0088794/)\n- [War Games](http://www.imdb.com/title/tt0086567/)\n\n##Games\n\n- [Adventure](https://en.wikipedia.org/wiki/Adventure_(1979_video_game))\n\nIt\'s a shy list - because the intend of mounting this list came only after I finished the book.\nThe those references were so outstanding that I feel I need to persisted them here.',1,'2015-08-30 17:18:40'),(114,'Não esqueça de ser ótimo','Demonstrar calma e bons modos no meio profissional nem sempre é fácil.\nNão obstante, é requisito essencial de toda pessoa que deseja ascender\nem sua carreira.\n\nNas palavras de Elliot, \"você consegue medir o tamanho de uma pessoa\npelos que a deixa irritada\".\n\nFalta de cortesia, já foi demostrado\n[cientificamente](http://onlinelibrary.wiley.com/doi/10.1111/j.2044-8309\n.1992.tb00981.x/abstract), ser um catalizador para descortesias cada vez\nde maiores e frequentes.\n\nAlém de ser excelso em suas atividades técnicas, o profissional de\nverdade deve perceber que ter uma postura ilustre é meio caminho\npara a credibilidade. Você pode até ser o melhor no que faz, mas se\nnão souber lidar com pessoas as chances são que você jamais seja\nreconhecido.\n\nAbaixo vão algumas dicas de como agir em situações que podem gerar\nconflito.\n\n##É muito mais fácil convencer gentilmente\n\nQuando necessitar mudar a opinião de alguém, faça-o indiretamente, com\nperguntas que a direcionem ao caminho, de modo que ela descubra a\nresposta correta por si mesma. Pois ao atacar as crenças de uma pessoa\nenfaticamente a tendência dela é prender-se ainda mais a ideia.\n\nO mesmo serve ao chamar a atenção aos erros, faça-o indiretamente,\nassim ambos os egos são mantidos e nenhuma resistência é criada.\n\n##Elogie para criar comportamentos\n\nShakespeare certa vez disse \"Assuma uma virtude, se você não a tem\".\nQuando queremos estimular um comportamento em determinado alguém uma\nsaída é considerar que a pessoa já se comporte dessa maneira, dando-a\numa reputação para manter.\n\nHaja de coração em suas aprovações e seja pródigo em elogios.\n\n##Não anuncie seu descontentamento como uma carga de cavalaria\n\nSe você está descontente sobre algo, queixar-se para seus colegas\nprovavelmente não vai ajudar e pode desmoralizar a esquipe. Sempre que\nver um problema procure sua solução, não fique remoendo uma coleção\nde malezas - o maior prejudicado é você mesmo.\n\nNão crie uma perspectiva negativa na lembrança de seus colega ao\nrecordarem sua pessoa.\n\n##Tenha memória curta\n\nEsquecer dos ressentimentos e diferenças passadas é uma grande forma\nde dar-se bem com todos.\n\n#Julgue a pessoa pelos princípios dessa pessoa, não pelos seus\n\nVocê pode ser extremamente disciplinado em seus afazeres, não requeira\no mesmo de seus colegas.\n\nSeus princípios e atitudes servirão de exemplo para seus semelhantes\nmuito mais do que uma repreensão o fará.\n\n---\n\nMuitas das ideias expostas aqui foram inspiradas\npelo clássico [How to Win Friends and Influence\nPeople](http://www.amazon.com/How-Win-Friends-Influence-People/dp/067102\n7034), recomendo a leitura.\n\n[DFTBA](http://www.urbandictionary.com/define.php?term=DFTBA) (Não\nesqueça de ser ótimo).',1,'2015-09-12 21:54:22'),(115,'Refactoring must be a constant','',0,'0000-00-00 00:00:00'),(116,'Remove Firefox useless curl headers with this','I wrote [this](https://github.com/jeanCarloMachado/personalScripts/blob/master/curl-remove-headers)\nsmall program, as part of my self-teaching experience with\nperl, to solve one tricky problem I used to face. When using Firefox I\'m\nable to dump the requests that are made to Compufácil, but Firefox\ninserts lots of useless headers that only serve to turn the request\nimpossible to read.\n\nThis program gets this request full of crappy headers and leaves only\nthe ones I didn\'t blacklisted.\n\n\nLet\'s go to an example:\n\n(This is the common request Firefox dumps me)\n\n```\ncurl-remove-headers \"curl\n\'http://clipp.dev/RPC/v1/application.get-latest_messages-user.json\'\n-H \'Host: clipp.dev\' -H \'User-Agent: Mozilla/5.0 (X11; Linux\nx86_64; rv:40.0) Gecko/20100101 Firefox/40.0\' -H \'Accept:\napplication/json, text/plain, */*\' -H \'Accept-Language:\npt_BR\' --compressed -H \'IGNORE_LOADING: true\' -H\n\'Authorization-Compufacil: 8fa10a93dd4e91dbc4b00c477da85b44a9a1cbb7\'\n-H \'Referer: http://clipp.dev/app/\' -H \'Cookie:\n_ga=GA1.2.1889325007.1434573991; hblid=wQXcje4Y6M40D0I32M21A6GSESGBd102;\nolfsk=olfsk5011984582094807; wcsid=Kf5TvYDyGiwd8AbC2M21A4GQESGB00eE;\n_oklv=1441281680828,Kf5TvYDyGiwd8AbC2M21A4GQESGB00eE;\n_okdetect={\"token\":\"14412816212760\",\"proto\":\"http%\n3A\",\"host\":\"clipp.dev\"};\n_okbk=cd4=true,vi5=0,vi4=1441281622752,vi3=active,vi2=\nfalse,vi1=false,cd8=chat,cd6=0,cd5=away,cd3=false,\ncd2=0,cd1=0,; _ok=5027-100-10-2842; language=pt_BR;\nsessionId=8fa10a93dd4e91dbc4b00c477da85b44a9a1cbb7; isAdmin=true\' -H\n\'Connection: keep-alive\' -H \'Pragma: no-cache\' -H \'Cache-Control:\nno-cache\' -H \'Content-Length: 0\'\"\n\n```\n\nAnd the output\n\n```\ncurl \'http://clipp.dev/RPC/v1/application.get-latest_messages-user.json\'\n--compressed -H \'Authorization-Compufacil:\n8fa10a93dd4e91dbc4b00c477da85b44a9a1cbb7\'\n```\n\nFor more of how to use Firefox and curl see [this\npost](http://jeancarlomachado.com.br/#!/post/99) post.\n\n\nThat\'s it and DFTBA.',1,'2015-09-03 08:46:44'),(117,'The destructive power of Proactive Incompetents','',0,'0000-00-00 00:00:00'),(118,'The ignorance related fallacies','As obvious as it might sound, stating it is never enough.\nIf one doesn\'t know about thing is not automatically elected as a bad thing.\n\nIt\'s so common to heard: this thing is shit - when we don\'t know the\nfactors that occurred to generate that outcome.\n\nUsually we don\'t even comprehend the problem as a hole itself.\n\nSo before ones start screaming: this thing is shit, stop and think,\nwhich factors I may not be aware of that created this outcome?\n\nThe great majority of times the problem is in ourselves and not\nin the frustrating factor.\n\nOh, except when the problem is related to Windows, obviously. Just\nkidding :).',1,'2015-09-04 13:13:25'),(122,'Remove early','It\'s so common on software craftsmanship, to make things obsolete.\nIdeas that aren\'t applicable anymore, pieces of rotting - not\ntested - code, etc.\n\nPeople are generally afraid of removing these files because they\nmight need them afterwards. Some part of the code that they didn\'t\nknow might need them, or the requirements might change (again).\n\nMy opinion is that one should remove files as soon as we realise\nthe file is obsolete. And by obsolete you can think of pieces of\ncode you don\'t need anymore and further, anything\nthat if you remove don\'t break any test.\n\nThe reason for this is posture is that we forget about what is obsolete soon.\nAnd if we keep pilling the number of useless files on our\nrepository, soon it will became unmanageable.\n\nAs pragmatic programmers we all use version control systems, these\nsystems are way better in remember things than ourselves. So we\nerase not needed files and trust that, if we regret after, the silicon\nmemory of our CVS\'s will save us.\n\nLet\'s lose the fear of erasing from now on ok? It\'s way better\nsometimes having to undo some erase than living in a system full\nof useless files - adding complexity for something that is already\ncomplex enough.',1,'2015-09-23 17:00:58'),(133,'A container for Statsd with Mongo Backend','At Compufácil we are starting using docker on development\nenvironments, so this week I had to find or\ncreate a container that uses Mongo for our Statsd stack.\n\nAfter some time looking for a Statsd Mongo I realised\nthat there was none, so I started building one by my own.\n\nI must say that configuring nodejs is not a so simplistic task on\ndocker\'s Ubuntu. But after some time, and a last delay due to udp\nport and docker (that I didn\'t know I had to set) all was done.\n\nAnd it\'s working amazingly. You can checkout the [source code](https://github.com/jeanCarloMachado/statsdmongo)\nand [the docker hub repository](https://hub.docker.com/r/jeancarlomachado/statsdmongo/). If you liked it let me know :).\n\nAn last note: it\'s incredible how much disk docker uses when\nyou need to build the image on your machine. I need to research\nlighter alternatives to this process, by know I\'ll keep cleaning my\ndisk from time to time.',1,'2015-11-04 17:23:02'),(134,'Slow ride with kernel upgrades','Since Kernel 4 my life got harder. By random kernel panics,\ndecrease in battery duration and problems with slow Qt\napplications.\n\nThis resume seems pretty little, but having experienced this\nproblems and tried to solve them by my own is a lot worse.\nSo I decided to downgrade my Kernel, right now I\'m on:\n\n```\nuname -a\nLinux JeanArch 3.14.52-1-lts #1 SMP Thu Sep 17 20:31:50 CEST 2015 x86_64 GNU/Linux\n```\n\nAnd no problems this. My life is so much easier. Now I can even\nget bigger uptimes!\n\nSo from now own, I\'ll  be no longer hasty about kernel upgrades. \nI think the only acceptable reason a user would prefer\na non lts release is to get some new drivers to unsupported\nhardware. But beyond that it just to harden one\'s life.\n\nAnd experiencing Archlinux for more than one year for now,\nI feel like this is the main reason Arch is considered an sort of\nunstable SO. I users might have another perception if there\nwe\'re some REALLY lts kernels officially supported.',1,'2015-11-11 20:46:36'),(135,'UML cheat sheet','\n##Relationships\nRelationships is one of the easier things to forget about UML.\n\n###Association\nRepresents the static relationship shared among the objects of\ntwo classes.\n\n###Composition\nIt\'s a strong *has* relationship. The black arrow points to the\nowning side.\n\n###Aggregation\nIs a has relationship. Aggregation uses the diamond on the\ncontainer with the other side on the contained.\n\n###Realization\n\nA realization relationship is the client implements or executes\nthe behaviour of the supplier.\n\n###Dependency\n\nIs a weak bound, usually when an entity uses other as a function\nargument or a local variable.\n\n###Generalization\n\nThe generalization is an inheritance relationship. The arrow\npoints to the base class.\n\n---\n\n##Default Values\n\nDefault values are expressed in a natural way I bet most of the\ndevelopers would be intuitive about:\n\n```\n - foo : int  = 0\n```\n\n##Constants\n\nConstants are expressed through a \"convention\", all CAPITAL\nletters should be used.\n\n```\n -  MY_CONSTANT : int = 1\n```\n\n\n#References\n\n- http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html\n- https://en.wikipedia.org/wiki/Class_diagram',1,'2015-12-01 17:03:12'),(136,'A year of my Arch installation','I\'ve been with the same installation of a Archlinux more than a year now.\n\n```\nsudo tune2fs -l /dev/sda2 | grep created\nFilesystem created:       Fri Oct 10 09:14:32 2014\n```\nIt may seem not a big deal but by my SO\'s perspective probably this\nis the longest strike on the same distro.\n\nIt was - as usual - a not easy year, but undoubtedly it was a fun\none. Many times I broke things, but not even once I was unable to log\nback.\n\n##Things that are yet broken\n\nThe web cam is broken, there\'s a project to solve it but it\'s not\nfinished yet. And probably it will never be, cause we depend\nupon the good will for liberating the specification.\n\nKernel 4 is unstable for me and the Qt applications are barely\nusable. So for now I\'m running an older lts version, following my\nphilosophy of [slow riding kernel\nupgrades](http://jeancarlomachado.com.br/#!/post/134).\n\nThis is in fact a partial true. It was certainly true right after\nthe Kernel 4 release and it\'s first minors. Now Qt applications are\nnormally usable. And Kernel 4 improved a lot in stability\nbut yet it\'s far from the 3.15 version in my experience.\n\n##Awesome things\n\nMy desktop is incredible for my experience, totally customized and\nfitted for me, it answers to my unique requirements.\nWith it I fell like I\'m practising the perfect continuous\nimprovement.\n\nI\'m a full Unix guy since I\'m using Arch. Now I\'m a full time vim\nuser, together with tmux and lots of other scripts my usage is\nsimply ingenious.\n\nMy battery duration is greater then on OSX. If I take care of\nwhat I\'m using I can take it to 15 hours.\n\nArch is about responsibility, the system will never grow outdated,\nso is up to the user to keep it fresh (don\'t messing up with things).\n\nMy system is pretty robust, and there\'s no problem that I cannot tackle\n(beyond those already listed). This is partly about responsibility\nalready mentioned. I now find really essential a extensive documentation\nabout the software I use, and it gives me insights far beyond those\nsimply \"users\" have.\n\nYet following the responsibility principle, started doing almost daily\nbackups with the really useful rsync.\n\n##The future\n\nIf I don\'t mess up critically (and it\'s backup) I\'ll continue\nworking with this installation till the end of times.\n\nI really feel on solid ground with Arch and the power it enables\nit\'s users. Thanks Archlinux community!',1,'2015-12-03 21:35:31'),(137,'Front in Floripa impressions','This Saturday I went to Front in Floripa with a friend (Vinicius Dacal). I don\'t lie\non my blog: in the beginning I felt like the only stranger (backend\ndeveloper) on unwelcome lands. But this impression quickly dissolved and\nin the end I had a really good time. The talks we\'re good, whether, the\nplace,food and mainly the people.\n\nReally all the talks we\'re nice, but here is some of the\nstronger impressions I got from some of them:\n\n---\n\nI saw tiny useful tips on the JavaScript secrets talk.\nLike functional methods, some entirely new for me, others that I didn\'t\nknew existed on JavaScript.\n\nThe animations lecture gave some nice insights about how animations\nare built for real, in places like Disney. And I got this nice book\nrecommendation:  The illusion of the life.\nI discover about [WebAnimation](http://www.w3.org/TR/web-animations/) specification on this talk as well.\n\nThe talk about dss was nice as well, you can checkout the\nproject [here](https://github.com/guisouza/dss). Gui talked about\nconstantly improving as well, about the importance of being the\nin a place where you are the least knowledgeable of all. I cannot\nagree fully on it but certainly it injected some reflections on my\nmind.\n\nOn a pause we talked with Juarez and Raphael, about jobs, new\ntendencies, cities, OS\'s and lots of other things.\n\nAfterwards we saw Raphael talking about WEBGL and I\'m really impressed\nabout this guy. The knows a lot and is extremely new, and tries to be funny :P. He\ngave me new inspiration towards game (mainly 3D) development.\n\nJuarez talked about Ionic. I liked how much you can accomplish In\nlittle time with Ionic. But it, as well, seems like the Wordpress\nof mobiles, don\'t get me wrong - it\'s not a bad thing - only don\'t\nfit with my preferences.\n\nI don\'t recall which of the talkers said but here I\'ll quote:\n\" You don\'t need to know all the insane collections of technologies\navailable for frontend nowadays. What  matters is that you know about\nthem in a way that, when you need some of them, you will now the tool\nyou need exists, then you can learn and apply them. \"\n\n---\n\nIn the end of the event we went to a pub. We got a ride with a nice guy\nand talked about work experiences on the trip.\n\nEveryone was really gentle and funny. We got some free beer and I really\nhope I could stay longer.\n\nLeaving the pub I was stopped by a guy who says he knew me, he\nread some of my posts and checkout my profile on Wakatime and\nencouraged me to send a talk on PHP SC. It was great :).\n\nIn the journey home we talked about what matters in this kind of\nevents is the feeling, that inspiration one\'s get. You don\'t need\nreally advanced talks to get it, and certainly will not get it\nfrom YouTube. I think this is the most important aspect of\nparticipating of events. You may not learn awesome new things, but\nyou will see people like you, struggling with similar problems. You\nwill see their will to overcome these problems and make others life\neasier. And you see all of it and see the same on yourself, and This\nserves as an fuel for your technology aspirations.\n\nTo resume it was a nice day and certainly I will not miss the next\nedition, and stay longer next time as well.',1,'2015-12-06 18:17:36'),(138,'CleanCode references','This post is intended to be a collection of nice links about clean\ncode. It\'s purpose is for me to index it and keep it fresh in my\nmind.\n\n###Posts:\n\n1. [A comment is an apology](http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode).\n2. [Programmers Oath](http://blog.cleancoder.com/uncle-bob/2015/11/18/TheProgrammersOath.html).\n\n\n###Slides\n\n[Clean code by myself](http://www.slideshare.net/jeancarlomachado/clean-code-51677135).\n\n###Books\n\n[Clean Code: A Handbook of Agile Software Craftsmanship 1st Edition](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882).',1,'2015-12-08 15:17:16'),(139,'Code review references','This post is intended to be a collection of resources about the\ntopic of code review.\n\n###Posts:\n1. [Practical Lessons in Peer Code Review](http://blog.salsitasoft.com/practical-lessons-in-peer-code-reviewc).\n2. [Code Review in Agile Teams – part I](http://blogs.atlassian.com/2009/11/code_review_in_agile_teams_part_i/).\n\n\nThis topic is far too simplistic for now, but with time my\nintention is to fill this subject with material.',1,'2015-12-08 15:30:21');
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-01-30 12:54:32
